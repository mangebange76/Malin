import streamlit as st
import pandas as pd
import random
import math
from datetime import datetime, timedelta
import gspread
from gspread_dataframe import get_as_dataframe, set_with_dataframe
from oauth2client.service_account import ServiceAccountCredentials

# Autentisering
import toml
secrets = toml.load(".streamlit/secrets.toml")
SHEET_URL = secrets["SHEET_URL"]
credentials_dict = secrets["GOOGLE_CREDENTIALS"]
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
client = gspread.authorize(credentials)
spreadsheet = client.open_by_url(SHEET_URL)
worksheet = spreadsheet.sheet1

# Kolumner
ALL_COLUMNS = [
    "Dag", "Veckodag", "Nya killar", "Fitta", "R√∂v", "DM", "DF", "DA",
    "TPP", "TAP", "TP", "√Ñlskar", "Sover med", "Tid S", "Tid D", "Tid trippel",
    "Vila", "Jobb", "Grannar", "Tjej PojkV", "Nils fam", "Svarta", "DeepT",
    "Sekunder", "Vila mun", "Varv", "K√§nner", "M√§n", "Summa singel", "Summa dubbel",
    "Summa trippel", "Snitt", "Tid mun", "Summa tid", "Suger", "Tid kille",
    "H√•rdhet", "Filmer", "Pris", "Int√§kter", "Malin l√∂n", "Kompisar",
    "Aktiekurs", "Kompisar aktiev√§rde"
]

# Maxv√§rden som uppdateras fr√•n Dag = 0
def hamta_maxvarden(df):
    dag0 = df[df["Dag"] == 0]
    if dag0.empty:
        return {"Jobb": 0, "Grannar": 0, "Tjej PojkV": 0, "Nils fam": 0}
    rad = dag0.iloc[0]
    return {
        "Jobb": rad.get("Jobb", 0),
        "Grannar": rad.get("Grannar", 0),
        "Tjej PojkV": rad.get("Tjej PojkV", 0),
        "Nils fam": rad.get("Nils fam", 0)
    }

def ensure_columns_exist(df):
    for col in ALL_COLUMNS:
        if col not in df.columns:
            df[col] = 0
    return df[ALL_COLUMNS]

def load_data():
    df = get_as_dataframe(worksheet, evaluate_formulas=True).fillna(0)
    df = df if not df.empty else pd.DataFrame(columns=ALL_COLUMNS)
    df = ensure_columns_exist(df)
    df = df.fillna(0)
    return df

def save_data(df):
    worksheet.clear()
    set_with_dataframe(worksheet, df)

def get_next_day(df):
    if df.empty:
        return 1
    return int(df["Dag"].max()) + 1

def veckodag_from_dag(dag):
    veckodagar = ["L√∂rdag", "S√∂ndag", "M√•ndag", "Tisdag", "Onsdag", "Torsdag", "Fredag"]
    return veckodagar[(dag - 1) % 7]

def visa_redigeringsformul√§r(rad, dag):
    with st.form("Redigera rad", clear_on_submit=False):
        ny_rad = {}
        ny_rad["Dag"] = dag
        ny_rad["Veckodag"] = veckodag_from_dag(dag)
        for kolumn in ALL_COLUMNS:
            if kolumn in ["Dag", "Veckodag", "K√§nner", "M√§n", "Summa singel", "Summa dubbel",
                          "Summa trippel", "Snitt", "Tid mun", "Summa tid", "Suger", "Tid kille",
                          "H√•rdhet", "Filmer", "Pris", "Int√§kter", "Malin l√∂n", "Kompisar",
                          "Kompisar aktiev√§rde"]:
                continue
            typ = float if isinstance(rad[kolumn], float) else int
            ny_rad[kolumn] = st.number_input(
                kolumn,
                value=typ(rad.get(kolumn, 0)),
                step=1.0 if typ == float else 1
            )
        submitted = st.form_submit_button("Spara redigerad rad")
        if submitted:
            return ny_rad
    return None

def l√§gg_till_rad(df, ny_rad):
    ny_rad = pd.DataFrame([ny_rad])
    df = pd.concat([df, ny_rad], ignore_index=True)
    df = update_calculations(df)
    save_data(df)
    return df

def slumpa_film(df, stor=False):
    dag = get_next_day(df)
    maxv√§rden = h√§mta_maxv√§rden(df)

    if stor:
        nya_killar = random.randint(60, 200)
        fitta = random.randint(10, 30)
        r√∂v = random.randint(10, 30)
        dm = random.randint(50, 100)
        df_ = random.randint(50, 100)
        da = random.randint(50, 100)
        tpp = random.randint(30, 80)
        tap = random.randint(30, 80)
        tp = random.randint(30, 80)
    else:
        nya_killar = random.randint(10, 50)
        fitta = random.randint(3, 12)
        r√∂v = random.randint(3, 12)
        dm = random.randint(10, 25)
        df_ = random.randint(10, 25)
        da = 0
        tpp = 0
        tap = 0
        tp = 0

    ny_rad = {
        "Dag": dag,
        "Veckodag": veckodag_from_dag(dag),
        "Nya killar": nya_killar,
        "Fitta": fitta,
        "R√∂v": r√∂v,
        "DM": dm,
        "DF": df_,
        "DA": da,
        "TPP": tpp,
        "TAP": tap,
        "TP": tp,
        "√Ñlskar": 12,
        "Sover med": 1,
        "Tid S": 60,
        "Tid D": 70,
        "Tid T": 80,
        "Vila": 7,
        "Jobb": random.randint(3, maxv√§rden.get("Jobb", 3)),
        "Grannar": random.randint(3, maxv√§rden.get("Grannar", 3)),
        "Tjej PojkV": random.randint(3, maxv√§rden.get("Tjej PojkV", 3)),
        "Nils familj": random.randint(3, maxv√§rden.get("Nils familj", 3)),
        "Svarta": random.choice([0, nya_killar]),
        "DeepT": 0,
        "Sekunder": 0,
        "Vila mun": 0,
        "Varv": 0,
    }

    rad = visa_redigeringsformul√§r(ny_rad, dag)
    if rad:
        df = l√§gg_till_rad(df, rad)
        visa_varningar(rad)
    return df

def slumpa_vilodag(df, typ):
    dag = get_next_day(df)
    maxv√§rden = h√§mta_maxv√§rden(df)

    ny_rad = {kolumn: 0 for kolumn in ALL_COLUMNS}
    ny_rad["Dag"] = dag
    ny_rad["Veckodag"] = veckodag_from_dag(dag)
    ny_rad["Vila"] = 7

    if typ == "hemma":
        ny_rad["√Ñlskar"] = 8
        ny_rad["Sover med"] = 1
        ny_rad["Vila"] = 7
        ny_rad["Tid S"] = 60
        ny_rad["Tid D"] = 70
        ny_rad["Tid T"] = 80
        ny_rad["Tid mun"] = 0
    elif typ == "jobb":
        ny_rad["Jobb"] = round(maxv√§rden.get("Jobb", 0) * 0.3)
        ny_rad["Grannar"] = round(maxv√§rden.get("Grannar", 0) * 0.3)
        ny_rad["Tjej PojkV"] = round(maxv√§rden.get("Tjej PojkV", 0) * 0.3)
        ny_rad["Nils familj"] = round(maxv√§rden.get("Nils familj", 0) * 0.3)
    elif typ == "helt":
        pass  # Alla v√§rden √§r redan nollade ovan

    rad = visa_redigeringsformul√§r(ny_rad, dag)
    if rad:
        df = l√§gg_till_rad(df, rad)
        visa_varningar(rad)
    return df

def kopiera_st√∂rsta_raden(df):
    dag = get_next_day(df)
    if df.empty:
        return df
    st√∂rsta = df[df["M√§n"] == df["M√§n"].max()].iloc[0].copy()
    st√∂rsta["Dag"] = dag
    st√∂rsta["Veckodag"] = veckodag_from_dag(dag)

    rad = visa_redigeringsformul√§r(st√∂rsta, dag)
    if rad:
        df = l√§gg_till_rad(df, rad)
        visa_varningar(rad)
    return df

def visa_redigeringsformul√§r(rad, dag):
    with st.form(f"redigera_rad_{dag}"):
        ny_rad = rad.copy()
        for kolumn in ALL_COLUMNS:
            if kolumn == "Dag":
                st.number_input(kolumn, value=int(ny_rad[kolumn]), disabled=True, key=f"{kolumn}_{dag}")
            elif isinstance(ny_rad[kolumn], (int, float)):
                step = 1.0 if isinstance(ny_rad[kolumn], float) else 1
                ny_rad[kolumn] = st.number_input(kolumn, value=float(ny_rad[kolumn]), step=step, key=f"{kolumn}_{dag}")
            else:
                ny_rad[kolumn] = st.text_input(kolumn, value=str(ny_rad[kolumn]), key=f"{kolumn}_{dag}")

        if st.form_submit_button("Spara redigerad rad"):
            return ny_rad
    return None

def slumpa_film(df, typ):
    dag = get_next_day(df)
    maxv√§rden = h√§mta_maxv√§rden(df)

    ny_rad = {kolumn: 0 for kolumn in ALL_COLUMNS}
    ny_rad["Dag"] = dag
    ny_rad["Veckodag"] = veckodag_from_dag(dag)

    import random

    if typ == "liten":
        ny_rad["Nya killar"] = random.randint(5, 20)
        ny_rad["Fitta"] = random.randint(2, 6)
        ny_rad["R√∂v"] = random.randint(2, 6)
        ny_rad["DM"] = random.randint(10, 20)
        ny_rad["DF"] = random.randint(10, 20)
        ny_rad["DA"] = random.randint(10, 20)
        ny_rad["TPP"] = random.randint(5, 10)
        ny_rad["TAP"] = random.randint(5, 10)
        ny_rad["TP"] = random.randint(5, 10)
    elif typ == "stor":
        ny_rad["Nya killar"] = random.randint(60, 200)
        ny_rad["Fitta"] = random.randint(10, 30)
        ny_rad["R√∂v"] = random.randint(10, 30)
        ny_rad["DM"] = random.randint(50, 100)
        ny_rad["DF"] = random.randint(50, 100)
        ny_rad["DA"] = random.randint(50, 100)
        ny_rad["TPP"] = random.randint(30, 80)
        ny_rad["TAP"] = random.randint(30, 80)
        ny_rad["TP"] = random.randint(30, 80)

    ny_rad["√Ñlskar"] = 12
    ny_rad["Sover med"] = 1
    ny_rad["Tid S"] = 60
    ny_rad["Tid D"] = 70
    ny_rad["Tid T"] = 80
    ny_rad["Vila"] = 7

    ny_rad["Jobb"] = random.randint(3, maxv√§rden.get("Jobb", 3))
    ny_rad["Grannar"] = random.randint(3, maxv√§rden.get("Grannar", 3))
    ny_rad["Tjej PojkV"] = random.randint(3, maxv√§rden.get("Tjej PojkV", 3))
    ny_rad["Nils familj"] = random.randint(3, maxv√§rden.get("Nils familj", 3))

    ny_rad["Svarta"] = random.choice([0, ny_rad["Nya killar"]])
    ny_rad["DeepT"] = 0
    ny_rad["Sekunder"] = 0
    ny_rad["Vila mun"] = 0
    ny_rad["Varv"] = 0

    rad = visa_redigeringsformul√§r(ny_rad, dag)
    if rad:
        df = l√§gg_till_rad(df, rad)
        visa_varningar(rad)
    return df

def visa_varningar(rad):
    summa_tid = rad.get("Summa tid", 0)
    tid_kille = rad.get("Tid kille", 0)
    if summa_tid > 17:
        st.warning(f"‚ö†Ô∏è Summa tid √§r {summa_tid:.2f} timmar ‚Äì det kan vara f√∂r mycket.")
    if tid_kille < 9 or tid_kille > 15:
        st.warning(f"‚ö†Ô∏è Tid per kille √§r {tid_kille:.2f} minuter ‚Äì utanf√∂r rekommenderat intervall (9‚Äì15 min).")

def statistikvy(df):
    st.header("üìä Statistik")

    if df.empty:
        st.info("Ingen data tillg√§nglig √§nnu.")
        return

    dag_0 = df[df["Dag"] == 0]
    max_kompisar = dag_0[["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]].sum().sum()
    max_nils = dag_0["Nils familj"].sum()

    filmer_med_killar = df[df["Nya killar"] > 0]
    filmer = len(filmer_med_killar)
    totalt_m√§n = df["Nya killar"].sum() + max_kompisar
    snitt_gb = totalt_m√§n / filmer if filmer > 0 else 0

    √§lskat = df["√Ñlskar"].sum()
    sovit = df["Sover med"].sum()
    k√§nner = df[["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]].sum()
    k√§nner_summa = k√§nner.sum()
    svarta = df["Svarta"].sum()
    vita = df["Nya killar"].sum() - svarta
    s√•lda_filmer = df["Filmer"].sum()
    int√§kter = df["Int√§kter"].sum()
    malin_l√∂n = df["Malin l√∂n"].sum()
    kompisars_l√∂n = df["Kompisar"].sum()

    √§lskat_snitt = √§lskat / max_kompisar if max_kompisar else 0
    sovit_snitt = sovit / max_nils if max_nils else 0
    svarta_procent = svarta / df["Nya killar"].sum() if df["Nya killar"].sum() else 0
    vita_procent = vita / df["Nya killar"].sum() if df["Nya killar"].sum() else 0

    roi = malin_l√∂n / (√§lskat + sovit + df["Nya killar"].sum() + k√§nner_summa) if (√§lskat + sovit + df["Nya killar"].sum() + k√§nner_summa) else 0
    rader_med_kontakt = df[(df["Nya killar"] > 0) | (df["√Ñlskar"] > 0) | (df["Sover med"] > 0) | (df["K√§nner"] > 0)]
    malin_m√§n_per_dag = (√§lskat + sovit + df["Nya killar"].sum() + k√§nner_summa) / len(rader_med_kontakt) if len(rader_med_kontakt) > 0 else 0

    # Kompisars aktiev√§rde per person
    sista_kurs = df["Aktiekurs"].iloc[-1] if "Aktiekurs" in df.columns and not df["Aktiekurs"].isnull().all() else 40.0
    aktiev√§rde_total = 5000 * sista_kurs
    antal_kompisar = max_kompisar
    aktiev√§rde_per_kompis = aktiev√§rde_total / antal_kompisar if antal_kompisar else 0

    v√§nner_gb = df["K√§nner"].sum() / max_kompisar if max_kompisar else 0
    sex_kompisar = √§lskat + v√§nner_gb
    sex_familj = √§lskat + v√§nner_gb + sovit_snitt

    st.subheader("üé¨ Produktion")
    st.write(f"**Filmer (med killar):** {filmer}")
    st.write(f"**S√•lda filmer:** {s√•lda_filmer}")
    st.write(f"**Totalt antal m√§n:** {totalt_m√§n}")
    st.write(f"**Snitt GB:** {snitt_gb:.2f}")

    st.subheader("üßÆ H√§ndelser")
    st.write(f"**√Ñlskat:** {√§lskat}")
    st.write(f"**Sovit med:** {sovit}")
    st.write(f"**Jobb:** {k√§nner['Jobb']}")
    st.write(f"**Grannar:** {k√§nner['Grannar']}")
    st.write(f"**Tjej PojkV:** {k√§nner['Tjej PojkV']}")
    st.write(f"**Nils familj:** {k√§nner['Nils familj']}")
    st.write(f"**Svarta:** {svarta}")
    st.write(f"**Vita:** {vita}")

    st.subheader("üí∞ Ekonomi")
    st.write(f"**Int√§kter:** {int√§kter:.2f} USD")
    st.write(f"**Malin l√∂n:** {malin_l√∂n:.2f} USD")
    st.write(f"**V√§nners l√∂n:** {kompisars_l√∂n:.2f} USD")
    st.write(f"**Malin andel av int√§kt:** {malin_l√∂n / int√§kter * 100:.2f}%") if int√§kter else None

    st.subheader("üìà Nyckeltal")
    st.write(f"**√Ñlskat per kompis:** {√§lskat_snitt:.2f}")
    st.write(f"**Sovit med per Nils fam:** {sovit_snitt:.2f}")
    st.write(f"**Svarta i %:** {svarta_procent*100:.2f}%")
    st.write(f"**Vita i %:** {vita_procent*100:.2f}%")
    st.write(f"**Malin ROI per man:** {roi:.4f}")
    st.write(f"**Malin m√§n per dag:** {malin_m√§n_per_dag:.2f}")

    st.subheader("üìä Kompisars aktiev√§rde")
    st.write(f"**Totalt v√§rde (5000 aktier √ó {sista_kurs:.2f} USD):** {aktiev√§rde_total:.2f} USD")
    st.write(f"**Per kompis ({antal_kompisar} st):** {aktiev√§rde_per_kompis:.2f} USD")

    st.subheader("‚ù§Ô∏è Summering")
    st.write(f"**Sex med kompisar:** {sex_kompisar:.2f}")
    st.write(f"**Sex med familj:** {sex_familj:.2f}")

def main():
    st.set_page_config(page_title="MalinData", layout="wide")
    st.title("üßæ MalinData")

    df = load_data()
    df = ensure_columns_exist(df)
    df = update_calculations(df)

    menyval = st.sidebar.radio("Navigera", ["üìÖ Huvudvy", "üìà Statistik", "‚öôÔ∏è Redigera maxv√§rden"])

    if menyval == "üìÖ Huvudvy":
        visa_huvudvy(df)
        df = knappfunktioner(df)
    elif menyval == "üìà Statistik":
        statistikvy(df)
    elif menyval == "‚öôÔ∏è Redigera maxv√§rden":
        df = formul√§r_maxv√§rden(df)

    spara_data(df)

if __name__ == "__main__":
    main()
