import streamlit as st
import pandas as pd
import random
import math
from datetime import datetime, timedelta
import gspread
from gspread_dataframe import get_as_dataframe, set_with_dataframe
from oauth2client.service_account import ServiceAccountCredentials
import toml

# Autentisering
secrets = toml.load(".streamlit/secrets.toml")
SHEET_URL = secrets["SHEET_URL"]
credentials_dict = secrets["GOOGLE_CREDENTIALS"]
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
client = gspread.authorize(credentials)
spreadsheet = client.open_by_url(SHEET_URL)
worksheet = spreadsheet.sheet1

# Kolumnstruktur
ALL_COLUMNS = [
    "Dag", "Veckodag", "Nya killar", "Fitta", "R√∂v", "DM", "DF", "DA",
    "TPP", "TAP", "TP", "√Ñlskar", "Sover med", "Tid S", "Tid D", "Tid T",
    "Vila", "Jobb", "Grannar", "Tjej PojkV", "Nils familj", "Svarta", "DeepT",
    "Sekunder", "Vila mun", "Varv", "K√§nner", "M√§n", "Summa singel", "Summa dubbel",
    "Summa trippel", "Snitt", "Tid mun", "Summa tid", "Suger", "Tid kille",
    "H√•rdhet", "Filmer", "Pris", "Int√§kter", "Malin l√∂n", "Kompisar",
    "Aktiekurs", "Kompisar aktiev√§rde", "Malin ROI"
]

def ensure_columns_exist(df):
    for col in ALL_COLUMNS:
        if col not in df.columns:
            df[col] = 0
    return df[ALL_COLUMNS]

def load_data():
    df = get_as_dataframe(worksheet, evaluate_formulas=True).fillna(0)
    df = df if not df.empty else pd.DataFrame(columns=ALL_COLUMNS)
    df = ensure_columns_exist(df)
    df = df.fillna(0)
    return df

def save_data(df):
    worksheet.clear()
    set_with_dataframe(worksheet, df)

def get_next_day(df):
    if df.empty:
        return 1
    return int(df["Dag"].max()) + 1

def veckodag_from_dag(dag):
    veckodagar = ["L√∂rdag", "S√∂ndag", "M√•ndag", "Tisdag", "Onsdag", "Torsdag", "Fredag"]
    return veckodagar[(dag - 1) % 7]

def h√§mta_maxv√§rden(df):
    rad0 = df[df["Dag"] == 0]
    if rad0.empty:
        return {}
    return rad0.iloc[0][["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]].to_dict()

def validera_maxvarden(rad, maxv):
    for kolumn in ["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]:
        if rad[kolumn] > maxv.get(kolumn, 9999):
            st.error(f"V√§rdet f√∂r {kolumn} ({rad[kolumn]}) √∂verskrider max ({maxv[kolumn]}).")
            return False
    return True

def visa_varningar(rad):
    summa_tid = rad.get("Summa tid", 0)
    tid_kille = rad.get("Tid kille", 0)
    if summa_tid > 17:
        st.warning(f"‚ö†Ô∏è Summa tid √§r {summa_tid:.2f} timmar ‚Äì det kan vara f√∂r mycket.")
    if tid_kille < 9 or tid_kille > 15:
        st.warning(f"‚ö†Ô∏è Tid per kille √§r {tid_kille:.2f} minuter ‚Äì utanf√∂r rekommenderat intervall (9‚Äì15 min).")

def update_calculations(df):
    maxv√§rden = h√§mta_maxv√§rden(df)
    for i, rad in df.iterrows():
        dag = int(rad.get("Dag", 0))
        if dag == 0:
            continue  # hoppa √∂ver maxv√§rdesraden

        # Veckodag
        df.at[i, "Veckodag"] = veckodag_from_dag(dag)

        # K√§nner
        k√§nner = rad["Jobb"] + rad["Grannar"] + rad["Tjej PojkV"] + rad["Nils familj"]
        df.at[i, "K√§nner"] = k√§nner

        # M√§n
        m√§n = rad["Nya killar"] + k√§nner
        df.at[i, "M√§n"] = m√§n if m√§n != 0 else 1  # f√∂r att undvika div/0

        # Snitt
        snitt = rad["DeepT"] / df.at[i, "M√§n"] if df.at[i, "M√§n"] != 0 else 0
        df.at[i, "Snitt"] = snitt

        # Tid mun
        tid_mun = (snitt * rad["Sekunder"] + rad["Vila mun"]) * rad["Varv"]
        df.at[i, "Tid mun"] = tid_mun

        # Summa singel
        vila_singel = rad["Vila"] * (m√§n + rad["Fitta"] + rad["R√∂v"])
        summa_singel = rad["Tid S"] * m√§n + vila_singel
        df.at[i, "Summa singel"] = summa_singel

        # Summa dubbel
        dubbel_antal = rad["DM"] + rad["DF"] + rad["DA"]
        vila_dubbel = (rad["Vila"] + 8) * dubbel_antal
        summa_dubbel = rad["Tid D"] * dubbel_antal + vila_dubbel
        df.at[i, "Summa dubbel"] = summa_dubbel

        # Summa trippel
        trippel_antal = rad["TPP"] + rad["TAP"] + rad["TP"]
        vila_trippel = (rad["Vila"] + 15) * trippel_antal
        summa_trippel = rad["Tid T"] * trippel_antal + vila_trippel
        df.at[i, "Summa trippel"] = summa_trippel

        # Summa tid (timmar)
        total_tid = summa_singel + summa_dubbel + summa_trippel + tid_mun + (rad["√Ñlskar"] * 1800) + (rad["Sover med"] * 1800)
        df.at[i, "Summa tid"] = total_tid / 3600

        # Suger
        suger = (summa_singel + summa_dubbel + summa_trippel) * 0.6 / m√§n
        df.at[i, "Suger"] = suger / 60  # till minuter

        # Tid per kille
        tid_kille = (
            rad["Tid S"]
            + rad["Tid D"] * 2
            + rad["Tid T"] * 3
            + suger * 60
            + tid_mun
            + (1800 * rad["√Ñlskar"])
            + (1800 * rad["Sover med"])
        ) / m√§n
        df.at[i, "Tid kille"] = tid_kille / 60  # till minuter

        # H√•rdhet
        h√•rdhet = 0
        if rad["Nya killar"] > 0:
            h√•rdhet += 1
        if rad["DM"] > 0:
            h√•rdhet += 2
        if rad["DF"] > 0:
            h√•rdhet += 3
        if rad["DA"] > 0:
            h√•rdhet += 4
        if rad["TPP"] > 0:
            h√•rdhet += 5
        if rad["TAP"] > 0:
            h√•rdhet += 7
        if rad["TP"] > 0:
            h√•rdhet += 6
        df.at[i, "H√•rdhet"] = h√•rdhet

        # Filmer
        filmer = (
            m√§n
            + rad["Fitta"]
            + rad["R√∂v"]
            + rad["DM"] * 2
            + rad["DF"] * 2
            + rad["DA"] * 3
            + rad["TPP"] * 4
            + rad["TAP"] * 6
            + rad["TP"] * 5
        ) * h√•rdhet
        df.at[i, "Filmer"] = filmer

        # Pris
        pris = 39.99
        df.at[i, "Pris"] = pris

        # Int√§kter
        int√§kter = filmer * pris
        df.at[i, "Int√§kter"] = int√§kter

        # Malin l√∂n (1% av int√§kter, max 700)
        malin_l√∂n = min(int√§kter * 0.01, 700)
        df.at[i, "Malin l√∂n"] = malin_l√∂n

        # Kompisar = (Int√§kter - Malin l√∂n) / v√§nner (fr√•n Dag 0)
        v√§nner = (
            maxv√§rden.get("Jobb", 0)
            + maxv√§rden.get("Grannar", 0)
            + maxv√§rden.get("Tjej PojkV", 0)
            + maxv√§rden.get("Nils fam", 0)
        )
        kompisar = (int√§kter - malin_l√∂n) / v√§nner if v√§nner else 0
        df.at[i, "Kompisar"] = kompisar

        # Kompisars aktiev√§rde
        aktiekurs = df[df["Dag"] != 0]["Int√§kter"].iloc[-1] / 5000 if not df[df["Dag"] != 0].empty else 0
        df.at[i, "Aktiekurs"] = aktiekurs
        df.at[i, "Kompisar aktiev√§rde"] = round((5000 * aktiekurs) / v√§nner, 2) if v√§nner else 0

    return df

def statistikvy(df):
    st.subheader("üìä Statistik")

    if df.empty:
        st.info("Ingen data att visa.")
        return

    df_utan_max = df[df["Dag"] != 0].copy()

    if df_utan_max.empty:
        st.warning("Ingen giltig data (f√∂rutom Dag=0) finns √§nnu.")
        return

    totalt_filmer = df_utan_max["Filmer"].sum()
    totalt_int√§kter = df_utan_max["Int√§kter"].sum()
    totalt_malin_l√∂n = df_utan_max["Malin l√∂n"].sum()
    totalt_alskar = df_utan_max["√Ñlskar"].sum()
    totalt_sovermed = df_utan_max["Sover med"].sum()
    totalt_nyakillar = df_utan_max["Nya killar"].sum()
    totalt_k√§nner = df_utan_max["K√§nner"].sum()

    st.metric("üé¨ Totalt antal filmer", int(totalt_filmer))
    st.metric("üí∞ Totala int√§kter (USD)", f"${totalt_int√§kter:,.2f}")
    st.metric("üßç Totalt antal m√§n", int(totalt_nyakillar + totalt_k√§nner))
    st.metric("üõèÔ∏è Totalt √§lskar", int(totalt_alskar))
    st.metric("üß∏ Totalt sover med", int(totalt_sovermed))

    # Kompisars aktiev√§rde (sista kursen √ó 5000)
    if not df_utan_max.empty:
        sista_aktiekurs = df_utan_max["Aktiekurs"].iloc[-1]
        totalt_v√§nner = (
            df[df["Dag"] == 0][["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]].sum().sum()
            if not df[df["Dag"] == 0].empty else 0
        )
        totalt_kompisar_aktiev√§rde = round((5000 * sista_aktiekurs), 2)
        per_person = round(totalt_kompisar_aktiev√§rde / totalt_v√§nner, 2) if totalt_v√§nner else 0

        st.metric("üìà Kompisars aktiev√§rde (5000 aktier)", f"${totalt_kompisar_aktiev√§rde:,.2f}")
        st.metric("üë• Aktiev√§rde per kompis", f"${per_person:,.2f}")

    # Malin ROI per man
    tot_m√§n = totalt_alskar + totalt_sovermed + totalt_nyakillar + totalt_k√§nner
    roi = totalt_malin_l√∂n / tot_m√§n if tot_m√§n else 0
    st.metric("üí° Malin ROI per man", f"${roi:.2f} USD")

def h√§mta_maxv√§rden(df):
    dag_0 = df[df["Dag"] == 0]
    if dag_0.empty:
        return {"Jobb": 0, "Grannar": 0, "Tjej PojkV": 0, "Nils fam": 0}
    rad = dag_0.iloc[0]
    return {
        "Jobb": int(rad.get("Jobb", 0)),
        "Grannar": int(rad.get("Grannar", 0)),
        "Tjej PojkV": int(rad.get("Tjej PojkV", 0)),
        "Nils fam": int(rad.get("Nils fam", 0)),
    }

def update_calculations(df):
    for i, rad in df.iterrows():
        dag = int(rad["Dag"])
        if dag == 0:
            continue  # Hoppa √∂ver maxv√§rdesraden

        # V√§nner = dag 0 total
        maxrad = df[df["Dag"] == 0]
        v√§nner = (
            maxrad[["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]].sum().sum()
            if not maxrad.empty else 0
        )
        k√§nner = (
            rad.get("Jobb", 0)
            + rad.get("Grannar", 0)
            + rad.get("Tjej PojkV", 0)
            + rad.get("Nils fam", 0)
        )
        m√§n = rad.get("Nya killar", 0) + k√§nner

        # Snitt
        snitt = rad["DeepT"] / m√§n if m√§n else 0

        # Tid mun
        tid_mun = ((snitt * rad["Sekunder"]) + rad["Vila mun"]) * rad["Varv"]

        # Summa singel
        vila = rad.get("Vila", 0)
        tid_singel = rad["Tid S"]
        summa_singel = (tid_singel + vila) * (m√§n + rad["Fitta"] + rad["R√∂v"])

        # Summa dubbel
        tid_dubbel = rad["Tid D"]
        antal_dubbel = rad["DM"] + rad["DF"] + rad["DA"]
        summa_dubbel = (tid_dubbel + vila + 8) * antal_dubbel

        # Summa trippel
        tid_trippel = rad["Tid T"] if "Tid T" in rad else rad.get("Tid trippel", 0)
        antal_trippel = rad["TPP"] + rad["TAP"] + rad["TP"]
        summa_trippel = (tid_trippel + vila + 15) * antal_trippel

        # √Ñlskar och Sover med
        alskar_tid = rad["√Ñlskar"] * 1800  # 30 min
        sover_tid = rad["Sover med"] * 1800

        # Summa tid i sekunder
        total_tid = summa_singel + summa_dubbel + summa_trippel + tid_mun + alskar_tid + sover_tid
        summa_tid_h = total_tid / 3600  # i timmar

        # Suger
        suger = (summa_singel + summa_dubbel + summa_trippel) * 0.6 / m√§n if m√§n else 0

        # Tid kille
        tid_kille = (
            tid_singel + (tid_dubbel * 2) + (tid_trippel * 3) + suger + tid_mun / m√§n + alskar_tid / m√§n + sover_tid / m√§n
            if m√§n else 0
        ) / 60  # i minuter

        # H√•rdhet
        h√•rdhet = 0
        if rad["Nya killar"] > 0:
            h√•rdhet += 1
        if rad["DM"] > 0:
            h√•rdhet += 2
        if rad["DF"] > 0:
            h√•rdhet += 3
        if rad["DA"] > 0:
            h√•rdhet += 4
        if rad["TPP"] > 0:
            h√•rdhet += 5
        if rad["TAP"] > 0:
            h√•rdhet += 7
        if rad["TP"] > 0:
            h√•rdhet += 6

        # Filmer
        filmer = (
            (m√§n + rad["Fitta"] + rad["R√∂v"]
             + rad["DM"] * 2 + rad["DF"] * 2 + rad["DA"] * 3
             + rad["TPP"] * 4 + rad["TAP"] * 6 + rad["TP"] * 5)
            * h√•rdhet
        )

        pris = 39.99
        int√§kter = filmer * pris
        malin_l√∂n = min(int√§kter * 0.01, 700)

        kompisar_l√∂n = (int√§kter - malin_l√∂n) / v√§nner if v√§nner else 0

        # Aktiekurs
        aktiekurs = rad.get("Aktiekurs", 0)
        kompisar_aktiev√§rde = 5000 * aktiekurs if aktiekurs else 0

        df.at[i, "Veckodag"] = veckodag_from_dag(dag)
        df.at[i, "K√§nner"] = k√§nner
        df.at[i, "M√§n"] = m√§n
        df.at[i, "Snitt"] = snitt
        df.at[i, "Tid mun"] = tid_mun
        df.at[i, "Summa singel"] = summa_singel
        df.at[i, "Summa dubbel"] = summa_dubbel
        df.at[i, "Summa trippel"] = summa_trippel
        df.at[i, "Summa tid"] = summa_tid_h
        df.at[i, "Suger"] = suger
        df.at[i, "Tid kille"] = tid_kille
        df.at[i, "H√•rdhet"] = h√•rdhet
        df.at[i, "Filmer"] = filmer
        df.at[i, "Pris"] = pris
        df.at[i, "Int√§kter"] = int√§kter
        df.at[i, "Malin l√∂n"] = malin_l√∂n
        df.at[i, "Kompisar"] = kompisar_l√∂n
        df.at[i, "Kompisar aktiev√§rde"] = kompisar_aktiev√§rde

    return df

def statistikvy(df):
    st.subheader("üìä Statistik")

    if df.empty:
        st.info("Ingen data att analysera.")
        return

    filtrerad = df[df["Dag"] > 0].copy()

    tot_malin_l√∂n = filtrerad["Malin l√∂n"].sum()
    tot_√§lskar = filtrerad["√Ñlskar"].sum()
    tot_sover = filtrerad["Sover med"].sum()
    tot_nyakillar = filtrerad["Nya killar"].sum()
    tot_v√§nner = filtrerad["K√§nner"].sum()

    total_m√§n = tot_√§lskar + tot_sover + tot_nyakillar + tot_v√§nner
    roi_per_man = (tot_malin_l√∂n / total_m√§n) if total_m√§n > 0 else 0

    sista_kurs = filtrerad["Aktiekurs"].replace(0, pd.NA).dropna().iloc[-1] if not filtrerad["Aktiekurs"].replace(0, pd.NA).dropna().empty else 0
    kompisar = (
        sista_kurs * 5000
        if sista_kurs
        else 0
    )

    dag0 = df[df["Dag"] == 0]
    dag0_summa = dag0[["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]].sum().sum()
    per_kompis = (kompisar / dag0_summa) if dag0_summa > 0 else 0

    st.metric("üìà Total Malin l√∂n", f"{tot_malin_l√∂n:.2f} USD")
    st.metric("üîÅ ROI per man", f"{roi_per_man:.2f} USD/person")
    st.metric("üìä Kompisars aktiev√§rde", f"{kompisar:,.0f} USD")
    st.metric("üë• Aktiev√§rde per kompis", f"{per_kompis:.2f} USD")

# Avslutande anrop
def main():
    st.set_page_config(page_title="MalinData", layout="wide")
    st.title("üßæ MalinData")

    df = load_data()
    df = ensure_columns_exist(df)
    df = update_calculations(df)

    menyval = st.sidebar.radio("Navigera", ["üìÖ Huvudvy", "üìà Statistik", "‚öôÔ∏è Redigera maxv√§rden"])

    if menyval == "üìÖ Huvudvy":
        visa_huvudvy(df)
        df = knappfunktioner(df)
    elif menyval == "üìà Statistik":
        statistikvy(df)
    elif menyval == "‚öôÔ∏è Redigera maxv√§rden":
        df = formul√§r_maxv√§rden(df)

    save_data(df)

if __name__ == "__main__":
    main()
