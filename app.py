import streamlit as st
import pandas as pd
import gspread
from datetime import datetime, timedelta
from google.oauth2.service_account import Credentials
import json

# Autentisering
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
gc = gspread.service_account_from_dict(credentials)

# InstÃ¤llningar
SHEET_URL = "https://docs.google.com/spreadsheets/d/1-bpY9Ahk9qKH2QIQzVUSZLX6qDc2UwjCmullMCNvENQ/edit"
SHEET_NAME = "Blad1"
STARTKLOCKA = datetime.strptime("07:00", "%H:%M")

# FÃ¤ltnamn
FIELDS = [
    "Datum", "MÃ¤n", "Fi", "RÃ¶", "DM", "DF", "DR", "TPP", "TAP", "TPA", "Ã„lskar",
    "Sover med", "KÃ¤nner", "Jobb", "Jobb 2", "Grannar", "Grannar 2", "Tjej PojkV", "Tjej PojkV 2",
    "Nils Fam", "Nils Fam 2", "Totalt MÃ¤n", "Tid Singel", "Tid Dubbel", "Tid Trippel", "Vila",
    "Summa singel", "Summa dubbel", "Summa trippel", "Summa vila", "Summa tid", "Klockan",
    "Tid kille", "Suger", "Filmer", "Pris", "IntÃ¤kter", "Malin lÃ¶n", "FÃ¶retag lÃ¶n", "VÃ¤nner lÃ¶n",
    "HÃ¥rdhet", "Svarta"
]

# HjÃ¤lpfunktioner
def load_data():
    sh = gc.open_by_url(SHEET_URL)
    worksheet = sh.worksheet(SHEET_NAME)
    data = worksheet.get_all_records()
    df = pd.DataFrame(data)
    if df.empty:
        worksheet.append_row(FIELDS)
        df = pd.DataFrame(columns=FIELDS)
    else:
        missing_cols = [col for col in FIELDS if col not in df.columns]
        for col in missing_cols:
            df[col] = None
        df = df[FIELDS]
    return worksheet, df

def save_row(worksheet, df, row):
    row_data = [row.get(col, "") for col in FIELDS]
    worksheet.append_row(row_data)
    df.loc[len(df)] = row
    return df

def calculate_fields(row, df):
    # Datum
    row["Datum"] = row.get("Datum") or datetime.today().strftime("%Y-%m-%d")

    # KÃ¤nner
    row["KÃ¤nner"] = sum([row.get(f, 0) for f in ["Jobb", "Grannar", "Tjej PojkV", "Nils Fam"]])

    # KÃ¤nner 2
    row["Jobb 2"] = max([df["Jobb"].max() if not df.empty else 0, row["Jobb"]])
    row["Grannar 2"] = max([df["Grannar"].max() if not df.empty else 0, row["Grannar"]])
    row["Tjej PojkV 2"] = max([df["Tjej PojkV"].max() if not df.empty else 0, row["Tjej PojkV"]])
    row["Nils Fam 2"] = max([df["Nils Fam"].max() if not df.empty else 0, row["Nils Fam"]])
    row["KÃ¤nner 2"] = max([df["KÃ¤nner"].max() if not df.empty else 0, row["KÃ¤nner"]])

    # Totalt MÃ¤n
    row["Totalt MÃ¤n"] = row["MÃ¤n"] + row["KÃ¤nner"]

    # Summeringar
    row["Summa singel"] = row["Tid Singel"] * row["Totalt MÃ¤n"]
    row["Summa dubbel"] = row["Tid Dubbel"] * row["Totalt MÃ¤n"]
    row["Summa trippel"] = row["Tid Trippel"] * row["Totalt MÃ¤n"]
    vila = row["Vila"]
    row["Summa vila"] = (
        row["Totalt MÃ¤n"] * vila +
        row["DM"] * (vila + 10) +
        row["DF"] * (vila + 15) +
        row["DR"] * (vila + 15) +
        row["TPP"] * (vila + 15) +
        row["TAP"] * (vila + 15) +
        row["TPA"] * (vila + 15)
    )
    row["Summa tid"] = row["Summa singel"] + row["Summa dubbel"] + row["Summa trippel"] + row["Summa vila"]
    row["Klockan"] = (STARTKLOCKA + timedelta(seconds=row["Summa tid"])).strftime("%H:%M")

    # Tid kille
    row["Tid kille"] = round((
        row["Summa singel"] +
        row["Summa dubbel"] * 2 +
        row["Summa trippel"] * 3
    ) / row["Totalt MÃ¤n"] / 60, 1)  # i minuter

    # Suger
    row["Suger"] = round(0.6 * (
        row["Summa singel"] + row["Summa dubbel"] + row["Summa trippel"]
    ) / row["Totalt MÃ¤n"])

    # Filmer
    filmer = (
        row["MÃ¤n"] + row["Fi"] + row["RÃ¶"]*2 + row["DM"]*2 + row["DF"]*3 +
        row["DR"]*4 + row["TPP"]*5 + row["TAP"]*7 + row["TPA"]*6
    )
    row["Filmer"] = filmer
    row["Pris"] = 19.99
    row["IntÃ¤kter"] = round(row["Filmer"] * row["Pris"], 2)

    # Malin lÃ¶n
    row["Malin lÃ¶n"] = min(1500, round(0.01 * row["IntÃ¤kter"], 2))
    row["FÃ¶retag lÃ¶n"] = round(0.4 * row["IntÃ¤kter"], 2)
    row["VÃ¤nner lÃ¶n"] = round(row["IntÃ¤kter"] - row["Malin lÃ¶n"] - row["FÃ¶retag lÃ¶n"], 2)

    # HÃ¥rdhet
    hard = 0
    if row["MÃ¤n"] > 0: hard += 1
    if row["DM"] > 0: hard += 1
    if row["DF"] > 0: hard += 2
    if row["DR"] > 0: hard += 1
    if row["TPP"] > 0: hard += 4
    if row["TAP"] > 0: hard += 5
    if row["TPA"] > 0: hard += 4
    row["HÃ¥rdhet"] = hard
    return row

# Streamlit UI
def main():
    st.title("MalinApp")

    worksheet, df = load_data()

    with st.form("inmatning"):
        st.subheader("LÃ¤gg till ny rad")
        ny_rad = {}
        for f in FIELDS:
            if f == "Datum":
                ny_rad[f] = st.date_input(f, datetime.today())
            elif f in ["Tid Singel", "Tid Dubbel", "Tid Trippel", "Vila"]:
                ny_rad[f] = st.number_input(f, min_value=0, step=1)
            elif f in ["Pris"]:
                ny_rad[f] = 19.99
            elif f in ["Klockan"]:
                continue
            elif f in FIELDS[FIELDS.index("MÃ¤n"):FIELDS.index("Tid Singel")]:
                ny_rad[f] = st.number_input(f, min_value=0, step=1)
        if st.form_submit_button("Spara rad"):
            ny_rad = calculate_fields(ny_rad, df)
            df = save_row(worksheet, df, ny_rad)
            st.success("Raden sparad!")

    if not df.empty:
        st.header("ðŸ“Š Huvudvy")
        total_mÃ¤n = df["MÃ¤n"].sum()
        total_kÃ¤nner = df["KÃ¤nner"].sum()
        total_Ã¤lskar = df["Ã„lskar"].sum()
        total_malin = df["Malin lÃ¶n"].sum()
        total_vÃ¤nner = df["VÃ¤nner lÃ¶n"].sum()
        total_svarta = df["Svarta"].sum()

        st.markdown(f"- **Totalt MÃ¤n:** {total_mÃ¤n}")
        st.markdown(f"- **Malin lÃ¶n:** {total_malin:.2f} USD")
        st.markdown(f"- **VÃ¤nner lÃ¶n:** {total_vÃ¤nner:.2f} USD")
        if total_mÃ¤n > 0:
            vita = (total_mÃ¤n - total_svarta) / total_mÃ¤n * 100
            svarta = total_svarta / total_mÃ¤n * 100
            st.markdown(f"- **Vita (%):** {vita:.1f}%")
            st.markdown(f"- **Svarta (%):** {svarta:.1f}%")

        rader_med_vÃ¤rde = df[df["MÃ¤n"] + df["KÃ¤nner"] > 0]
        if not rader_med_vÃ¤rde.empty:
            snitt = (rader_med_vÃ¤rde["MÃ¤n"] + rader_med_vÃ¤rde["KÃ¤nner"]).mean()
            st.markdown(f"- **Snitt (MÃ¤n + KÃ¤nner):** {snitt:.1f}")

        # GangB och Ã„lskat
        denom = df[["Jobb 2", "Grannar 2", "Tjej PojkV 2", "Nils Fam 2"]].max().sum()
        if denom > 0:
            gangb = total_kÃ¤nner / denom
            alskat = total_Ã¤lskar / denom
            st.markdown(f"- **GangB:** {gangb:.2f}")
            st.markdown(f"- **Ã„lskat:** {alskat:.2f}")

        st.header("ðŸ“„ Enskild rad")
        val = st.selectbox("VÃ¤lj rad", df.index[::-1])
        rad = df.loc[val]
        st.markdown(f"- **Klockan:** {rad['Klockan']}")
        st.markdown(f"- **Tid kille:** {rad['Tid kille']} min")
        st.markdown(f"- **Filmer:** {rad['Filmer']}")
        st.markdown(f"- **IntÃ¤kter:** {rad['IntÃ¤kter']} USD")

if __name__ == "__main__":
    main()
