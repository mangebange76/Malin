import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, timedelta

st.set_page_config(page_title="Malin - Ber√§kning och statistik", layout="wide")

SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
gc = gspread.authorize(credentials)
sh = gc.open_by_url(SPREADSHEET_URL)

def get_or_create_worksheet(sheet, name, headers=None):
    try:
        return sheet.worksheet(name)
    except gspread.exceptions.WorksheetNotFound:
        ws = sheet.add_worksheet(title=name, rows=1000, cols=50)
        if headers:
            ws.append_row(headers)
        return ws

# Funktion f√∂r att l√§sa inst√§llningar
def l√§s_inst√§llningar():
    inst_ws = get_or_create_worksheet(sh, "Inst√§llningar", ["Inst√§llning", "V√§rde"])
    inst_data = inst_ws.get_all_records()
    inst = {
        rad["Inst√§llning"]: float(rad["V√§rde"].replace(",", "."))
        if rad["V√§rde"].replace(",", "").replace(".", "", 1).isdigit()
        else rad["V√§rde"]
        for rad in inst_data
    }
    return inst

inst = l√§s_inst√§llningar()

# Skapa n√∂dv√§ndiga blad
scener_headers = [
    "Datum", "M√§n", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
    "Enkel vaginal", "Enkel anal", "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj",
    "DT tid per man (sek)", "√Ñlskar med", "Sover med",
    "Total penetrationstid (sek)", "DT total tid (sek)", "Total tid per man (min)",
    "Int√§kt ($)", "Kvinnans l√∂n ($)", "M√§ns l√∂n ($)", "Kompisars l√∂n ($)",
    "Prenumeranter", "Ack prenumeranter", "Aktiekurs ($)"
]

get_or_create_worksheet(sh, "Scener", scener_headers)

# Inst√§llningspanel
st.sidebar.header("Inst√§llningar")

startdatum = st.sidebar.date_input("Startdatum", value=datetime.today(), format="YYYY-MM-DD")
kv_namn = st.sidebar.text_input("Kvinnans namn", value=inst.get("Namn", "Malin"))
kv_f√∂delse = st.sidebar.date_input("F√∂delsedatum", value=datetime(1984, 3, 26), format="YYYY-MM-DD")

kompisar = st.sidebar.number_input("Kompisar (totalt)", value=int(inst.get("Kompisar", 0)), min_value=0)
pv√§nner = st.sidebar.number_input("Pappans v√§nner (totalt)", value=int(inst.get("Pappans v√§nner", 0)), min_value=0)
nv√§nner = st.sidebar.number_input("Nils v√§nner (totalt)", value=int(inst.get("Nils v√§nner", 0)), min_value=0)
nfamilj = st.sidebar.number_input("Nils familj (totalt)", value=int(inst.get("Nils familj", 0)), min_value=0)
startkurs = st.sidebar.number_input("Startkurs ($)", value=float(inst.get("Startkurs", 1.00)), format="%.2f")

if st.sidebar.button("Spara inst√§llningar"):
    inst_ws = sh.worksheet("Inst√§llningar")
    inst_lista = [
        ["Startdatum", str(startdatum)],
        ["Namn", kv_namn],
        ["F√∂delsedatum", str(kv_f√∂delse)],
        ["Kompisar", kompisar],
        ["Pappans v√§nner", pv√§nner],
        ["Nils v√§nner", nv√§nner],
        ["Nils familj", nfamilj],
        ["Startkurs", round(startkurs, 2)]
    ]
    inst_ws.clear()
    inst_ws.append_row(["Inst√§llning", "V√§rde"])
    for rad in inst_lista:
        inst_ws.append_row(rad)
    st.success("Inst√§llningar sparade. Starta om appen.")
    st.rerun()

# Funktion f√∂r att h√§mta n√§sta datum
def h√§mta_n√§sta_datum():
    ws = sh.worksheet("Scener")
    data = ws.get_all_values()
    if len(data) > 1:
        sista_datum = data[-1][0]
        try:
            dt = datetime.strptime(sista_datum, "%Y-%m-%d") + timedelta(days=1)
        except:
            dt = datetime.strptime(inst.get("Startdatum"), "%Y-%m-%d")
    else:
        dt = datetime.strptime(inst.get("Startdatum"), "%Y-%m-%d")
    return dt

n√§sta_datum = h√§mta_n√§sta_datum()

def l√§s_df():
    ws = get_or_create_worksheet(sh, "Scener", [
        "Datum", "M√§n", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
        "Enkel vaginal", "Enkel anal", "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj",
        "DT per man (sek)", "√Ñlskar med", "Sover med", "Total tid (sek)", "DT total tid (sek)",
        "Total tid per man (min)", "Int√§kt", "Kvinnans l√∂n", "M√§ns l√∂n", "Kompisar l√∂n",
        "Typ", "Nils sex", "Kommentar"
    ])
    data = ws.get_all_records()
    return pd.DataFrame(data)

df = l√§s_df()
df["Datum"] = pd.to_datetime(df["Datum"], errors="coerce")
senaste_datum = df["Datum"].max() if not df.empty else pd.to_datetime(inst.get("Startdatum", "2014-03-26"))
n√§sta_datum = senaste_datum + timedelta(days=1)

# Visa kvinnans namn och nuvarande √•lder
f√∂delsedatum = pd.to_datetime(inst.get("F√∂delsedatum", "1984-03-26"), errors="coerce")
namn = inst.get("Namn", "Malin")
√•lder = (n√§sta_datum - f√∂delsedatum).days // 365 if pd.notnull(f√∂delsedatum) else "?"

st.sidebar.markdown(f"üë© **{namn}, {√•lder} √•r**")
st.sidebar.markdown(f"üé¨ N√§sta datum: {n√§sta_datum.date()}")

# Vilodagar ‚Äì inspelningsplats
st.subheader("L√§gg till vilodagar (inspelning)")

with st.form("vila_insp"):
    vilodagar = st.number_input("Antal vilodagar", min_value=1, max_value=21)
    gen_knapp = st.form_submit_button("Generera data")

if gen_knapp:
    import random
    nya_rader = []
    for i in range(vilodagar):
        datum = n√§sta_datum + timedelta(days=i)
        ny_rad = {
            "Datum": datum.strftime("%Y-%m-%d"),
            "M√§n": 0, "DP": 0, "DPP": 0, "DAP": 0, "TPA": 0, "TPP": 0, "TAP": 0,
            "Enkel vaginal": 0, "Enkel anal": 0,
            "Kompisar": random.randint(0, round(inst.get("Kompisar", 0)*0.6)),
            "Pappans v√§nner": random.randint(0, round(inst.get("Pappans v√§nner", 0)*0.6)),
            "Nils v√§nner": random.randint(0, round(inst.get("Nils v√§nner", 0)*0.6)),
            "Nils familj": random.randint(0, round(inst.get("Nils familj", 0)*0.6)),
            "DT per man (sek)": 0, "√Ñlskar med": 12, "Sover med": 1,
            "Total tid (sek)": 0, "DT total tid (sek)": 0,
            "Total tid per man (min)": 0,
            "Int√§kt": 0, "Kvinnans l√∂n": 0, "M√§ns l√∂n": 0, "Kompisar l√∂n": 0,
            "Typ": "Vila inspelning", "Nils sex": "", "Kommentar": ""
        }
        nya_rader.append(ny_rad)

    ws = sh.worksheet("Scener")
    for rad in nya_rader:
        ws.append_row(list(rad.values()))
    st.success(f"{vilodagar} vilodagar sparade")
    st.rerun()

st.subheader("‚ûï L√§gg till ny scen")

with st.form("ny_scen"):
    antal_m√§n = st.number_input("Antal m√§n", min_value=0)
    dp = st.number_input("DP", min_value=0)
    dpp = st.number_input("DPP", min_value=0)
    dap = st.number_input("DAP", min_value=0)
    tpa = st.number_input("TPA", min_value=0)
    tpp = st.number_input("TPP", min_value=0)
    tap = st.number_input("TAP", min_value=0)
    enkel_vag = st.number_input("Enkel vaginal", min_value=0)
    enkel_anal = st.number_input("Enkel anal", min_value=0)
    dt_tid = st.number_input("Deep throat per man (sek)", min_value=0)
    √§lskar_med = st.number_input("Antal '√§lskar med'", min_value=0)
    sover_med = st.number_input("Antal 'sover med'", min_value=0)
    nils_sex = st.selectbox("Nils har sex med henne?", ["Ja", "Nej", "Slumpas"])
    kompisar = st.number_input("Kompisar (antal i scen)", min_value=0, max_value=int(inst.get("Kompisar", 0)))
    pappans_v√§nner = st.number_input("Pappans v√§nner (antal)", min_value=0, max_value=int(inst.get("Pappans v√§nner", 0)))
    nils_v√§nner = st.number_input("Nils v√§nner (antal)", min_value=0, max_value=int(inst.get("Nils v√§nner", 0)))
    nils_familj = st.number_input("Nils familj (antal)", min_value=0, max_value=int(inst.get("Nils familj", 0)))
    tid_per_man_min = st.number_input("Tid varje man f√•r ‚Äì minuter", min_value=0)
    tid_per_man_sek = st.number_input("Tid varje man f√•r ‚Äì sekunder", min_value=0, max_value=59)
    submit = st.form_submit_button("Spara scen")

if submit:
    total_m√§n = antal_m√§n + kompisar + pappans_v√§nner + nils_v√§nner + nils_familj
    tid_per_man = tid_per_man_min * 60 + tid_per_man_sek
    tid_total = (total_m√§n * tid_per_man) + (max(0, total_m√§n - 1) * 15)
    dt_total = total_m√§n * dt_tid + max(0, total_m√§n - 1) * 2 + (total_m√§n // 10) * 30
    √§lskar_tid = (√§lskar_med + sover_med) * 15 * 60
    summa_tid = tid_total + dt_total + √§lskar_tid
    tid_per_man_total = summa_tid / total_m√§n / 60 if total_m√§n > 0 else 0

    # Int√§kter
    pris = 15  # prenumeration
    multiplikator = (1 * (dp + dpp + dap) + 2 * (tpa + tpp) + 3 * tap + 0.5 * (enkel_vag + enkel_anal))
    subs = int(multiplikator * total_m√§n)
    int√§kt = subs * pris
    kvinnans_l√∂n = 800
    m√§n_l√∂n = (total_m√§n - kompisar) * 200
    kompis_l√∂n = max(0, int√§kt - kvinnans_l√∂n - m√§n_l√∂n) / inst.get("Kompisar", 1)

    # Nils sex slump
    if nils_sex == "Slumpas":
        nils_sex = "Ja" if random.random() < 0.5 else "Nej"

    ny_rad = {
        "Datum": n√§sta_datum.strftime("%Y-%m-%d"),
        "M√§n": antal_m√§n, "DP": dp, "DPP": dpp, "DAP": dap, "TPA": tpa, "TPP": tpp, "TAP": tap,
        "Enkel vaginal": enkel_vag, "Enkel anal": enkel_anal,
        "Kompisar": kompisar, "Pappans v√§nner": pappans_v√§nner, "Nils v√§nner": nils_v√§nner, "Nils familj": nils_familj,
        "DT per man (sek)": dt_tid, "√Ñlskar med": √§lskar_med, "Sover med": sover_med,
        "Total tid (sek)": round(summa_tid), "DT total tid (sek)": round(dt_total),
        "Total tid per man (min)": round(tid_per_man_total, 2),
        "Int√§kt": round(int√§kt), "Kvinnans l√∂n": kvinnans_l√∂n,
        "M√§ns l√∂n": m√§n_l√∂n, "Kompisar l√∂n": round(kompis_l√∂n),
        "Typ": "Scen", "Nils sex": nils_sex, "Kommentar": ""
    }

    ws = sh.worksheet("Scener")
    ws.append_row(list(ny_rad.values()))
    st.success("Scen sparad")
    st.rerun()

st.subheader("üìä Statistik")

if df.empty:
    st.info("Ingen data √§nnu.")
else:
    df["Datum"] = pd.to_datetime(df["Datum"], errors="coerce")

    total_m√§n = df["M√§n"].sum() + df["Kompisar"].sum() + df["Pappans v√§nner"].sum() + df["Nils v√§nner"].sum() + df["Nils familj"].sum()
    total_√§lskat = df["√Ñlskar med"].sum()
    total_sovit = df[df["Typ"] != "Vila hem"].get("Sover med", pd.Series(0)).sum()

    def summera_ggr(df, kolumn):
        return df[kolumn][df[kolumn] > 0].count()

    stats = {
        "Totalt antal m√§n": total_m√§n,
        "Totalt antal scener": df[df["Typ"] == "Scen"].shape[0],
        "Totalt antal vilodagar": df[df["Typ"].str.startswith("Vila")].shape[0],
        "Totalt antal '√§lskar med'": total_√§lskat,
        "Totalt antal 'sover med' (Nils familj)": total_sovit,
        "G√•nger pappans v√§nner deltagit": summera_ggr(df, "Pappans v√§nner"),
        "G√•nger kompisar deltagit": summera_ggr(df, "Kompisar"),
        "G√•nger Nils v√§nner deltagit": summera_ggr(df, "Nils v√§nner"),
        "G√•nger Nils familj deltagit": summera_ggr(df, "Nils familj")
    }

    for k, v in stats.items():
        st.markdown(f"**{k}:** {v}")

    # Visa datatabell
    with st.expander("Visa r√•data"):
        st.dataframe(df)
