import streamlit as st
import pandas as pd
import random
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials

st.set_page_config(page_title="Malin App", layout="wide")

# Autentisering och Sheets-anslutning
scope = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_info(
    st.secrets["GOOGLE_CREDENTIALS"], scopes=scope
)
gc = gspread.authorize(credentials)

SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"
sh = gc.open_by_url(SPREADSHEET_URL)

# Initiera blad
def init_sheet(name, cols):
    try:
        sh.worksheet(name)
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title=name, rows="1000", cols="50")
        ws.update("A1", [cols])

init_sheet("Data", [
    "Datum", "Scen/Vila", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
    "Enkel vaginal", "Enkel anal",
    "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj", "√ñvriga m√§n",
    "DT tid (sek)", "√Ñlskar med", "Sover med",
    "Prenumeranter", "Prenumerationsint√§kt (USD)",
    "Kvinnans l√∂n", "M√§ns l√∂n", "Kompisars andel", "DT total tid (sek)",
    "Total tid (sek)", "Total tid (h)"
])
init_sheet("Inst√§llningar", [["Inst√§llning", "V√§rde", "Senast √§ndrad"]])
data_ws = sh.worksheet("Data")
inst_ws = sh.worksheet("Inst√§llningar")

# Spara inst√§llning i bladet
def spara_inst√§llning(nyckel, v√§rde):
    idag = datetime.now().strftime("%Y-%m-%d")
    celler = inst_ws.get_all_records()
    for ix, rad in enumerate(celler):
        if rad["Inst√§llning"] == nyckel:
            inst_ws.update_cell(ix + 2, 2, str(v√§rde))
            inst_ws.update_cell(ix + 2, 3, idag)
            return
    inst_ws.append_row([nyckel, str(v√§rde), idag])

# L√§s in inst√§llningar som dict
def l√§s_inst√§llningar():
    celler = inst_ws.get_all_records()
    inst = {}
    for rad in celler:
        key = rad["Inst√§llning"]
        val = str(rad["V√§rde"]).replace(",", ".")
        try:
            inst[key] = float(val) if val.replace(".", "", 1).isdigit() else val
        except:
            inst[key] = val
    return inst

# Konvertera datum till datetime-objekt
def str_to_date(datumstr):
    return datetime.strptime(datumstr, "%Y-%m-%d")

# H√§mta datum f√∂r senaste raden
def senaste_datum(df):
    if df.empty:
        return datetime.strptime(inst.get("Startdatum", "2014-03-26"), "%Y-%m-%d")
    return str_to_date(df["Datum"].iloc[-1])

def spara_data(df):
    worksheet = sh.worksheet("Data")
    df = df.fillna("").astype(str)
    existerande_kolumner = worksheet.row_values(1)
    n√∂dv√§ndiga_kolumner = [
        "Datum", "Typ", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
        "Enkel vaginal", "Enkel anal", "Kompisar", "Pappans v√§nner",
        "Nils v√§nner", "Nils familj", "√ñvriga m√§n", "DT tid (sek)", "√Ñlskar med",
        "Sover med", "Nils sex", "Total tid (sek)", "DT total tid (sek)",
        "Total tid (h)", "Prenumeranter", "Int√§kt (USD)", "Kvinnans l√∂n (USD)",
        "M√§ns l√∂n (USD)", "Kompisar l√∂n (USD)"
    ]

    if existerande_kolumner != n√∂dv√§ndiga_kolumner:
        worksheet.update("A1", [n√∂dv√§ndiga_kolumner])

    rows = df[n√∂dv√§ndiga_kolumner].values.tolist()
    worksheet.update("A2", rows)

def skapa_slumprad_vilodag(datum, inst, hemma=False, nils_sex=False):
    from random import randint, sample
    rad = {"Datum": datum, "Typ": "Vila hemma" if hemma else "Vila inspelning"}
    tot_kompisar = int(inst.get("Kompisar", 0))
    max_proc = 0.10 if hemma else 0.60
    max_antal = int(tot_kompisar * max_proc)
    rad["Kompisar"] = randint(0, max_antal) if max_antal > 0 else 0
    rad["Pappans v√§nner"] = randint(0, int(inst.get("Pappans v√§nner", 0) * max_proc)) if not hemma else 0
    rad["Nils v√§nner"] = randint(0, int(inst.get("Nils v√§nner", 0) * max_proc)) if not hemma else 0
    rad["Nils familj"] = randint(0, int(inst.get("Nils familj", 0) * max_proc)) if not hemma else 0
    rad["√ñvriga m√§n"] = 0
    rad["DP"] = rad["DPP"] = rad["DAP"] = rad["TPA"] = rad["TPP"] = rad["TAP"] = 0
    rad["Enkel vaginal"] = rad["Enkel anal"] = 0
    rad["DT tid (sek)"] = 0
    rad["√Ñlskar med"] = 8 if hemma else 12
    rad["Sover med"] = 0 if hemma else 1
    rad["Nils sex"] = 1 if nils_sex else 0
    return rad

def ber√§kna_tider(df, inst):
    rader = []
    for _, rad in df.iterrows():
        totalt_tid = 0
        paustid = 15  # sekunder
        dt_tid = int(rad["DT tid (sek)"])
        dt_vila = 2  # sek vila mellan varje
        dt_extra = 30 * ((int(rad["Kompisar"]) + int(rad["Pappans v√§nner"]) +
                          int(rad["Nils v√§nner"]) + int(rad["Nils familj"]) +
                          int(rad["√ñvriga m√§n"])) // 10)
        dt_total = dt_tid * (int(rad["Kompisar"]) + int(rad["Pappans v√§nner"]) +
                             int(rad["Nils v√§nner"]) + int(rad["Nils familj"]) +
                             int(rad["√ñvriga m√§n"])) + dt_vila * (
                             int(rad["Kompisar"]) + int(rad["Pappans v√§nner"]) +
                             int(rad["Nils v√§nner"]) + int(rad["Nils familj"]) +
                             int(rad["√ñvriga m√§n"])) + dt_extra

        for kategori in ["DP", "DPP", "DAP"]:
            totalt_tid += (int(rad[kategori]) * 2 * 60) + (15 if int(rad[kategori]) > 0 else 0)

        for kategori in ["TPA", "TPP", "TAP"]:
            totalt_tid += (int(rad[kategori]) * 2 * 60) + (15 if int(rad[kategori]) > 0 else 0)

        for kategori in ["Enkel vaginal", "Enkel anal"]:
            totalt_tid += (int(rad[kategori]) * 2 * 60) + (15 if int(rad[kategori]) > 0 else 0)

        tid_per_man = float(inst.get("Tid per man (minuter)", 0))
        antal_m√§n = sum([
            int(rad["Kompisar"]), int(rad["Pappans v√§nner"]),
            int(rad["Nils v√§nner"]), int(rad["Nils familj"]), int(rad["√ñvriga m√§n"])
        ])
        totalt_tid += int(tid_per_man * antal_m√§n * 60)

        √§lsk_tid = int(rad["√Ñlskar med"]) * 15 * 60
        sov_tid = int(rad["Sover med"]) * 15 * 60
        totalt_tid += √§lsk_tid + sov_tid

        rad["Total tid (sek)"] = totalt_tid
        rad["DT total tid (sek)"] = dt_total
        rad["Total tid (h)"] = round((totalt_tid + dt_total) / 3600, 2)

        rader.append(rad)
    return pd.DataFrame(rader)

def ber√§kna_prenumeranter(df):
    resultat = []
    for _, rad in df.iterrows():
        score = (
            int(rad["DP"]) * 1 +
            int(rad["DPP"]) * 2 +
            int(rad["DAP"]) * 2 +
            int(rad["TPA"]) * 4 +
            int(rad["TPP"]) * 4 +
            int(rad["TAP"]) * 5 +
            int(rad["Enkel vaginal"]) * 0.5 +
            int(rad["Enkel anal"]) * 0.5
        )
        subs = int(score * 2)
        rad["Prenumeranter"] = subs
        rad["Int√§kt (USD)"] = round(subs * 15, 2)
        rad["Kvinnans l√∂n (USD)"] = 800
        tot_m√§n = int(rad["Kompisar"]) + int(rad["Pappans v√§nner"]) + int(rad["Nils v√§nner"]) + int(rad["Nils familj"]) + int(rad["√ñvriga m√§n"])
        rad["M√§ns l√∂n (USD)"] = 200 * (tot_m√§n - int(rad["Kompisar"]))
        kompisar_totalt = int(rad["Kompisar"])
        kvar = rad["Int√§kt (USD)"] - rad["Kvinnans l√∂n (USD)"] - rad["M√§ns l√∂n (USD)"]
        rad["Kompisar l√∂n (USD)"] = round(kvar / kompisar_totalt, 2) if kompisar_totalt > 0 else 0
        resultat.append(rad)
    return pd.DataFrame(resultat)

def uppdatera_statistik(df, inst):
    st.subheader("üìä Statistik")
    totalt_antal = 0
    totalt_rader = len(df)
    totala_m√§n = 0
    for _, rad in df.iterrows():
        totala_m√§n += sum([
            int(rad["Kompisar"]), int(rad["Pappans v√§nner"]),
            int(rad["Nils v√§nner"]), int(rad["Nils familj"]), int(rad["√ñvriga m√§n"])
        ])
    st.write(f"Totalt antal rader (scener/vilodagar): {totalt_rader}")
    st.write(f"Totalt antal m√§n (inkl alla grupper): {totala_m√§n}")
    st.write(f"Snitt per rad: {round(totala_m√§n / totalt_rader, 2)}")

    for grupp in ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]:
        totalt = df[grupp].astype(int).sum()
        inst_total = int(inst.get(grupp, 1))
        snitt = round(totalt / inst_total, 2) if inst_total else 0
        st.write(f"{grupp}: totalt {totalt} / {inst_total} ‚Üí snitt per person: {snitt}")

    # √Ñlskar med
    √§lskar_sum = df["√Ñlskar med"].astype(int).sum()
    total_personer = sum([int(inst.get(grupp, 0)) for grupp in ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]])
    √§lskar_snitt = round(√§lskar_sum / total_personer, 2) if total_personer else 0
    st.write(f"Antal g√•nger √§lskat: {√§lskar_sum} ‚Üí snitt per person: {√§lskar_snitt}")

    # Sover med
    sover_sum = df["Sover med"].astype(int).sum()
    familj_total = int(inst.get("Nils familj", 1))
    sover_snitt = round(sover_sum / familj_total, 2) if familj_total else 0
    st.write(f"Antal g√•nger sovit med: {sover_sum} ‚Üí snitt per familjemedlem: {sover_snitt}")

    # Kvinnans √•lder
    namn = inst.get("Kvinnans namn", "N/A")
    f√∂dd = inst.get("Kvinnans f√∂delsedatum", "1900-01-01")
    try:
        senaste_datum = pd.to_datetime(df["Datum"].iloc[-1])
        f√∂delsedatum = pd.to_datetime(f√∂dd)
        √•lder = (senaste_datum - f√∂delsedatum).days // 365
        st.write(f"{namn} √§r {√•lder} √•r gammal vid senaste scenen.")
    except:
        st.warning("Kunde inte ber√§kna √•lder.")

    # Sammanfattning int√§kter
    total_int√§kt = df["Int√§kt (USD)"].astype(float).sum()
    total_kvinna = df["Kvinnans l√∂n (USD)"].astype(float).sum()
    total_m√§n = df["M√§ns l√∂n (USD)"].astype(float).sum()
    total_kompisar = df["Kompisar l√∂n (USD)"].astype(float).sum()
    st.write(f"Total int√§kt: {total_int√§kt} USD")
    st.write(f"Kvinnans l√∂n totalt: {total_kvinna} USD")
    st.write(f"M√§ns l√∂n totalt: {total_m√§n} USD")
    st.write(f"Kompisar l√∂n totalt: {total_kompisar} USD")

def huvudvy(df, inst):
    st.subheader("üìÖ Skapa ny scen eller vila")
    med_scen = st.radio("Vad vill du l√§gga till?", ["Ny scen", "Vila p√• inspelningsplats", "Vilovecka hemma"])

    if med_scen == "Ny scen":
        antal = st.number_input("Antal √∂vriga m√§n", 0, 999, step=1)
        dp = st.number_input("DP", 0, 999)
        dpp = st.number_input("DPP", 0, 999)
        dap = st.number_input("DAP", 0, 999)
        tpa = st.number_input("TPA", 0, 999)
        tpp = st.number_input("TPP", 0, 999)
        tap = st.number_input("TAP", 0, 999)
        enkel_v = st.number_input("Enkel vaginal", 0, 999)
        enkel_a = st.number_input("Enkel anal", 0, 999)

        grupper = {}
        for grupp in ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]:
            max_val = int(inst.get(grupp, 0))
            grupper[grupp] = st.number_input(f"{grupp} (max {max_val})", 0, max_val)

        dt_tid = st.number_input("Deep throat per man (sek)", 0, 600, value=10)
        √§lskar = st.number_input("Antal √§lskar med", 0, 50, value=12)
        sover = st.number_input("Antal sover med", 0, 20, value=1)

        if st.button("L√§gg till scen"):
            ny_rad = {
                "Datum": n√§sta_datum(df, 1),
                "Typ": "Scen",
                "DP": dp, "DPP": dpp, "DAP": dap, "TPA": tpa, "TPP": tpp, "TAP": tap,
                "Enkel vaginal": enkel_v, "Enkel anal": enkel_a,
                "Kompisar": grupper["Kompisar"],
                "Pappans v√§nner": grupper["Pappans v√§nner"],
                "Nils v√§nner": grupper["Nils v√§nner"],
                "Nils familj": grupper["Nils familj"],
                "√ñvriga m√§n": antal,
                "DT tid per man (sek)": dt_tid,
                "√Ñlskar med": √§lskar,
                "Sover med": sover,
                "Nils sex": 0
            }
            df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
            spara_data(df)
            st.rerun()

    elif med_scen == "Vila p√• inspelningsplats":
        dagar = st.number_input("Antal vilodagar", 1, 30, value=2)
        maxprocent = 0.6
        for _ in range(dagar):
            ny_rad = generera_vilarad(df, inst, plats="inspelningsplats", max_procent=maxprocent)
            df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
        spara_data(df)
        st.rerun()

    elif med_scen == "Vilovecka hemma":
        # Max tv√• g√•nger sex med Nils
        antal_nils = random.sample(range(7), min(2, 7))
        for dag in range(7):
            ny_rad = generera_vilarad(df, inst, plats="hemma", max_procent=0.1)
            ny_rad["Datum"] = n√§sta_datum(df, 1)
            ny_rad["√Ñlskar med"] *= 7
            ny_rad["Sover med"] = 0
            ny_rad["Nils sex"] = 1 if dag in antal_nils else 0
            df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
        spara_data(df)
        st.rerun()

def main():
    df = ladda_data()
    inst = l√§s_inst√§llningar()
    df = s√§kerst√§ll_kolumner(df)
    df = uppdatera_tid_och_int√§kt(df, inst)
    huvudvy(df, inst)
    uppdatera_statistik(df, inst)

if __name__ == "__main__":
    main()
