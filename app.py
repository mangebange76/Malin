import streamlit as st
import pandas as pd
import numpy as np
import datetime
import gspread
from gspread_dataframe import get_as_dataframe, set_with_dataframe
from google.oauth2 import service_account
import toml

# L√§s in secrets
with open("secrets.toml", "r") as f:
    secrets = toml.load(f)

SHEET_URL = secrets["SHEET_URL"]
GOOGLE_CREDENTIALS = secrets["GOOGLE_CREDENTIALS"]
SPREADSHEET_ID = SHEET_URL.split("/d/")[1].split("/")[0]

ALL_COLUMNS = [
    "Dag", "Veckodag", "Nya killar", "Fitta", "R√∂v", "DM", "DF", "DA", "TPP", "TAP", "TP",
    "√Ñlskar", "Sover med", "Tid S", "Tid D", "Tid T", "Vila", "Jobb", "Grannar", "Tjej PojkV", "Nils familj",
    "Svarta", "DeepT", "Sekunder", "Vila mun", "Varv",
    "K√§nner", "M√§n", "Summa singel", "Summa dubbel", "Summa trippel", "Snitt", "Tid mun",
    "Summa tid", "Suger", "Tid kille", "H√•rdhet", "Filmer", "Pris", "Int√§kter", "Malin l√∂n",
    "Kompisar", "Aktiekurs", "Kompisars aktiev√§rde"
]

MANUAL_COLUMNS = [
    "Nya killar", "Fitta", "R√∂v", "DM", "DF", "DA", "TPP", "TAP", "TP",
    "√Ñlskar", "Sover med", "Tid S", "Tid D", "Tid T", "Vila",
    "Jobb", "Grannar", "Tjej PojkV", "Nils familj",
    "Svarta", "DeepT", "Sekunder", "Vila mun", "Varv"
]

# Autentisering och Google Sheets-koppling
def autentisera_google():
    credentials = service_account.Credentials.from_service_account_info(GOOGLE_CREDENTIALS)
    client = gspread.authorize(credentials)
    sheet = client.open_by_key(SPREADSHEET_ID)
    worksheet = sheet.worksheet("Blad1")
    return worksheet

# Ladda data
def load_data():
    worksheet = autentisera_google()
    df = get_as_dataframe(worksheet, evaluate_formulas=True).fillna(0)
    df = df[[col for col in ALL_COLUMNS if col in df.columns]]
    return df

# Spara data
def save_data(df):
    worksheet = autentisera_google()
    worksheet.clear()
    set_with_dataframe(worksheet, df)

def veckodag(dagnummer):
    dagar = ["L√∂rdag", "S√∂ndag", "M√•ndag", "Tisdag", "Onsdag", "Torsdag", "Fredag"]
    return dagar[(dagnummer - 1) % 7]

def hamta_maxvarden(df):
    dag0 = df[df["Dag"] == 0]
    if dag0.empty:
        return None
    return dag0.iloc[0][["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]].astype(float)

def validera_maxvarden(rad, maxvarden):
    for kolumn in maxvarden.index:
        if rad[kolumn] > maxvarden[kolumn]:
            return False, f"‚ùå {kolumn} √∂verskrider maxv√§rdet ({rad[kolumn]} > {maxvarden[kolumn]})"
    return True, ""

def update_calculations(df):
    if df.empty:
        return df

    df["K√§nner"] = df[["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]].sum(axis=1)
    df["M√§n"] = df["Nya killar"] + df["K√§nner"]
    df["Summa singel"] = df["Tid S"] * (df["M√§n"] + df["Fitta"] + df["R√∂v"]) + df["Vila"] * (df["M√§n"] + df["Fitta"] + df["R√∂v"])
    df["Summa dubbel"] = (df["Tid D"] + df["Vila"] + 8) * (df["DM"] + df["DF"] + df["DA"])
    df["Summa trippel"] = (df["Tid T"] + df["Vila"] + 15) * (df["TPP"] + df["TAP"] + df["TP"])
    df["Snitt"] = df["DeepT"] / df["M√§n"].replace(0, np.nan)
    df["Tid mun"] = (df["Snitt"] * df["Sekunder"] + df["Vila mun"]) * df["Varv"]
    df["Summa tid"] = (df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"] + df["Tid mun"] + df["√Ñlskar"] * 1800 + df["Sover med"] * 1800) / 3600
    df["Suger"] = 0.6 * (df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"]) / df["M√§n"].replace(0, np.nan) / 60
    df["Tid kille"] = (df["Tid S"] + df["Tid D"] * 2 + df["Tid T"] * 3 + df["Suger"] * 60 + df["Tid mun"] + df["Sover med"] * 1800 + df["√Ñlskar"] * 1800) / 60
    df["H√•rdhet"] = (df["Nya killar"] > 0).astype(int) + (df["DM"] > 0).astype(int)*2 + (df["DF"] > 0).astype(int)*3 + \
                    (df["DA"] > 0).astype(int)*4 + (df["TPP"] > 0).astype(int)*5 + (df["TAP"] > 0).astype(int)*7 + (df["TP"] > 0).astype(int)*6
    df["Filmer"] = (df["M√§n"] + df["Fitta"] + df["R√∂v"] + df["DM"]*2 + df["DF"]*2 + df["DA"]*3 + df["TPP"]*4 + df["TAP"]*6 + df["TP"]*5) * df["H√•rdhet"]
    df["Pris"] = 39.99
    df["Int√§kter"] = df["Filmer"] * df["Pris"]
    df["Malin l√∂n"] = df["Int√§kter"] * 0.01
    df["Malin l√∂n"] = df["Malin l√∂n"].apply(lambda x: min(x, 700))
    dag0 = df[df["Dag"] == 0]
    if not dag0.empty:
        vanner = dag0[["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]].sum(axis=1).iloc[0]
        df["Kompisar"] = (df["Int√§kter"] - df["Malin l√∂n"]) / vanner if vanner > 0 else 0
        df["Aktiekurs"] = df["Int√§kter"].ffill().fillna(0)
        df["Kompisars aktiev√§rde"] = round((5000 * df["Aktiekurs"]) / vanner, 2) if vanner > 0 else 0
    else:
        df["Kompisar"] = 0
        df["Aktiekurs"] = 0
        df["Kompisars aktiev√§rde"] = 0
    df["Veckodag"] = df["Dag"].apply(lambda x: veckodag(x) if x > 0 else "")
    return df

def formul√§r_maxv√§rden(df):
    st.header("‚öôÔ∏è Ange maxv√§rden (Dag = 0)")
    dag0 = df[df["Dag"] == 0]
    f√∂rsta_g√•ngen = dag0.empty

    jobb = st.number_input("Max Jobb", value=float(dag0["Jobb"].iloc[0]) if not f√∂rsta_g√•ngen else 0, step=1.0)
    grannar = st.number_input("Max Grannar", value=float(dag0["Grannar"].iloc[0]) if not f√∂rsta_g√•ngen else 0, step=1.0)
    tjej = st.number_input("Max Tjej PojkV", value=float(dag0["Tjej PojkV"].iloc[0]) if not f√∂rsta_g√•ngen else 0, step=1.0)
    nils = st.number_input("Max Nils familj", value=float(dag0["Nils familj"].iloc[0]) if not f√∂rsta_g√•ngen else 0, step=1.0)

    if st.button("üíæ Spara maxv√§rden"):
        ny_rad = {col: 0 for col in ALL_COLUMNS}
        ny_rad["Dag"] = 0
        ny_rad["Jobb"] = jobb
        ny_rad["Grannar"] = grannar
        ny_rad["Tjej PojkV"] = tjej
        ny_rad["Nils familj"] = nils
        df = df[df["Dag"] != 0]  # ta bort tidigare rad Dag = 0 om den finns
        df = pd.concat([pd.DataFrame([ny_rad]), df], ignore_index=True)
        df = update_calculations(df)
        save_data(df)
        st.success("Maxv√§rden har sparats.")
        st.experimental_rerun()

    return df

def maxvarden_saknas(df):
    return df[df["Dag"] == 0].empty

def ny_rad_manuellt(df):
    st.header("‚ûï L√§gg till ny rad manuellt")

    maxrad = df[df["Dag"] == 0]
    if maxrad.empty:
        st.warning("‚ö†Ô∏è Du m√•ste f√∂rst ange maxv√§rden (Dag = 0).")
        return df

    maxv = maxrad[["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]].iloc[0]

    st.markdown("**Aktuella maxv√§rden (Dag = 0):**")
    st.write(maxv)

    ny_rad = {col: 0 for col in ALL_COLUMNS if col != "Dag"}
    dag = int(df["Dag"].max()) + 1 if not df.empty else 1

    with st.form("manuell_ny_rad"):
        for kolumn in ny_rad:
            if kolumn not in BER√ÑKNADE_KOLUMNER:
                ny_rad[kolumn] = st.number_input(
                    kolumn,
                    value=0.0,
                    step=1.0,
                    key=f"manuell_{kolumn}"
                )
        submitted = st.form_submit_button("üíæ Spara rad")
        if submitted:
            ny_rad["Dag"] = dag
            ny_rad_df = pd.DataFrame([ny_rad])
            ny_rad_df = update_calculations(ny_rad_df)

            ok, fel = validera_maxvarden(ny_rad_df.iloc[0], maxv)
            if not ok:
                st.error(fel)
                return df

            df = pd.concat([df, ny_rad_df], ignore_index=True)
            save_data(df)
            st.success(f"Ny rad med Dag {dag} har sparats.")
            st.experimental_rerun()

    return df

def visa_redigeringsformul√§r(ny_rad, dag, label="üìù Redigera innan spara"):
    st.subheader(label)
    with st.form(f"form_{dag}"):
        for kolumn in MANUAL_COLUMNS:
            ny_rad[kolumn] = st.number_input(
                kolumn,
                value=float(ny_rad.get(kolumn, 0)),
                step=1.0,
                key=f"{kolumn}_{dag}"
            )
        submitted = st.form_submit_button("üíæ Spara redigerad rad")
        if submitted:
            ny_rad["Dag"] = dag
            ny_rad_df = pd.DataFrame([ny_rad])
            ny_rad_df = update_calculations(ny_rad_df)
            maxrad = df[df["Dag"] == 0]
            if not maxrad.empty:
                ok, fel = validera_maxvarden(ny_rad_df.iloc[0], maxrad.iloc[0])
                if not ok:
                    st.error(fel)
                    return None
            return ny_rad_df.iloc[0]
    return None

def slumpa_film(df, variant="liten"):
    import random
    dag = int(df["Dag"].max()) + 1
    ny_rad = {col: 0 for col in ALL_COLUMNS}

    # Exempel p√• slumpintervall (anpassa om du vill)
    if variant == "liten":
        ny_rad["Nya killar"] = random.randint(0, 2)
        ny_rad["√Ñlskar"] = 1
    else:
        ny_rad["Nya killar"] = random.randint(1, 5)
        ny_rad["√Ñlskar"] = 3

    ny_rad["Sover med"] = 1
    ny_rad["Vila"] = 7
    ny_rad["Varv"] = 1
    ny_rad["DeepT"] = 10
    ny_rad["Sekunder"] = 30
    ny_rad["Vila mun"] = 5

    redigerad_rad = visa_redigeringsformul√§r(ny_rad, dag)
    if redigerad_rad is not None:
        df = pd.concat([df, pd.DataFrame([redigerad_rad])], ignore_index=True)
        save_data(df)
        st.success("Slumpad rad sparad.")
        st.experimental_rerun()
    return df

def kopiera_st√∂rsta_raden(df):
    st.subheader("üìã Kopiera rad med flest m√§n")
    dag = int(df["Dag"].max()) + 1
    df_temp = df[df["Dag"] > 0]
    if df_temp.empty:
        st.info("Ingen rad att kopiera fr√•n.")
        return df
    maxrad = df_temp.sort_values("M√§n", ascending=False).iloc[0].copy()
    maxrad["Dag"] = dag
    redigerad = visa_redigeringsformul√§r(maxrad, dag, "üìù Redigera kopierad rad")
    if redigerad is not None:
        df = pd.concat([df, pd.DataFrame([redigerad])], ignore_index=True)
        save_data(df)
        st.success("Rad kopierad och sparad.")
        st.experimental_rerun()
    return df

def update_calculations(df):
    df = df.copy()

    df["K√§nner"] = df["Jobb"] + df["Grannar"] + df["Tjej PojkV"] + df["Nils familj"]
    df["M√§n"] = df["Nya killar"] + df["K√§nner"]

    df["Summa singel"] = (df["Tid S"] + df["Vila"]) * (df["M√§n"] + df["Fitta"] + df["R√∂v"])
    df["Summa dubbel"] = (df["Tid D"] + df["Vila"] + 8) * (df["DM"] + df["DF"] + df["DA"])
    df["Summa trippel"] = (df["Tid T"] + df["Vila"] + 15) * (df["TPP"] + df["TAP"] + df["TP"])

    df["Snitt"] = df.apply(lambda x: x["DeepT"] / x["M√§n"] if x["M√§n"] > 0 else 0, axis=1)
    df["Tid mun"] = (df["Snitt"] * df["Sekunder"] + df["Vila mun"]) * df["Varv"]

    df["Sover tid"] = df["Sover med"] * 1800
    df["√Ñlskar tid"] = df["√Ñlskar"] * 1800

    df["Summa tid"] = (
        df["Summa singel"] +
        df["Summa dubbel"] +
        df["Summa trippel"] +
        df["Tid mun"] +
        df["Suger"] +
        df["Tid kille"] +
        df["Sover tid"] +
        df["√Ñlskar tid"]
    ) / 3600  # till timmar

    df["H√•rdhet"] = (
        (df["Nya killar"] > 0).astype(int) * 1 +
        (df["DM"] > 0).astype(int) * 2 +
        (df["DF"] > 0).astype(int) * 3 +
        (df["DA"] > 0).astype(int) * 4 +
        (df["TPP"] > 0).astype(int) * 5 +
        (df["TAP"] > 0).astype(int) * 7 +
        (df["TP"] > 0).astype(int) * 6
    )

    df["Filmer"] = (
        (df["M√§n"] + df["Fitta"] + df["R√∂v"] +
         df["DM"] * 2 + df["DF"] * 2 + df["DA"] * 3 +
         df["TPP"] * 4 + df["TAP"] * 6 + df["TP"] * 5) * df["H√•rdhet"]
    )

    df["Pris"] = 39.99
    df["Int√§kter"] = df["Filmer"] * df["Pris"]

    df["Malin l√∂n"] = df["Int√§kter"] * 0.01
    df["Malin l√∂n"] = df["Malin l√∂n"].apply(lambda x: min(x, 700))

    dag0 = df[df["Dag"] == 0]
    if not dag0.empty:
        v√§nner = dag0[["Jobb", "Grannar", "Tjej PojkV", "Nils familj"]].sum().sum()
        df["Kompisar"] = v√§nner
        df["Kompisar"] = df["Kompisar"].replace(0, 1)
        df["Kompisar aktiev√§rde"] = (5000 * df["Aktiekurs"]) / df["Kompisar"]
        df["Kompisar aktiev√§rde"] = df["Kompisar aktiev√§rde"].round(2)
    else:
        df["Kompisar"] = 0
        df["Kompisar aktiev√§rde"] = 0

    return df

def main():
    st.title("üìä MalinData ‚Äì Daglig logg och statistik")

    df = load_data()
    df = update_calculations(df)

    menyval = st.sidebar.selectbox("Meny", [
        "üìå Maxv√§rden (Dag = 0)",
        "‚ûï L√§gg till ny rad manuellt",
        "üé≤ Slumpa film liten",
        "üé≤ Slumpa film stor",
        "üò¥ Vila hemma",
        "üè¢ Vila jobb",
        "üõå Vila helt",
        "üìã Kopiera st√∂rsta raden",
        "üìà Statistik",
        "üßæ Visa data"
    ])

    if menyval == "üìå Maxv√§rden (Dag = 0)":
        df = formul√§r_maxv√§rden(df)
    elif menyval == "‚ûï L√§gg till ny rad manuellt":
        df = ny_rad_manuellt(df)
    elif menyval == "üé≤ Slumpa film liten":
        df = slumpa_film(df, "liten")
    elif menyval == "üé≤ Slumpa film stor":
        df = slumpa_film(df, "stor")
    elif menyval == "üò¥ Vila hemma":
        df = vila_knapp(df, variant="hemma")
    elif menyval == "üè¢ Vila jobb":
        df = vila_knapp(df, variant="jobb")
    elif menyval == "üõå Vila helt":
        df = vila_knapp(df, variant="helt")
    elif menyval == "üìã Kopiera st√∂rsta raden":
        df = kopiera_st√∂rsta_raden(df)
    elif menyval == "üìà Statistik":
        statistikvy(df)
    elif menyval == "üßæ Visa data":
        st.dataframe(df)

if __name__ == "__main__":
    main()
