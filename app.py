import streamlit as st
import pandas as pd
import numpy as np
import toml
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread_dataframe import get_as_dataframe, set_with_dataframe
import datetime

st.set_page_config(page_title="Malin Data", layout="wide")

ALL_COLUMNS = [
    "Dag", "Jobb", "Grannar", "Tjej PojkV", "Nils fam", "Nya killar", "√Ñlskar", "Sover med", "Vila", "√Ñlsk tid",
    "Fitta", "R√∂v", "DM", "DF", "DA", "TPP", "TAP", "TP", "Tid singel", "Tid dubbel", "Tid trippel",
    "DeepT", "Sekunder", "Vila mun", "Varv", "Tid mun",
    "Svarta", "Int√§kter", "Malin l√∂n", "Kompisar l√∂n",
    "Tid kille dt", "Tid kille", "Summa tid", "Filmer", "H√•rdhet", "Snitt film",
    "Summa singel", "Summa dubbel", "Summa trippel", "Suger"
]

def las_in_data():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(
        st.secrets["GOOGLE_CREDENTIALS"], scope
    )
    client = gspread.authorize(credentials)
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.get_worksheet(0)
    df = get_as_dataframe(worksheet, evaluate_formulas=True)
    df = df.dropna(how="all")  # Ta bort tomma rader
    return df, worksheet

def spara_df(df, worksheet):
    worksheet.clear()
    set_with_dataframe(worksheet, df)

def ensure_columns_exist(df, worksheet):
    existing_cols = df.columns.tolist()
    missing_cols = [col for col in ALL_COLUMNS if col not in existing_cols]
    for col in missing_cols:
        df[col] = np.nan
    df = df[ALL_COLUMNS]
    spara_df(df, worksheet)
    return df

def hamta_maxvarden(df):
    maxrad = df[df["Dag"] == 0]
    if maxrad.empty:
        return {"Jobb": 0, "Grannar": 0, "Tjej PojkV": 0, "Nils fam": 0}
    return {
        "Jobb": int(maxrad["Jobb"].values[0]),
        "Grannar": int(maxrad["Grannar"].values[0]),
        "Tjej PojkV": int(maxrad["Tjej PojkV"].values[0]),
        "Nils fam": int(maxrad["Nils fam"].values[0]),
    }

def validera_maxvarden(rad, maxvarden):
    for f√§lt in ["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]:
        if pd.notna(rad.get(f√§lt)) and int(rad[f√§lt]) > int(maxvarden.get(f√§lt, 0)):
            return False, f"{f√§lt} √∂verskrider maxv√§rdet ({rad[f√§lt]} > {maxvarden.get(f√§lt, 0)})"
    return True, ""

def formul√§r_maxv√§rden(df, worksheet):
    st.subheader("1Ô∏è‚É£ Ange maxv√§rden (Dag = 0)")
    with st.form("maxv√§rden_form"):
        jobb = st.number_input("Max Jobb", min_value=0, value=int(df[df["Dag"] == 0]["Jobb"].iloc[0]) if (df["Dag"] == 0).any() else 0)
        grannar = st.number_input("Max Grannar", min_value=0, value=int(df[df["Dag"] == 0]["Grannar"].iloc[0]) if (df["Dag"] == 0).any() else 0)
        tjej = st.number_input("Max Tjej PojkV", min_value=0, value=int(df[df["Dag"] == 0]["Tjej PojkV"].iloc[0]) if (df["Dag"] == 0).any() else 0)
        nils = st.number_input("Max Nils fam", min_value=0, value=int(df[df["Dag"] == 0]["Nils fam"].iloc[0]) if (df["Dag"] == 0).any() else 0)
        submitted = st.form_submit_button("üíæ Spara maxv√§rden")
        if submitted:
            ny_rad = {
                "Dag": 0,
                "Jobb": jobb,
                "Grannar": grannar,
                "Tjej PojkV": tjej,
                "Nils fam": nils
            }
            df = df[df["Dag"] != 0]  # Ta bort tidigare maxrad
            df = pd.concat([pd.DataFrame([ny_rad]), df], ignore_index=True)
            df = df[ALL_COLUMNS]
            spara_df(df, worksheet)
            st.success("Maxv√§rden sparade!")
            st.experimental_rerun()

def ny_rad_manuellt(df, worksheet, maxvarden):
    st.subheader("2Ô∏è‚É£ L√§gg till ny rad manuellt")
    with st.form("manuell_inmatning"):
        dag = st.number_input("Dag", min_value=1, step=1)
        rad = {"Dag": dag}
        for f√§lt in ["Jobb", "Grannar", "Tjej PojkV", "Nils fam", "Nya killar", "√Ñlskar", "Sover med", "Vila", "√Ñlsk tid",
                     "Fitta", "R√∂v", "DM", "DF", "DA", "TPP", "TAP", "TP", "Tid singel", "Tid dubbel", "Tid trippel",
                     "DeepT", "Sekunder", "Vila mun", "Varv", "Svarta"]:
            rad[f√§lt] = st.number_input(f√§lt, value=0, step=1, key=f"{f√§lt}_manuell")
        sparaknapp = st.form_submit_button("üì• Spara rad")
        if sparaknapp:
            ok, felmeddelande = validera_maxvarden(rad, maxvarden)
            if not ok:
                st.error(felmeddelande)
            else:
                df = pd.concat([df, pd.DataFrame([rad])], ignore_index=True)
                df = update_calculations(df)
                spara_df(df, worksheet)
                st.success("Rad sparad!")
                kontrollera_varningar(rad)
                st.experimental_rerun()

def validera_maxvarden(rad, maxvarden):
    for f√§lt in ["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]:
        if rad[f√§lt] > maxvarden.get(f√§lt, 0):
            return False, f"{f√§lt} f√•r inte √∂verstiga maxv√§rdet ({maxvarden.get(f√§lt, 0)})."
    return True, ""

def kontrollera_varningar(rad):
    timmar = rad.get("Summa tid", 0)
    tid_kille = rad.get("Tid kille", 0)
    if timmar > 17:
        st.warning("‚ö†Ô∏è Summa tid √∂verstiger 17 timmar")
    if tid_kille < 9 or tid_kille > 15:
        st.warning("‚ö†Ô∏è Tid kille √§r utanf√∂r normalintervall (9‚Äì15 minuter)")

def update_calculations(df):
    df.fillna(0, inplace=True)

    # H√§mta maxrad (Dag = 0)
    if (df["Dag"] == 0).any():
        maxrad = df[df["Dag"] == 0].iloc[0]
        v√§nner = maxrad[["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]].sum()
    else:
        v√§nner = 0

    df["M√§n"] = df["Nya killar"] + v√§nner
    df["Snitt"] = df["DeepT"] / df["M√§n"].replace(0, np.nan)
    df["Tid mun"] = ((df["Snitt"] * df["Sekunder"]).fillna(0) + df["Vila mun"]) * df["Varv"]

    df["Summa singel"] = (df["Tid singel"] + df["Vila"]) * (df["M√§n"] + df["Fitta"] + df["R√∂v"])
    df["Summa dubbel"] = (df["Tid dubbel"] + df["Vila"] + 8) * (df["DM"] + df["DF"] + df["DA"])
    df["Summa trippel"] = (df["Tid trippel"] + df["Vila"] + 15) * (df["TPP"] + df["TAP"] + df["TP"])

    df["Suger"] = ((df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"]) * 0.6) / df["M√§n"].replace(0, np.nan)
    df["Tid kille dt"] = (df["Snitt"] * df["Sekunder"] * df["Varv"]).replace(0, np.nan)
    df["Tid kille"] = (
        df["Tid singel"] +
        df["Tid dubbel"] * 2 +
        df["Tid trippel"] * 3 +
        df["Suger"] +
        df["Tid kille dt"] +
        df["Tid mun"]
    ) / 60  # minuter

    df["Filmer"] = (
        df["M√§n"] + df["Fitta"] + df["R√∂v"] +
        df["DM"] * 2 + df["DF"] * 2 +
        df["DA"] * 3 + df["TPP"] * 4 +
        df["TAP"] * 6 + df["TP"] * 5
    ) * df[["Nya killar", "DM", "DF", "DA", "TPP", "TAP", "TP"]].apply(
        lambda row: (row > 0).sum(), axis=1).clip(lower=1)

    df["Int√§kter"] = df["Filmer"] * 39.99
    df["Malin l√∂n"] = np.minimum(df["Int√§kter"] * 0.01, 700)

    df["Summa tid"] = (
        df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"] +
        df["Tid mun"] + df["√Ñlskar"] * 1800 + df["Sover med"] * 1800
    ) / 3600  # timmar

    return df

def slumpa_v√§rden(variant, maxrad):
    import random

    def slumpa_inom(minval, maxval):
        return random.randint(minval, maxval) if maxval > 0 else 0

    rad = {"Dag": 1}
    f√§lt = ["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]
    for f in f√§lt:
        rad[f] = slumpa_inom(0, maxrad.get(f, 0))

    if variant == "liten":
        rad.update({
            "Nya killar": 1,
            "Fitta": 0,
            "R√∂v": 0,
            "DM": 0,
            "DF": 0,
            "DA": 0,
            "TPP": 0,
            "TAP": 0,
            "TP": 0,
            "Tid singel": 300,
            "Tid dubbel": 0,
            "Tid trippel": 0,
            "Vila": 300,
            "√Ñlskar": 1,
            "Sover med": 0,
            "DeepT": 30,
            "Sekunder": 15,
            "Vila mun": 10,
            "Varv": 1,
            "Svarta": 0,
        })
    elif variant == "stor":
        rad.update({
            "Nya killar": 3,
            "Fitta": 2,
            "R√∂v": 2,
            "DM": 2,
            "DF": 1,
            "DA": 1,
            "TPP": 1,
            "TAP": 1,
            "TP": 1,
            "Tid singel": 600,
            "Tid dubbel": 400,
            "Tid trippel": 300,
            "Vila": 600,
            "√Ñlskar": 3,
            "Sover med": 2,
            "DeepT": 90,
            "Sekunder": 25,
            "Vila mun": 30,
            "Varv": 2,
            "Svarta": 0,
        })
    return rad


def skapa_vilorad(typ, maxrad):
    rad = {"Dag": 1}
    for f in ["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]:
        if typ == "jobb":
            rad[f] = int(maxrad.get(f, 0) * 0.3)
        elif typ == "hemma":
            rad[f] = 0
        elif typ == "helt":
            rad[f] = 0

    rad.update({
        "Nya killar": 0,
        "Fitta": 0,
        "R√∂v": 0,
        "DM": 0,
        "DF": 0,
        "DA": 0,
        "TPP": 0,
        "TAP": 0,
        "TP": 0,
        "Tid singel": 0,
        "Tid dubbel": 0,
        "Tid trippel": 0,
        "Vila": 0,
        "√Ñlskar": 0,
        "Sover med": 0,
        "DeepT": 0,
        "Sekunder": 0,
        "Vila mun": 0,
        "Varv": 0,
        "Svarta": 0,
    })
    return rad


def kopiera_storsta_rad(df):
    if df.empty:
        return None
    df_filtered = df[df["Dag"] != 0]
    if df_filtered.empty:
        return None
    rad = df_filtered.loc[df_filtered["M√§n"].idxmax()]
    return rad.to_dict()


def visa_redigeringsformul√§r(rad, maxrad):
    st.markdown("### Redigera och spara")
    redigerad = {}
    for key in ALL_COLUMNS:
        if key == "Dag":
            redigerad[key] = st.number_input("Dag", value=int(rad.get(key, 1)), step=1)
        elif key in ["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]:
            redigerad[key] = st.number_input(key, value=int(rad.get(key, 0)), step=1, max_value=int(maxrad.get(key, 0)))
        else:
            redigerad[key] = st.number_input(key, value=float(rad.get(key, 0)), step=1.0)

    if st.button("üíæ Spara redigerad rad"):
        df = las_in_data()
        df = df.append(redigerad, ignore_index=True)
        df = update_calculations(df)
        spara_data(df)
        kontrollera_varningar(redigerad)
        st.success("‚úÖ Raden sparad!")

def statistikvy(df, maxrad):
    df = df[df["Dag"] != 0]
    if df.empty:
        st.warning("Ingen data att visa √§nnu.")
        return

    totalt_m√§n = df["M√§n"].sum()
    tot_tid = df["Summa tid"].sum()
    filmer = df["Filmer"].sum()
    √§lskar = df["√Ñlskar"].sum()
    int√§kter = df["Int√§kter"].sum()
    malin_l√∂n = df["Malin l√∂n"].sum()
    v√§nner = maxrad[["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]].sum().sum()
    kompisars_l√∂n = int√§kter / v√§nner if v√§nner > 0 else 0
    roi_per_man = malin_l√∂n / (√§lskar + df["Sover med"].sum() + df["Nya killar"].sum() + v√§nner) if (√§lskar + df["Sover med"].sum() + df["Nya killar"].sum() + v√§nner) > 0 else 0

    sista_kurs = 0
    try:
        sista_kurs = df[df["Ticker"] != ""]['Aktuell kurs'].dropna().iloc[-1]
    except:
        pass
    aktiev√§rde_total = sista_kurs * 5000 if sista_kurs else 0
    aktiev√§rde_per_person = aktiev√§rde_total / v√§nner if v√§nner > 0 else 0

    st.subheader("üìä Statistik")
    st.write(f"**Totalt antal m√§n:** {int(totalt_m√§n)}")
    st.write(f"**Totalt antal filmer:** {int(filmer)}")
    st.write(f"**Totalt antal √§lskat:** {int(√§lskar)}")
    st.write(f"**Totala int√§kter:** {int(int√§kter)} USD")
    st.write(f"**Malins totala l√∂n:** {int(malin_l√∂n)} USD")
    st.write(f"**Malin ROI per man:** {roi_per_man:.2f}")
    st.write(f"**Kompisars l√∂n (justerat):** {kompisars_l√∂n:.2f} USD")
    st.write(f"**Kompisars aktiev√§rde:** {aktiev√§rde_total:.2f} USD")
    st.write(f"**Aktiev√§rde per person:** {aktiev√§rde_per_person:.2f} USD")
    st.write(f"**Total tid:** {tot_tid:.1f} timmar")


def main():
    st.title("üé¨ Malins DataApp")
    df = las_in_data()
    maxrad = hamta_maxvarden(df)
    ensure_columns_exist(df)

    st.sidebar.header("Navigation")
    vy = st.sidebar.radio("V√§lj vy", ["üì• L√§gg till ny rad", "üìà Statistik", "üìÑ Data"])

    if vy == "üì• L√§gg till ny rad":
        if maxrad.isnull().values.any():
            st.warning("Fyll i maxv√§rden f√∂rst")
            visa_maxv√§rdesformul√§r(maxrad)
        else:
            visa_maxv√§rdesformul√§r(maxrad)
            if st.button("‚ûï Ny rad manuellt"):
                rad = skapa_tom_rad(maxrad)
                visa_redigeringsformul√§r(rad, maxrad)
            if st.button("üé≤ Slumpa film liten"):
                rad = slumpa_v√§rden("liten", maxrad)
                visa_redigeringsformul√§r(rad, maxrad)
            if st.button("üé¨ Slumpa film stor"):
                rad = slumpa_v√§rden("stor", maxrad)
                visa_redigeringsformul√§r(rad, maxrad)
            if st.button("üò¥ Vilodag hemma"):
                rad = skapa_vilorad("hemma", maxrad)
                visa_redigeringsformul√§r(rad, maxrad)
            if st.button("üíº Vilodag jobb"):
                rad = skapa_vilorad("jobb", maxrad)
                visa_redigeringsformul√§r(rad, maxrad)
            if st.button("üö´ Vilodag helt"):
                rad = skapa_vilorad("helt", maxrad)
                visa_redigeringsformul√§r(rad, maxrad)
            if st.button("üìã Kopiera st√∂rsta raden"):
                rad = kopiera_storsta_rad(df)
                if rad:
                    visa_redigeringsformul√§r(rad, maxrad)

    elif vy == "üìà Statistik":
        statistikvy(df, maxrad)

    elif vy == "üìÑ Data":
        st.subheader("üîç Fullst√§ndig datatabell")
        st.dataframe(df)

if __name__ == "__main__":
    main()

def ensure_columns_exist(df):
    expected_cols = ALL_COLUMNS
    sheet = client.open_by_url(st.secrets["SHEET_URL"]).worksheet("Blad1")
    existing_cols = sheet.row_values(1)
    missing_cols = [col for col in expected_cols if col not in existing_cols]
    if missing_cols:
        sheet.insert_rows([existing_cols + missing_cols], index=1)

def kontrollera_varningar(rad):
    if rad["Summa tid"] > 17:
        st.warning("‚è∞ Varning: Summa tid √∂verstiger 17 timmar!")
    tid_kille = rad.get("Tid kille", 0)
    if isinstance(tid_kille, (int, float)) and (tid_kille < 9 or tid_kille > 15):
        st.warning("üïí Tid kille √§r under 9 min eller √∂ver 15 min ‚Äì justera vid behov.")

def skapa_tom_rad(maxrad):
    rad = {col: 0 for col in MANUAL_COLUMNS}
    rad["Dag"] = hamta_nasta_dag()
    rad["Ticker"] = ""
    return rad

def skapa_vilorad(typ, maxrad):
    rad = skapa_tom_rad(maxrad)
    if typ == "hemma":
        rad.update({"Jobb": 0, "Grannar": 0, "Tjej PojkV": 0, "Nils fam": 0})
    elif typ == "jobb":
        for f√§lt in ["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]:
            maxv = maxrad.get(f√§lt, 0)
            rad[f√§lt] = int(round(maxv * 0.3)) if pd.notna(maxv) else 0
    elif typ == "helt":
        rad = {col: 0 for col in MANUAL_COLUMNS}
        rad["Dag"] = hamta_nasta_dag()
    return rad

def kopiera_storsta_rad(df):
    if df.empty:
        st.warning("Ingen data att kopiera fr√•n.")
        return None
    df = df[df["Dag"] != 0]
    if "M√§n" not in df.columns:
        st.warning("Kolumnen 'M√§n' saknas.")
        return None
    st√∂rsta = df.loc[df["M√§n"].idxmax()]
    rad = st√∂rsta[MANUAL_COLUMNS].to_dict()
    rad["Dag"] = hamta_nasta_dag()
    return rad

def hamta_nasta_dag():
    sheet = client.open_by_url(st.secrets["SHEET_URL"]).worksheet("Blad1")
    dagar = sheet.col_values(1)[1:]  # Skippa rubriken
    dagar_int = [int(d) for d in dagar if d.isdigit()]
    return max(dagar_int + [0]) + 1 if dagar_int else 1

def slumpa_v√§rden(stor=False):
    maxrad = hamta_maxvarden()
    rad = skapa_tom_rad(maxrad)

    for f√§lt in ["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]:
        maxv = maxrad.get(f√§lt, 0)
        rad[f√§lt] = random.randint(0, maxv if stor else max(1, maxv // 3))

    rad["√Ñlskar"] = 8
    rad["Sover med"] = 1
    rad["Vila"] = 7
    rad["√Ñlsk tid"] = 30
    rad["DeepT"] = random.randint(1, 10)
    rad["Varv"] = random.randint(1, 5)
    rad["Sekunder"] = random.randint(100, 500)
    rad["Vila mun"] = random.randint(0, 5)
    rad["DM"] = random.randint(0, 2)
    rad["DF"] = random.randint(0, 2)
    rad["DA"] = random.randint(0, 2)
    rad["TPP"] = random.randint(0, 2)
    rad["TAP"] = random.randint(0, 2)
    rad["TP"] = random.randint(0, 2)
    rad["Fitta"] = random.randint(0, 2)
    rad["R√∂v"] = random.randint(0, 2)
    rad["Nya killar"] = random.randint(0, 3)
    rad["Svarta"] = random.randint(0, 1)
    rad["Kompisar grabbar"] = random.randint(1, 5)

    return rad

def visa_redigeringsformul√§r(rad):
    with st.form("Redigera rad", clear_on_submit=False):
        ny_rad = {}
        for f√§lt in MANUAL_COLUMNS:
            if isinstance(rad.get(f√§lt), int):
                ny_rad[f√§lt] = st.number_input(f√§lt, value=int(rad.get(f√§lt, 0)), step=1)
            elif isinstance(rad.get(f√§lt), float):
                ny_rad[f√§lt] = st.number_input(f√§lt, value=float(rad.get(f√§lt, 0)))
            else:
                ny_rad[f√§lt] = st.text_input(f√§lt, value=rad.get(f√§lt, ""))
        submitted = st.form_submit_button("Spara redigerad rad")
        if submitted:
            spara_rad(ny_rad)
            st.success("‚úÖ Raden sparades.")
            kontrollera_varningar(update_calculations(pd.DataFrame([ny_rad])).iloc[0])
            st.stop()

def spara_rad(rad):
    df = pd.DataFrame([rad])
    df = update_calculations(df)
    ensure_columns_exist(df)
    sheet = client.open_by_url(st.secrets["SHEET_URL"]).worksheet("Blad1")
    befintliga_rader = sheet.get_all_values()
    befintliga_data = pd.DataFrame(befintliga_rader[1:], columns=befintliga_rader[0]) if befintliga_rader else pd.DataFrame()
    df = df[[col for col in sheet.row_values(1)]]
    sheet.append_row(df.iloc[0].astype(str).tolist(), value_input_option="USER_ENTERED")
