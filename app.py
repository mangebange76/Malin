import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import json

st.set_page_config(page_title="MalinData", layout="wide")

# Autentisering
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(
    json.loads(st.secrets["GOOGLE_CREDENTIALS"]), scopes=scope
)
client = gspread.authorize(credentials)

# Ark och blad
SHEET_NAME = "MalinData"
WORKSHEET_NAME = "Blad1"

# F√∂rv√§ntade kolumner
EXPECTED_COLUMNS = [
    "Dag", "M√§n", "F", "R", "Dm", "Df", "Dr", "3f", "3r", "3p",
    "Tid s", "Tid d", "Tid t", "Vila", "Summa s", "Summa d", "Summa t", "Summa v", "Klockan",
    "√Ñlskar", "√Ñlsk tid", "Sover med", "K√§nner", "Jobb", "Grannar", "Tjej oj", "Nils kom",
    "M√§n", "Tid kille", "Filmer", "Pris", "Int√§kter", "Malin", "F√∂retag", "K√§nner", "H√•rdhet",
    "pv", "Svarta", "GB"
]

def load_data():
    spreadsheet = client.open(SHEET_NAME)
    worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
    data = worksheet.get_all_records()

    # S√§kerst√§ll att rubrikerna √§r r√§tt ‚Äì skapa om n√∂dv√§ndigt
    current_headers = worksheet.row_values(1)
    if current_headers != EXPECTED_COLUMNS:
        worksheet.resize(rows=1)  # ta bort gamla data
        worksheet.insert_row(EXPECTED_COLUMNS, index=1)

    df = pd.DataFrame(data)

    # S√§kerst√§ll att alla kolumner finns, √§ven om nya har lagts till
    for col in EXPECTED_COLUMNS:
        if col not in df.columns:
            df[col] = 0

    return worksheet, df

def calculate_metrics(df):
    # Summera maxv√§rden
    max_job = df["Jobb"].max()
    max_grannar = df["Grannar"].max()
    max_pv = df["pv"].max()
    max_nils = df["Nils kom"].max()

    total_k√§nner = max_job + max_grannar + max_pv + max_nils

    # K√§nner tj√§nat
    total_int√§kt = df["Int√§kter"].sum()
    k√§nner_tj√§nat = total_int√§kt / total_k√§nner if total_k√§nner > 0 else 0

    # √Ñlskar snitt
    √§lskar_snitt = df["√Ñlskar"].sum() / total_k√§nner if total_k√§nner > 0 else 0

    # Sover med snitt (endast max Nils kom)
    sover_snitt = df["Sover med"].sum() / max_nils if max_nils > 0 else 0

    # GB-kolumn: Jobb + Grannar + pv + Nils kom per rad
    df["GB"] = df["Jobb"] + df["Grannar"] + df["pv"] + df["Nils kom"]
    gb_total = df["GB"].sum()
    gb_snitt = gb_total / total_k√§nner if total_k√§nner > 0 else 0

    # Snitt film
    film_rader = df[df["M√§n"] > 0]
    antal_filmer = len(film_rader)
    snitt_film = ((film_rader["M√§n"] + film_rader["GB"]).sum()) / antal_filmer if antal_filmer > 0 else 0

    # Malin tj√§nat = m√§n + GB + √§lskar + sover med
    malin_tj√§nat = df["M√§n"].sum() + df["GB"].sum() + df["√Ñlskar"].sum() + df["Sover med"].sum()

    # Vita / Svarta %
    summa_m√§n = df["M√§n"].sum()
    summa_gb = df["GB"].sum()
    summa_svarta = df["Svarta"].sum()
    total_vita_svarta = summa_m√§n + summa_gb + summa_svarta

    vita_procent = ((summa_m√§n + summa_gb - summa_svarta) / total_vita_svarta * 100) if total_vita_svarta > 0 else 0
    svarta_procent = (summa_svarta / total_vita_svarta * 100) if total_vita_svarta > 0 else 0

    return {
        "Max Jobb": max_job,
        "Max Grannar": max_grannar,
        "Max pv": max_pv,
        "Max Nils kom": max_nils,
        "Total k√§nner": total_k√§nner,
        "K√§nner tj√§nat": round(k√§nner_tj√§nat, 2),
        "√Ñlskar snitt": round(√§lskar_snitt, 2),
        "Sover med snitt": round(sover_snitt, 2),
        "GB snitt": round(gb_snitt, 2),
        "Snitt film": round(snitt_film, 2),
        "Malin tj√§nat": round(malin_tj√§nat, 2),
        "Vita (%)": round(vita_procent, 2),
        "Svarta (%)": round(svarta_procent, 2)
    }

def main():
    st.title("üìä MalinData Analys")

    worksheet, df = load_data()

    if df.empty:
        st.warning("Ingen data √§nnu.")
        return

    metrics = calculate_metrics(df)

    # Visa nyckeltal
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("K√§nner tj√§nat", metrics["K√§nner tj√§nat"])
        st.metric("√Ñlskar snitt", metrics["√Ñlskar snitt"])
        st.metric("Sover med snitt", metrics["Sover med snitt"])
    with col2:
        st.metric("GB snitt", metrics["GB snitt"])
        st.metric("Snitt film", metrics["Snitt film"])
        st.metric("Malin tj√§nat", metrics["Malin tj√§nat"])
    with col3:
        st.metric("Vita (%)", f"{metrics['Vita (%)']}%")
        st.metric("Svarta (%)", f"{metrics['Svarta (%)']}%")
        st.metric("Total k√§nner", metrics["Total k√§nner"])

    st.subheader("üìà Maxv√§rden")
    st.write(f"Jobb: {metrics['Max Jobb']} | Grannar: {metrics['Max Grannar']} | pv: {metrics['Max pv']} | Nils kom: {metrics['Max Nils kom']}")

    st.subheader("üßæ R√•data fr√•n databasen")
    st.dataframe(df)

if __name__ == "__main__":
    main()
