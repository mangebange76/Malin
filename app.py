import streamlit as st
import pandas as pd
import gspread
from datetime import datetime, timedelta
from oauth2client.service_account import ServiceAccountCredentials
import json

# Autentisering via secrets
credentials = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
gc = gspread.service_account_from_dict(credentials)

# Konstanter
SHEET_URL = "https://docs.google.com/spreadsheets/d/1-bpY9Ahk9qKH2QIQzVUSZLX6qDc2UwjCmullMCNvENQ/edit"
SHEET_NAME = "Blad1"
STARTTID = datetime.strptime("07:00", "%H:%M")
PRIS_PER_FILM = 19.99

# F√§lt
KOLUMNER = [
    "Datum", "M√§n", "Fi", "R√∂", "DM", "DF", "DR", "TPP", "TAP", "TPA",
    "√Ñlskar", "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils Fam", "Svarta",
    "Tid Singel", "Tid Dubbel", "Tid Trippel", "Vila"
]

BER√ÑKNADE = [
    "K√§nner", "Totalt m√§n", "Summa Singel", "Summa Dubbel", "Summa Trippel",
    "Summa Vila", "Summa Tid", "Klockan", "Tid Kille", "Filmer", "Int√§kter",
    "Malin", "F√∂retag", "V√§nner", "GangB", "√Ñlskat", "Jobb 2", "Grannar 2", "Tjej PojkV 2", "Nils Fam 2", "K√§nner 2"
]

def load_sheet():
    sh = gc.open_by_url(SHEET_URL)
    ws = sh.worksheet(SHEET_NAME)
    data = ws.get_all_records()
    return ws, pd.DataFrame(data)

def save_sheet(ws, df):
    ws.update([df.columns.values.tolist()] + df.values.tolist())

def get_max_values(df):
    return {
        "Jobb 2": df["Jobb"].max() if not df["Jobb"].isna().all() else 0,
        "Grannar 2": df["Grannar"].max() if not df["Grannar"].isna().all() else 0,
        "Tjej PojkV 2": df["Tjej PojkV"].max() if not df["Tjej PojkV"].isna().all() else 0,
        "Nils Fam 2": df["Nils Fam"].max() if not df["Nils Fam"].isna().all() else 0
    }

def l√§gg_till_rad(f√∂rval=None):
    st.subheader("‚ûï L√§gg till ny rad")

    with st.form("l√§gg_till_rad"):
        idag = datetime.today().strftime("%Y-%m-%d")
        datum = st.date_input("Datum", value=datetime.strptime(f√∂rval.get("Datum", idag), "%Y-%m-%d") if f√∂rval else datetime.today())

        input_data = {}
        for f√§lt in KOLUMNER[1:]:
            input_data[f√§lt] = st.number_input(f√§lt, min_value=0, step=1, value=f√∂rval.get(f√§lt, 0) if f√∂rval else 0)

        submit = st.form_submit_button("Spara rad")

    if submit:
        ny_rad = {"Datum": datum.strftime("%Y-%m-%d")}
        ny_rad.update(input_data)
        return ny_rad
    return None

def skapa_vilodag(typ, maxv√§rden):
    if typ == "Jobb":
        return {
            "Jobb": round(maxv√§rden["Jobb 2"] * 0.5),
            "Grannar": round(maxv√§rden["Grannar 2"] * 0.5),
            "Tjej PojkV": round(maxv√§rden["Tjej PojkV 2"] * 0.5),
            "Nils Fam": round(maxv√§rden["Nils Fam 2"] * 0.5),
            "√Ñlskar": 12, "Sover med": 1
        }
    elif typ == "Hemma":
        return {
            "Jobb": 3, "Grannar": 3, "Tjej PojkV": 3, "Nils Fam": 3,
            "√Ñlskar": 6, "Sover med": 0
        }

def ber√§kna(df):
    df = df.copy()

    # K√§nner och maxv√§rden
    df["K√§nner"] = df["Jobb"] + df["Grannar"] + df["Tjej PojkV"] + df["Nils Fam"]
    df["Totalt m√§n"] = df["M√§n"] + df["K√§nner"]

    df["Jobb 2"] = df["Jobb"].cummax()
    df["Grannar 2"] = df["Grannar"].cummax()
    df["Tjej PojkV 2"] = df["Tjej PojkV"].cummax()
    df["Nils Fam 2"] = df["Nils Fam"].cummax()
    df["K√§nner 2"] = df["K√§nner"].cummax()

    # Tid
    df["Summa Singel"] = (df["Fi"] + df["R√∂"]) * df["Tid Singel"]
    df["Summa Dubbel"] = (df["DM"] + df["DF"] + df["DR"]) * df["Tid Dubbel"]
    df["Summa Trippel"] = (df["TPP"] + df["TAP"] + df["TPA"]) * df["Tid Trippel"]

    df["Summa Vila"] = (
        df["Totalt m√§n"] * df["Vila"] +
        (df["DM"] + df["DF"] + df["DR"]) * (df["Vila"] + 7) +
        (df["TPP"] + df["TAP"] + df["TPA"]) * (df["Vila"] + 15)
    )

    df["Summa Tid"] = df["Summa Singel"] + df["Summa Dubbel"] + df["Summa Trippel"] + df["Summa Vila"]

    df["Klockan"] = df["Summa Tid"].apply(lambda s: (STARTTID + timedelta(seconds=s)).strftime("%H:%M"))
    df["Tid Kille"] = ((df["Summa Singel"] + df["Summa Dubbel"] * 2 + df["Summa Trippel"] * 3) / df["Totalt m√§n"]).fillna(0) / 60

    # Filmer och int√§kter
    df["Filmer"] = (
        df["M√§n"] + df["Fi"] + df["R√∂"]*2 + df["DM"]*2 + df["DF"]*3 + df["DR"]*4 +
        df["TPP"]*5 + df["TAP"]*7 + df["TPA"]*6
    )

    df["Int√§kter"] = df["Filmer"] * PRIS_PER_FILM
    df["Malin"] = df["Int√§kter"] * 0.01
    df.loc[df["Malin"] > 1500, "Malin"] = 1500
    df["F√∂retag"] = df["Int√§kter"] * 0.40
    df["V√§nner"] = df["Int√§kter"] - df["Malin"] - df["F√∂retag"]

    return df

def visa_data(df):
    st.subheader("üìä Huvudvy")

    totalt_m√§n = df["M√§n"].sum()
    totalt_k√§nner = df["K√§nner"].sum()
    snitt = (totalt_m√§n + totalt_k√§nner) / len(df)

    vita = (totalt_m√§n - df["Svarta"].sum()) / totalt_m√§n * 100 if totalt_m√§n else 0
    svarta = df["Svarta"].sum() / totalt_m√§n * 100 if totalt_m√§n else 0

    gangb = totalt_k√§nner / (df[["Jobb 2", "Grannar 2", "Tjej PojkV 2", "Nils Fam 2"]].iloc[-1].sum())
    √§lskat = df["√Ñlskar"].sum() / df[["Jobb", "Grannar", "Tjej PojkV", "Nils Fam"]].sum().sum()

    st.markdown(f"""
    **Totalt M√§n**: {totalt_m√§n}  
    **Snitt (M√§n + K√§nner)**: {snitt:.1f}  
    **Malin l√∂n**: {df["Malin"].sum():,.2f} USD  
    **V√§nner l√∂n**: {df["V√§nner"].sum():,.2f} USD  
    **GangB**: {gangb:.2f}  
    **√Ñlskat**: {√§lskat:.2f}  
    **Vita (%)**: {vita:.1f}%  
    **Svarta (%)**: {svarta:.1f}%
    """)

    rad = st.selectbox("üìÖ V√§lj rad att visa detaljer:", df["Datum"])
    vald = df[df["Datum"] == rad]

    if not vald.empty:
        st.markdown(f"""
        **Tid Kille**: {vald["Tid Kille"].values[0]:.1f} min  
        **Filmer**: {vald["Filmer"].values[0]}  
        **Int√§kter**: {vald["Int√§kter"].values[0]:,.2f} USD  
        **Klockan**: {vald["Klockan"].values[0]}
        """)

# === APP START ===
def main():
    worksheet, df = load_sheet()

    maxv√§rden = get_max_values(df)

    # L√§gg till ny rad manuellt
    ny_rad = l√§gg_till_rad()

    # Vilodag
    if st.button("üì¥ Vilodag Jobb"):
        ny_rad = {"Datum": (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d")}
        ny_rad.update({k: 0 for k in KOLUMNER[1:]})
        ny_rad.update(skapa_vilodag("Jobb", maxv√§rden))
    if st.button("üè† Vilodag Hemma"):
        ny_rad = {"Datum": (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d")}
        ny_rad.update({k: 0 for k in KOLUMNER[1:]})
        ny_rad.update(skapa_vilodag("Hemma", maxv√§rden))

    # Om rad lagts till
    if ny_rad:
        df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
        df = ber√§kna(df)
        save_sheet(worksheet, df)
        st.success("Raden har lagts till! üîÑ")

    # Visa appens data
    df = ber√§kna(df)
    visa_data(df)

if __name__ == "__main__":
    main()
