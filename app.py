import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import date, time, datetime, timedelta

try:
    from berakningar import ber√§kna_radv√§rden
except Exception:
    ber√§kna_radv√§rden = None

st.set_page_config(page_title="Malin", layout="centered")
st.title("Malin-produktionsapp")

# ---------- 1) Auth: ENDAST Sheets-scope (ingen Drive) ----------
def get_client():
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_info(dict(st.secrets["GOOGLE_CREDENTIALS"]), scopes=scopes)
    return gspread.authorize(creds)

client = get_client()

# ---------- 2) √ñppna arket via URL/ID (ingen Drive-listning) ----------
def _get_query_param(name, default=""):
    if hasattr(st, "query_params"):
        return st.query_params.get(name, [""])[0] if st.query_params.get(name) else default
    try:
        return st.experimental_get_query_params().get(name, [""])[0]
    except Exception:
        return default

def resolve_sheet(gc):
    last_err = None
    url = st.secrets.get("SHEET_URL", "").strip() if "SHEET_URL" in st.secrets else ""
    if url:
        try:
            st.caption("üîó √ñppnar via SHEET_URL‚Ä¶")
            return gc.open_by_url(url).sheet1
        except Exception as e:
            last_err = e
            st.warning(f"SHEET_URL misslyckades: {e}")
    sid = st.secrets.get("GOOGLE_SHEET_ID", "").strip() if "GOOGLE_SHEET_ID" in st.secrets else ""
    if sid:
        try:
            st.caption("üÜî √ñppnar via GOOGLE_SHEET_ID‚Ä¶")
            return gc.open_by_key(sid).sheet1
        except Exception as e:
            last_err = e
            st.warning(f"GOOGLE_SHEET_ID misslyckades: {e}")
    qp = _get_query_param("sheet", "")
    if qp:
        try:
            st.caption("üîé √ñppnar via query-param 'sheet'‚Ä¶")
            return gc.open_by_url(qp).sheet1 if qp.startswith("http") else gc.open_by_key(qp).sheet1
        except Exception as e:
            last_err = e
            st.warning(f"Query 'sheet' misslyckades: {e}")

    st.error("Hittade inget s√§tt att √∂ppna arket. L√§gg in SHEET_URL eller GOOGLE_SHEET_ID i Secrets, "
             "eller skicka ?sheet=<url|id> i adressen."
             f"\nSenaste fel: {last_err}")
    st.stop()

sheet = resolve_sheet(client)

# ---------- 3) Kolumns√§kring ----------
KOLUMNER = [
    "Veckodag","Scen","M√§n","Fitta","Rumpa","DP","DPP","DAP","TAP",
    "Tid S","Tid D","Vila","Summa S","Summa D","Summa TP","Summa Vila","Summa tid",
    "Klockan","√Ñlskar","Sover med","K√§nner","Pappans v√§nner","Grannar",
    "Nils v√§nner","Nils familj","Totalt M√§n","Tid kille","Nils",
    "H√•ngel","Suger","Prenumeranter","Avgift","Int√§kter","Int√§kt m√§n",
    "Int√§kt K√§nner","L√∂n Malin","Int√§kt F√∂retaget","Vinst","K√§nner Sammanlagt","H√•rdhet"
]
try:
    header = sheet.row_values(1)
    if header != KOLUMNER:
        sheet.clear()
        sheet.insert_row(KOLUMNER, 1)
        st.caption("üß± Kolumnrubriker uppdaterade.")
except Exception as e:
    st.warning(f"Kunde inte s√§kerst√§lla kolumner (forts√§tter √§nd√•): {e}")

# ---------- 4) Sidopanelinst√§llningar ----------
st.sidebar.header("Inst√§llningar")
startdatum = st.sidebar.date_input("Historiskt startdatum", value=date.today())
starttid   = st.sidebar.time_input("Starttid", value=time(7, 0))
f√∂delsedatum = st.sidebar.date_input("Malins f√∂delsedatum", value=date(1999,1,1))

def datum_och_veckodag_f√∂r_scen(scen_nummer: int):
    rad_datum = startdatum + timedelta(days=scen_nummer - 1)
    veckodagar = ["M√•ndag","Tisdag","Onsdag","Torsdag","Fredag","L√∂rdag","S√∂ndag"]
    return rad_datum, veckodagar[rad_datum.weekday()]

# ---------- 5) Formul√§r ----------
with st.form("ny_rad"):
    st.subheader("‚ûï L√§gg till ny h√§ndelse")

    m√§n = st.number_input("M√§n", min_value=0, step=1, value=0)
    fitta = st.number_input("Fitta", min_value=0, step=1, value=0)
    rumpa = st.number_input("Rumpa", min_value=0, step=1, value=0)
    dp = st.number_input("DP", min_value=0, step=1, value=0)
    dpp = st.number_input("DPP", min_value=0, step=1, value=0)
    dap = st.number_input("DAP", min_value=0, step=1, value=0)
    tap = st.number_input("TAP", min_value=0, step=1, value=0)

    tid_s = st.number_input("Tid S (sek)", min_value=0, step=1, value=60)
    tid_d = st.number_input("Tid D (sek)", min_value=0, step=1, value=60)
    vila  = st.number_input("Vila (sek)",  min_value=0, step=1, value=7)

    √§lskar    = st.number_input("√Ñlskar", min_value=0, step=1, value=0)
    sover_med = st.number_input("Sover med", min_value=0, step=1, value=0)

    pappans_v√§nner = st.number_input("Pappans v√§nner", min_value=0, step=1, value=0)
    grannar        = st.number_input("Grannar", min_value=0, step=1, value=0)
    nils_v√§nner    = st.number_input("Nils v√§nner", min_value=0, step=1, value=0)
    nils_familj    = st.number_input("Nils familj", min_value=0, step=1, value=0)

    nils = st.number_input("Nils", min_value=0, step=1, value=0)

    submit = st.form_submit_button("üíæ Spara")

# ---------- 6) Fallback-ber√§kning (om modulen saknas) ----------
def fallback_ber√§kning(rad_in, rad_datum, f√∂delsedatum, starttid):
    c = rad_in["M√§n"]; d=rad_in["Fitta"]; e=rad_in["Rumpa"]
    f=rad_in["DP"]; g=rad_in["DPP"]; h=rad_in["DAP"]; i=rad_in["TAP"]
    j=rad_in["Tid S"]; k=rad_in["Tid D"]; l=rad_in["Vila"]

    m = (c+d+e)*j; n=(f+g+h)*k; o=i*k; p=(c+d+e+f+g+h+i)*l
    q_hours = round((m+n+o+p)/3600.0, 1)
    start_dt = datetime.combine(rad_datum, starttid)
    klockan_str = (start_dt + timedelta(hours=3+q_hours+1)).strftime("%H:%M")

    u = rad_in["Pappans v√§nner"]+rad_in["Grannar"]+rad_in["Nils v√§nner"]+rad_in["Nils familj"]
    z = u + c; z_safe = z if z>0 else 1
    ac = 10800/max(c,1); ad=(n*0.65)/z_safe
    ae=(c+d+e+f+g+h+i); af=15; ag=ae*af; ah=c*120

    √•lder = rad_datum.year - f√∂delsedatum.year - ((rad_datum.month,rad_datum.day)<(f√∂delsedatum.month,f√∂delsedatum.day))
    if √•lder < 18: raise ValueError("√Ölder < 18 ‚Äî sp√§rrad rad.")
    faktor = 1.20 if 18<=√•lder<=25 else 1.10 if 26<=√•lder<=30 else 1.00 if 31<=√•lder<=40 else 0.90
    aj = max(150, min(800, max(150, min(800, ae*0.10))*faktor))

    ai=(aj+120)*u; ak=ag*0.20; al=ag-ah-ai-aj-ak
    h√•rdhet=(2 if f>0 else 0)+(3 if g>0 else 0)+(5 if h>0 else 0)+(7 if i>0 else 0)

    return {
        **rad_in,
        "Summa S": m,"Summa D": n,"Summa TP": o,"Summa Vila": p,
        "Summa tid": q_hours,"Klockan": klockan_str,"K√§nner": u,"Totalt M√§n": z,
        "Tid kille": ((m/z_safe)+(n/z_safe)+(o/z_safe)+ad)/60,
        "H√•ngel": ac,"Suger": ad,"Prenumeranter": ae,"Avgift": af,"Int√§kter": ag,
        "Int√§kt m√§n": ah,"Int√§kt K√§nner": ai,"L√∂n Malin": aj,"Int√§kt F√∂retaget": ak,
        "Vinst": al,"K√§nner Sammanlagt": u,"H√•rdhet": h√•rdhet
    }

# ---------- 7) Spara ----------
if submit:
    try:
        all_vals = sheet.get_all_values()
        scen = max(1, len(all_vals))  # n√§sta datarad
    except Exception:
        scen = 1

    rad_datum, veckodag = datum_och_veckodag_f√∂r_scen(scen)

    grund = {
        "Veckodag": veckodag, "Scen": scen,
        "M√§n": m√§n, "Fitta": fitta, "Rumpa": rumpa, "DP": dp, "DPP": dpp, "DAP": dap, "TAP": tap,
        "Tid S": tid_s, "Tid D": tid_d, "Vila": vila,
        "√Ñlskar": √§lskar, "Sover med": sover_med,
        "Pappans v√§nner": pappans_v√§nner, "Grannar": grannar,
        "Nils v√§nner": nils_v√§nner, "Nils familj": nils_familj, "Nils": nils
    }

    try:
        if callable(ber√§kna_radv√§rden):
            ber = ber√§kna_radv√§rden(grund, rad_datum, f√∂delsedatum, starttid)
        else:
            ber = fallback_ber√§kning(grund, rad_datum, f√∂delsedatum, starttid)
    except Exception as e:
        st.warning(f"Ber√§kning fel: {e}. Anv√§nder fallback.")
        ber = fallback_ber√§kning(grund, rad_datum, f√∂delsedatum, starttid)

    rad = [ber.get(k, "") for k in KOLUMNER]
    try:
        sheet.append_row(rad)
        √•lder = rad_datum.year - f√∂delsedatum.year - ((rad_datum.month,rad_datum.day)<(f√∂delsedatum.month,f√∂delsedatum.day))
        st.success(f"‚úÖ Rad sparad. Datum {rad_datum} ({veckodag}), √Ölder {√•lder} √•r, Klockan {ber['Klockan']}")
    except Exception as e:
        st.error(f"Kunde inte spara raden: {e}")

# ---------- 8) Visa & radera ----------
st.subheader("üìä Aktuella data")
try:
    rows = sheet.get_all_records()
    if rows:
        st.dataframe(rows, use_container_width=True)
    else:
        st.info("Inga datarader √§nnu.")
except Exception as e:
    st.warning(f"Kunde inte l√§sa data: {e}")

st.subheader("üóë Ta bort rad")
try:
    total_rows = len(sheet.get_all_values()) - 1
    if total_rows > 0:
        idx = st.number_input("Radnummer att ta bort (1 = f√∂rsta dataraden)", min_value=1, max_value=total_rows, step=1, value=1)
        if st.button("Ta bort vald rad"):
            sheet.delete_rows(int(idx) + 1)  # +1 f√∂r header
            st.success(f"Rad {idx} borttagen.")
            st.experimental_rerun()
    else:
        st.caption("Ingen datarad att ta bort.")
except Exception as e:
    st.warning(f"Kunde inte ta bort rad: {e}")
