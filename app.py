import streamlit as st
import pandas as pd
import gspread
import json
from google.oauth2.service_account import Credentials

st.set_page_config(page_title="MalinData Analys")

# Funktion: L√§s eller skapa data
def load_data():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials = Credentials.from_service_account_info(
        json.loads(st.secrets["GOOGLE_CREDENTIALS"]), scopes=scope
    )
    client = gspread.authorize(credentials)

    spreadsheet = client.open("MalinData")
    worksheet = spreadsheet.worksheet("Blad1")

    expected_headers = [
        "Dag", "M√§n", "F", "R", "Dm", "Df", "Dr", "3f", "3r", "3p", "Tid s",
        "Tid d", "Tid t", "Vila", "Summa s", "Summa d", "Summa t", "Summa v",
        "Klockan", "√Ñlskar", "√Ñlsk tid", "Sover med", "K√§nner", "Jobb",
        "Grannar", "Tjej oj", "Nils kom", "Tid kille", "Filmer", "Pris",
        "Int√§kter", "Malin", "F√∂retag", "H√•rdhet", "Svarta"
    ]

    current_values = worksheet.get_all_values()
    if not current_values:
        worksheet.insert_row(expected_headers, 1)
        return worksheet, pd.DataFrame(columns=expected_headers)

    headers = current_values[0]
    if headers != expected_headers:
        worksheet.delete_row(1)
        worksheet.insert_row(expected_headers, 1)
        current_values = worksheet.get_all_values()

    if len(current_values) <= 1:
        return worksheet, pd.DataFrame(columns=expected_headers)

    data = worksheet.get_all_records()
    df = pd.DataFrame(data)

    return worksheet, df

# Funktion: Visa nyckeltal
def visa_nyckeltal(df):
    st.header("Nyckeltal")

    if df.empty:
        st.info("Ingen data att visa √§nnu.")
        return

    try:
        max_jobb = df["Jobb"].max()
        max_grannar = df["Grannar"].max()
        max_pv = df["Tjej oj"].max()
        max_nils = df["Nils kom"].max()

        total_intakt = df["Int√§kter"].sum()
        k√§nner_tj√§nat = total_intakt / max((max_jobb + max_grannar + max_pv + max_nils), 1)

        filmrader = df[df["M√§n"] > 0]
        snitt_film = (df["M√§n"].sum() + df["F"].sum()) / len(filmrader) if len(filmrader) > 0 else 0

        malin_tj√§nst_snitt = df[["M√§n", "F", "√Ñlskar", "Sover med"]].sum().sum()

        vita_summa = df["M√§n"].sum() + df["F"].sum()
        svarta_summa = df["Svarta"].sum()
        total_vit_svart = max((vita_summa + svarta_summa), 1)
        vita_procent = (vita_summa - svarta_summa) / total_vit_svart * 100
        svarta_procent = svarta_summa / total_vit_svart * 100

        st.metric("K√§nner tj√§nat", f"{k√§nner_tj√§nat:.2f} kr")
        st.metric("Snitt film", f"{snitt_film:.2f}")
        st.metric("Malin tj√§nst snitt", f"{malin_tj√§nst_snitt:.2f}")
        st.metric("Vita (%)", f"{vita_procent:.2f}%")
        st.metric("Svarta (%)", f"{svarta_procent:.2f}%")

    except Exception as e:
        st.error(f"Fel vid nyckeltalsber√§kning: {e}")

# Funktion: Formul√§r f√∂r ny post
def nytt_inl√§gg(worksheet, df):
    st.subheader("L√§gg till ny rad")

    with st.form("data_form"):
        ny_rad = {}
        for col in df.columns:
            if col in ["Dag", "Klockan"]:
                ny_rad[col] = st.text_input(col)
            else:
                ny_rad[col] = st.number_input(col, value=0, step=1)
        submitted = st.form_submit_button("Spara")
        if submitted:
            rad = [ny_rad[col] for col in df.columns]
            worksheet.append_row(rad)
            st.success("Rad tillagd. Ladda om sidan.")

# Funktion: Visa data
def visa_tabell(df):
    st.subheader("Datatabell")
    if df.empty:
        st.info("Ingen data √§nnu.")
    else:
        st.dataframe(df)

# Huvudfunktion
def main():
    st.title("üìä MalinData Analys")
    worksheet, df = load_data()
    visa_nyckeltal(df)
    nytt_inl√§gg(worksheet, df)
    visa_tabell(df)

if __name__ == "__main__":
    main()
