import streamlit as st
import pandas as pd
import numpy as np
import random
import gspread
from datetime import datetime, timedelta
from google.oauth2.service_account import Credentials
from statistik import compute_stats

st.set_page_config(page_title="Malin-produktionsapp", layout="wide")

SHEET_URL = st.secrets["SHEET_URL"]
CFG_KEY = "INST√ÑLLNINGAR"
PROFILE_SHEET = "Profil"
DATA_SHEET = "Data"
BONUS_LEFT_KEY = "BONUS_KVAR"

# Anv√§nds f√∂r att identifiera vilka kolumner vi jobbar med
KOLUMNER_PROFIL = [
    "F√∂delsedatum", "Eskilstuna killar", "Bekanta", "Svarta",
    "Pappans v√§nner", "Grannar", "Nils v√§nner", "Nils familj",
    "Totalt personal", "L√§ngd (m)"
]

KOLUMNER_DATA = [
    # De h√§r l√§ses in fr√•n data-bladet och √§r dynamiskt kopplade till profilen
    "Datum", "Veckodag", "Typ", "M√§n", "Svarta", "Bekanta", "Eskilstuna killar",
    "K√§nner", "Bonus killar", "Bonus deltagit", "Tid (h)", "Tid kille (min)",
    "Int√§kt k√§nner", "Kostnad m√§n", "Int√§kt f√∂retag", "L√∂n Malin", "Vinst",
    "S", "D", "TP", "H√§nder", "Suger"
]

DEFAULT_CFG = {
    "startdatum": datetime(1990, 1, 1).date(),
    "fodelsedatum": datetime(1970, 1, 1).date(),
    "bonus_procent": 1.0
}

def skapa_koppling():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
    client = gspread.authorize(credentials)
    return client.open_by_url(SHEET_URL)

def l√§s_profilnamn():
    ark = skapa_koppling()
    try:
        profilblad = ark.worksheet(PROFILE_SHEET)
        namn = profilblad.col_values(1)[1:]  # Skippa rubriken
        return [n for n in namn if n]
    except:
        return []

def l√§s_inst√§llningar(profil_namn):
    ark = skapa_koppling()
    try:
        blad = ark.worksheet(profil_namn)
        df = pd.DataFrame(blad.get_all_records())
        inst = df.iloc[0].to_dict() if not df.empty else {}
    except:
        inst = {}

    # Konvertera datumf√§lt
    if "F√∂delsedatum" in inst:
        try:
            inst["F√∂delsedatum"] = pd.to_datetime(inst["F√∂delsedatum"]).date()
        except:
            inst["F√∂delsedatum"] = DEFAULT_CFG["fodelsedatum"]
    else:
        inst["F√∂delsedatum"] = DEFAULT_CFG["fodelsedatum"]

    inst.setdefault("L√§ngd (m)", 1.64)
    inst.setdefault("bonus_procent", DEFAULT_CFG["bonus_procent"])

    return inst

def l√§s_data():
    ark = skapa_koppling()
    try:
        blad = ark.worksheet(DATA_SHEET)
        df = pd.DataFrame(blad.get_all_records())
        return df
    except:
        return pd.DataFrame(columns=KOLUMNER_DATA)

def spara_data(df):
    ark = skapa_koppling()
    blad = ark.worksheet(DATA_SHEET)
    blad.clear()
    blad.update([df.columns.tolist()] + df.astype(str).values.tolist())

# Val av profil
tillg√§ngliga_profiler = l√§s_profilnamn()
vald_profil = st.sidebar.selectbox("V√§lj profil", tillg√§ngliga_profiler)

# Ladda inst√§llningar f√∂r vald profil
profilinst = l√§s_inst√§llningar(vald_profil)
CFG = DEFAULT_CFG.copy()
CFG.update(profilinst)

# Titel med namn fr√•n vald profil
st.title(f"Produktion ‚Äì {vald_profil}")

# Visa nuvarande inst√§llningar
with st.expander("Inst√§llningar"):
    st.write("F√∂delsedatum:", CFG["fodelsedatum"])
    st.write("Startdatum:", CFG["startdatum"])
    st.write("L√§ngd (m):", CFG.get("L√§ngd (m)", 1.64))
    st.write("Bonus % av prenumeranter:", CFG.get("bonus_procent", 0.01))

# Data ‚Äì ladda databladen
rows_df = l√§s_data()

# Statistik ‚Äì (enkel placeholder fr√•n statistik.py)
from statistik import compute_stats
statistik = compute_stats(rows_df, CFG)

with st.expander("üìä Statistik"):
    for nyckel, v√§rde i statistik.items():
        st.write(f"{nyckel}: {v√§rde}")

from datetime import timedelta

def best√§m_datum(cfg, scen_nr):
    try:
        return cfg["startdatum"] + timedelta(days=scen_nr - 1)
    except Exception as e:
        st.error(f"Fel i datumr√§kning: {e}")
        return datetime.today().date()

def slumpa_prenumeranter():
    return random.randint(1000, 10000)

def slumpa_bonus(cfg, antal_prenumeranter):
    bonus_procent = cfg.get("bonus_procent", 0.01)
    return int(antal_prenumeranter * bonus_procent)

def l√§gg_till_scenrad(cfg, scen_nr):
    datum = best√§m_datum(cfg, scen_nr)
    pren = slumpa_prenumeranter()
    bonus = slumpa_bonus(cfg, pren)
    rad = {
        "Datum": datum,
        "Scen#": scen_nr,
        "Prenumeranter": pren,
        "Bonus killar": bonus,
        "Bonus deltagit": 0,
        "H√§nder aktiv": "Ja",  # standardaktivt
        # Fler f√§lt fylls i senare i input-vyn
    }
    return rad

def scenformul√§r(cfg, scen_nr):
    with st.form("scenformul√§r"):
        st.markdown(f"### Ny scen #{scen_nr}")

        datum = best√§m_datum(cfg, scen_nr)
        st.write(f"**Datum:** {datum}")

        # Nyckelf√§lt
        aktivitet = st.selectbox("Aktivitet", ["Scen", "Vila p√• plats", "Vilovecka hemma"])
        prenumeranter = st.number_input("Prenumeranter", value=slumpa_prenumeranter(), step=100)
        bonus_killar = st.number_input("Bonus killar", value=slumpa_bonus(cfg, prenumeranter), step=1)
        bonus_deltagit = st.number_input("Bonus deltagit", value=0, step=1)
        h√§nder = st.radio("H√§nder aktiv", ["Ja", "Nej"])

        # Andra exempel p√• f√§lt (l√§gg till fler h√§r)
        antal_s = st.number_input("Antal S", value=0, step=1)
        antal_d = st.number_input("Antal D", value=0, step=1)
        antal_tp = st.number_input("Antal TP", value=0, step=1)
        totalt_m√§n = st.number_input("Totalt m√§n p√• raden", value=0, step=1)

        # Spara-knapp
        submitted = st.form_submit_button("Spara rad")

        if submitted:
            rad = {
                "Datum": datum,
                "Scen#": scen_nr,
                "Aktivitet": aktivitet,
                "Prenumeranter": prenumeranter,
                "Bonus killar": bonus_killar,
                "Bonus deltagit": bonus_deltagit,
                "H√§nder aktiv": h√§nder,
                "S": antal_s,
                "D": antal_d,
                "TP": antal_tp,
                "Totalt m√§n": totalt_m√§n,
            }
            return rad
    return None

def ber√§kna_tid_kille(rad):
    try:
        m√§n = max(rad.get("Totalt m√§n", 0), 1)
        s = rad.get("S", 0)
        d = rad.get("D", 0)
        tp = rad.get("TP", 0)

        # Suger: 80% av varje kategori dividerat p√• antal m√§n
        suger = ((s / m√§n) * 0.8) + ((d / m√§n) * 0.8) + ((tp / m√§n) * 0.8)
        suger = round(suger, 3)

        # H√§nder: samma princip men g√•nger tv√• (f√∂r tv√• h√§nder)
        if rad.get("H√§nder aktiv", "Ja") == "Ja":
            h√§nder = 2 * (((s / m√§n) * 0.8) + ((d / m√§n) * 0.8) + ((tp / m√§n) * 0.8))
            h√§nder = round(h√§nder, 3)
        else:
            h√§nder = 0.0

        rad["Suger"] = suger
        rad["H√§nder"] = h√§nder

        # Tid per kille ‚Äì exempelformel (kan justeras)
        rad["Tid per kille (min)"] = round((s + d * 2 + tp * 3) * 2, 1)

        return rad
    except Exception as e:
        st.error(f"Fel i ber√§kning av tid per kille: {e}")
        return rad

def spara_rad(df, ny_rad, profilnamn):
    try:
        ny_df = pd.DataFrame([ny_rad])
        df = pd.concat([df, ny_df], ignore_index=True)

        ark_namn = profilnamn.strip()
        sheet = skapa_koppling(ark_namn)
        sheet.clear()
        sheet.update([df.columns.tolist()] + df.astype(str).values.tolist())
        st.success("Rad sparad till Google Sheets.")
    except Exception as e:
        st.error(f"Fel vid sparande: {e}")
    return df


def skapa_koppling(sheet_namn):
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = Credentials.from_service_account_info(
        st.secrets["GOOGLE_CREDENTIALS"], scopes=scope
    )
    client = gspread.authorize(creds)
    sheet = client.open_by_url(st.secrets["SHEET_URL"]).worksheet(sheet_namn)
    return sheet


def l√§s_data(profilnamn):
    try:
        ark_namn = profilnamn.strip()
        sheet = skapa_koppling(ark_namn)
        data = sheet.get_all_records()
        return pd.DataFrame(data)
    except Exception as e:
        st.warning(f"Kunde inte l√§sa data f√∂r {profilnamn}: {e}")
        return pd.DataFrame()

from statistik import compute_stats

def visa_statistik(df, cfg):
    st.subheader("üìä Statistik")

    if df.empty:
        st.info("Ingen data att visa statistik f√∂r √§nnu.")
        return

    try:
        stats = compute_stats(df, cfg)
        for nyckel, v√§rde in stats.items():
            st.write(f"**{nyckel}:** {v√§rde}")
    except Exception as e:
        st.error(f"Kunde inte ber√§kna statistik: {e}")

def main():
    st.set_page_config(layout="wide", page_title="Malin-produktionsapp")
    st.title("üé¨ Malin-produktionsapp")

    # Val av profil
    profil_namn = st.selectbox("V√§lj profil", hamta_profiler())
    if not profil_namn:
        st.warning("Ingen profil vald.")
        return

    # L√§s in inst√§llningar + profildata
    try:
        profil_df = hamta_profil_data(profil_namn)
        CFG = skapa_cfg_dict(profil_df)
        rows_df = hamta_scen_data(profil_namn)
    except Exception as e:
        st.error(f"Kunde inte l√§sa in data f√∂r vald profil: {e}")
        return

    # Visa inputf√§lt
    st.divider()
    st.subheader("üé• L√§gg till scen")
    try:
        rows_df = render_input_fields(CFG, rows_df)
    except Exception as e:
        st.error(f"Kunde inte visa inmatningsf√§lt: {e}")
        return

    # Visa statistik
    st.divider()
    visa_statistik(rows_df, CFG)

    # Visa hela databasen f√∂r profil
    st.divider()
    st.subheader("üìÑ Sparad data f√∂r denna profil")
    st.dataframe(rows_df)

if __name__ == "__main__":
    main()

def hamta_profiler():
    """H√§mtar listan med tillg√§ngliga profiler fr√•n fliken 'Profil'."""
    try:
        sheet = skapa_koppling()
        profiler = sheet.worksheet("Profil").col_values(1)
        return [p.strip() for p in profiler if p.strip()]
    except Exception as e:
        st.error(f"Kunde inte l√§sa profiler: {e}")
        return []

def hamta_profil_data(namn):
    """H√§mtar inst√§llningar f√∂r vald profil fr√•n dess blad."""
    df = skapa_koppling().worksheet(namn).get_all_records()
    return pd.DataFrame(df)

def hamta_scen_data(namn):
    """H√§mtar sparade scenrader f√∂r vald profil fr√•n fliken 'Data'."""
    df = skapa_koppling().worksheet("Data").get_all_records()
    df = pd.DataFrame(df)
    return df[df["Profil"] == namn].copy() if "Profil" in df.columns else df

def skapa_cfg_dict(profil_df):
    """Konverterar inst√§llningsrader fr√•n profilens blad till CFG-dict."""
    cfg = {}
    for _, row in profil_df.iterrows():
        nyckel = str(row.get("Nyckel", "")).strip()
        v√§rde = str(row.get("V√§rde", "")).strip()
        if not nyckel:
            continue
        # F√∂rs√∂k konvertera till int eller float
        if v√§rde.isdigit():
            cfg[nyckel] = int(v√§rde)
        else:
            try:
                cfg[nyckel] = float(v√§rde)
            except:
                cfg[nyckel] = v√§rde
    return cfg

def render_input_fields(cfg):
    """Visar formul√§rf√§lt f√∂r manuell inmatning."""
    with st.form("ny_scen_formul√§r", clear_on_submit=True):
        st.subheader("üìù Ny scen")

        datum = st.date_input("Datum", value=cfg["startdatum"])
        aktivitet = st.selectbox("Typ av scen", ["Vanlig", "Vila p√• inspelningsplats", "Vilovecka hemma"])
        antal_minuter = st.number_input("Minuter", min_value=0, step=5)
        antal_m√§n = st.number_input("Antal m√§n", min_value=0, max_value=20)
        √§lskar = st.checkbox("√Ñlskar", value=True)
        h√§nder = st.checkbox("H√§nder", value=True)
        kommentar = st.text_input("Kommentar")

        submitted = st.form_submit_button("Spara scen")
        if submitted:
            return {
                "Datum": datum,
                "Aktivitet": aktivitet,
                "Minuter": antal_minuter,
                "Antal m√§n": antal_m√§n,
                "√Ñlskar": √§lskar,
                "H√§nder": h√§nder,
                "Kommentar": kommentar,
            }
    return None


def spara_rad(cfg, f√§lt):
    """Sparar scenraden till r√§tt flik i Google Sheets."""
    try:
        sheet = skapa_koppling().worksheet("Data")
        befintlig = sheet.get_all_records()
        df = pd.DataFrame(befintlig)

        ny_rad = f√§lt.copy()
        ny_rad["Profil"] = cfg["profil"]

        # L√§gg till kolumner som saknas
        for col in ["Profil", "Datum", "Aktivitet", "Minuter", "Antal m√§n", "√Ñlskar", "H√§nder", "Kommentar"]:
            if col not in df.columns:
                df[col] = ""

        df = df.append(ny_rad, ignore_index=True)
        sheet.clear()
        sheet.update([df.columns.tolist()] + df.astype(str).values.tolist())
        st.success("‚úÖ Raden sparades.")
    except Exception as e:
        st.error(f"‚ùå Misslyckades att spara: {e}")

def render_live_and_preview(cfg, rows_df):
    """Renderar aktuell scen och f√∂rhandsgranskning samt statistik."""
    base = _build_base(cfg)

    st.subheader("üìÜ N√§sta scen")
    st.write(f"Dagens datum: **{base['_rad_datum'].strftime('%Y-%m-%d')}**")

    preview = calc_row_values(
        base,
        base["_rad_datum"],
        cfg["fodelsedatum"],
        cfg["starttid"]
    )
    st.write("üîç F√∂rhandsgranskning:")
    st.dataframe(pd.DataFrame([preview]))

    try:
        stats = compute_stats(rows_df, cfg)
        st.subheader("üìä Statistik")
        for nyckel, v√§rde in stats.items():
            st.write(f"- {nyckel}: {v√§rde}")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Kunde inte ber√§kna statistik: {e}")

    return base, preview

def main():
    st.title("üé¨ Malin Produktionsapp")

    # Val av profil
    profilblad = skapa_koppling("Profil")
    profiler = profilblad.col_values(1)[1:]
    vald_profil = st.selectbox("V√§lj profil", profiler)
    if not vald_profil:
        st.stop()

    # L√§s inst√§llningar fr√•n profilens blad
    inst_df = skapa_df(vald_profil)
    inst√§llningar = inst_df.set_index("F√§lt")["V√§rde"].to_dict()
    st.session_state[CFG_KEY] = parse_inst√§llningar(inst√§llningar)
    CFG.update(st.session_state[CFG_KEY])

    # L√§s in befintlig data fr√•n profilspecifikt blad
    try:
        df = skapa_df(vald_profil + "_data")
        rows_df = pd.DataFrame(df)
    except Exception:
        rows_df = pd.DataFrame(columns=ALL_COLUMNS)

    # Visa livevy och f√∂rhandsgranskning
    base, preview = render_live_and_preview(CFG, rows_df)

    # Formul√§r: l√§gga till scen
    render_scenformul√§r(base, preview, rows_df, vald_profil + "_data")

if __name__ == "__main__":
    main()

# Extra: s√§kerst√§ll att r√§tt kolumner finns om vi l√§ser en tom sheet
def s√§kerst√§ll_kolumner(sheet_name):
    sheet = skapa_koppling(sheet_name)
    befintliga = sheet.row_values(1)
    om_n√•got_saknas = any(kol not in befintliga for kol in ALL_COLUMNS)
    if om_n√•got_saknas:
        sheet.clear()
        sheet.append_row(ALL_COLUMNS)

# Extra: placeholder f√∂r statistik om compute_stats finns
try:
    import statistik
    def visa_statistik(rows_df):
        st.subheader("üìä Statistik")
        if len(rows_df) > 0:
            stats = statistik.compute_stats(rows_df, CFG)
            for k, v in stats.items():
                st.markdown(f"- **{k}:** {v}")
except ImportError:
    def visa_statistik(rows_df):
        st.subheader("üìä Statistik")
        st.warning("Modulen statistik.py kunde inte importeras.")
