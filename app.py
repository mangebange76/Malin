import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import random
import gspread
from google.oauth2.service_account import Credentials

# Autentisering
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
gc = gspread.authorize(credentials)

SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"
sh = gc.open_by_url(SPREADSHEET_URL)

# Kolumner f√∂r databasen
DATA_COLUMNS = [
    "Datum", "Typ", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
    "Enkel vaginal", "Enkel anal", "Kompisar", "Pappans v√§nner",
    "Nils v√§nner", "Nils familj", "√ñvriga m√§n", "DT tid per man (sek)",
    "√Ñlskar med", "Sover med", "Nils sex", "Tid total (sek)", 
    "DT total tid (sek)", "Summa tid (sek)", "Summa tid (h)",
    "Prenumeranter", "Int√§kt total", "Int√§kt kvinna", 
    "Int√§kt m√§n", "Int√§kt kompisar"
]

def init_sheet(name, cols):
    try:
        worksheet = sh.worksheet(name)
    except:
        worksheet = sh.add_worksheet(title=name, rows="1000", cols="30")
        worksheet.update("A1", [cols])
    else:
        existing_cols = worksheet.row_values(1)
        if existing_cols != cols:
            worksheet.resize(rows=1)
            worksheet.update("A1", [cols])

def ladda_data():
    try:
        worksheet = sh.worksheet("Data")
        data = worksheet.get_all_records()
        df = pd.DataFrame(data)
    except:
        df = pd.DataFrame(columns=DATA_COLUMNS)
    return df

def spara_data(df):
    worksheet = sh.worksheet("Data")
    worksheet.clear()
    worksheet.update("A1", [df.columns.tolist()] + df.fillna("").astype(str).values.tolist())

INST_COLUMNS = ["Inst√§llning", "V√§rde", "Senast √§ndrad"]

def init_inst√§llningar():
    try:
        worksheet = sh.worksheet("Inst√§llningar")
    except:
        worksheet = sh.add_worksheet(title="Inst√§llningar", rows="100", cols="3")
        worksheet.update("A1", [INST_COLUMNS])
        standard = [
            ["Val per man (minuter)", "2", datetime.now().strftime("%Y-%m-%d")],
            ["DT tid per man (sek)", "15", datetime.now().strftime("%Y-%m-%d")],
            ["Kvinnans namn", "Malin", datetime.now().strftime("%Y-%m-%d")],
            ["Kvinnans f√∂delsedatum", "1984-03-26", datetime.now().strftime("%Y-%m-%d")],
            ["Startdatum", "2014-03-26", datetime.now().strftime("%Y-%m-%d")],
            ["Kompisar", "100", datetime.now().strftime("%Y-%m-%d")],
            ["Pappans v√§nner", "40", datetime.now().strftime("%Y-%m-%d")],
            ["Nils v√§nner", "30", datetime.now().strftime("%Y-%m-%d")],
            ["Nils familj", "20", datetime.now().strftime("%Y-%m-%d")],
        ]
        worksheet.update(f"A2:C{len(standard)+1}", standard)

def l√§s_inst√§llningar():
    worksheet = sh.worksheet("Inst√§llningar")
    data = worksheet.get_all_records()
    inst = {}
    for rad in data:
        val = str(rad["V√§rde"])
        try:
            inst[rad["Inst√§llning"]] = float(val.replace(",", "."))
        except:
            inst[rad["Inst√§llning"]] = val
    return inst

def spara_inst√§llning(nyckel, v√§rde):
    worksheet = sh.worksheet("Inst√§llningar")
    data = worksheet.get_all_records()
    df = pd.DataFrame(data)
    idag = datetime.now().strftime("%Y-%m-%d")
    if nyckel in df["Inst√§llning"].values:
        idx = df[df["Inst√§llning"] == nyckel].index[0]
        worksheet.update_cell(idx + 2, 2, str(v√§rde))
        worksheet.update_cell(idx + 2, 3, idag)
    else:
        worksheet.append_row([nyckel, str(v√§rde), idag])

def ber√§kna_√•lder(f√∂delsedatum, referensdatum):
    f√∂dd = datetime.strptime(f√∂delsedatum, "%Y-%m-%d")
    ref = datetime.strptime(referensdatum, "%Y-%m-%d")
    return ref.year - f√∂dd.year - ((ref.month, ref.day) < (f√∂dd.month, f√∂dd.day))

DATA_COLUMNS = [
    "Datum", "Typ", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
    "Enkel vaginal", "Enkel anal",
    "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj", "√ñvriga m√§n",
    "DT tid per man (sek)", "DT total tid (sek)",
    "√Ñlskar med", "Sover med", "Total tid (sek)", "Total tid (h)",
    "Prenumeranter", "Int√§kt ($)", "Kvinnans l√∂n ($)", "M√§ns l√∂n ($)", "Kompisars l√∂n ($)",
    "Nils sex"
]

def s√§kerst√§ll_kolumner(df):
    for kolumn in DATA_COLUMNS:
        if kolumn not in df.columns:
            df[kolumn] = ""
    return df[DATA_COLUMNS]

def spara_data(df):
    df = df.fillna("").astype(str)
    worksheet = sh.worksheet("Data")
    worksheet.clear()
    worksheet.update([df.columns.values.tolist()] + df.values.tolist())

def ladda_data():
    try:
        worksheet = sh.worksheet("Data")
        data = worksheet.get_all_records()
        if not data:
            return pd.DataFrame(columns=DATA_COLUMNS)
        df = pd.DataFrame(data)
        return s√§kerst√§ll_kolumner(df)
    except:
        return pd.DataFrame(columns=DATA_COLUMNS)

def n√§sta_datum(df, startdatum):
    if df.empty:
        return datetime.strptime(startdatum, "%Y-%m-%d").date()
    senaste = max(pd.to_datetime(df["Datum"], errors="coerce").dropna(), default=startdatum)
    return senaste.date() + timedelta(days=1)

def ber√§kna_tid_per_man(antal_m√§n, tid_per_man_min):
    return antal_m√§n * tid_per_man_min * 60  # sekunder

def ber√§kna_dt_tid(dt_tid_per_man, tot_m√§n):
    if tot_m√§n == 0 or dt_tid_per_man == 0:
        return 0
    pauser = (tot_m√§n - 1) * 2
    extrapauser = (tot_m√§n // 10) * 30
    return tot_m√§n * dt_tid_per_man + pauser + extrapauser

def ber√§kna_prenumeranter(rad):
    score = (
        int(rad.get("DP", 0)) * 1 +
        int(rad.get("DPP", 0)) * 2 +
        int(rad.get("DAP", 0)) * 2 +
        int(rad.get("TPA", 0)) * 4 +
        int(rad.get("TPP", 0)) * 4 +
        int(rad.get("TAP", 0)) * 6 +
        int(rad.get("Enkel vaginal", 0)) * 0.5 +
        int(rad.get("Enkel anal", 0)) * 0.5
    )
    return int(score)

def uppdatera_tid_och_int√§kt(df, inst):
    tid_per_man = float(inst.get("Tid per man (minuter)", 0))
    dt_tid_per_man = float(inst.get("DT tid per man (sek)", 0))
    start_index = 0

    for i, rad in df.iterrows():
        typ = rad.get("Typ", "")
        omg√•ng = df.loc[i]

        tot_m√§n = (
            int(omg√•ng.get("DP", 0)) * 2 +
            int(omg√•ng.get("DPP", 0)) * 3 +
            int(omg√•ng.get("DAP", 0)) * 3 +
            int(omg√•ng.get("TPA", 0)) * 3 +
            int(omg√•ng.get("TPP", 0)) * 3 +
            int(omg√•ng.get("TAP", 0)) * 3 +
            int(omg√•ng.get("Enkel vaginal", 0)) +
            int(omg√•ng.get("Enkel anal", 0)) +
            int(omg√•ng.get("Kompisar", 0)) +
            int(omg√•ng.get("Pappans v√§nner", 0)) +
            int(omg√•ng.get("Nils v√§nner", 0)) +
            int(omg√•ng.get("Nils familj", 0)) +
            int(omg√•ng.get("√ñvriga m√§n", 0))
        )

        total_tid = ber√§kna_tid_per_man(tot_m√§n, tid_per_man)
        dt_tid = ber√§kna_dt_tid(dt_tid_per_man, tot_m√§n)
        total_tid += dt_tid

        df.at[i, "DT total tid (sek)"] = int(dt_tid)
        df.at[i, "Total tid (sek)"] = int(total_tid)
        df.at[i, "Total tid (h)"] = round(total_tid / 3600, 2)

        if typ == "Scen":
            pren = ber√§kna_prenumeranter(omg√•ng)
            df.at[i, "Prenumeranter"] = pren
            df.at[i, "Int√§kt ($)"] = round(pren * 15, 2)
            df.at[i, "Kvinnans l√∂n ($)"] = 800
            m√§n_l√∂n = 200 * (
                int(omg√•ng.get("Pappans v√§nner", 0)) +
                int(omg√•ng.get("Nils v√§nner", 0)) +
                int(omg√•ng.get("Nils familj", 0)) +
                int(omg√•ng.get("√ñvriga m√§n", 0))
            )
            df.at[i, "M√§ns l√∂n ($)"] = m√§n_l√∂n

            kompisar_total = int(inst.get("Kompisar", 1))
            kvar = max(0, df.at[i, "Int√§kt ($)"] - 800 - m√§n_l√∂n)
            df.at[i, "Kompisars l√∂n ($)"] = round(kvar / kompisar_total, 2) if kompisar_total > 0 else 0
        else:
            df.at[i, "Prenumeranter"] = 0
            df.at[i, "Int√§kt ($)"] = 0
            df.at[i, "Kvinnans l√∂n ($)"] = 0
            df.at[i, "M√§ns l√∂n ($)"] = 0
            df.at[i, "Kompisars l√∂n ($)"] = 0

    return df

def main():
    df = ladda_data()
    inst = l√§s_inst√§llningar()

    df = s√§kerst√§ll_kolumner(df)
    df = l√§gg_till_datum(df, inst)
    df = uppdatera_tid_och_int√§kt(df, inst)

    st.title("üé¨ Malin Filmproduktion ‚Äì Scenplanering")

    with st.sidebar:
        st.header("Inst√§llningar")
        namn = st.text_input("Kvinnans namn", value=str(inst.get("Kvinnans namn", "")))
        f√∂dd = st.date_input("F√∂delsedatum", value=pd.to_datetime(inst.get("F√∂delsedatum", "1984-03-26")))
        startdatum = st.date_input("Startdatum (f√∂rsta scen)", value=pd.to_datetime(inst.get("Startdatum", "2014-03-26")))

        spara_inst√§llning("Kvinnans namn", namn)
        spara_inst√§llning("F√∂delsedatum", f√∂dd.strftime("%Y-%m-%d"))
        spara_inst√§llning("Startdatum", startdatum.strftime("%Y-%m-%d"))

        st.divider()
        for f√§lt in [
            "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj",
            "Tid per man (minuter)", "DT tid per man (sek)"
        ]:
            val = st.number_input(f√§lt, value=float(inst.get(f√§lt, 0)), min_value=0.0, step=1.0)
            spara_inst√§llning(f√§lt, val)

    st.subheader("L√§gg till scen eller vila")

    with st.form("l√§gg_till"):
        typ = st.selectbox("Typ", ["Scen", "Vila inspelningsplats", "Vilovecka hemma"])
        dp = st.number_input("DP", min_value=0, step=1)
        dpp = st.number_input("DPP", min_value=0, step=1)
        dap = st.number_input("DAP", min_value=0, step=1)
        tpa = st.number_input("TPA", min_value=0, step=1)
        tpp = st.number_input("TPP", min_value=0, step=1)
        tap = st.number_input("TAP", min_value=0, step=1)
        enkel_vag = st.number_input("Enkel vaginal", min_value=0, step=1)
        enkel_anal = st.number_input("Enkel anal", min_value=0, step=1)

        komp = st.number_input("Kompisar", min_value=0, step=1, max_value=int(inst.get("Kompisar", 999)))
        pappans = st.number_input("Pappans v√§nner", min_value=0, step=1, max_value=int(inst.get("Pappans v√§nner", 999)))
        nils_v = st.number_input("Nils v√§nner", min_value=0, step=1, max_value=int(inst.get("Nils v√§nner", 999)))
        nils_f = st.number_input("Nils familj", min_value=0, step=1, max_value=int(inst.get("Nils familj", 999)))
        ov = st.number_input("√ñvriga m√§n", min_value=0, step=1)

        √§lskar = st.number_input("Antal √§lskar med", min_value=0, step=1)
        sover = st.number_input("Antal sover med", min_value=0, step=1)

        dagar = st.number_input("Antal vilodagar (g√§ller bara vid vila)", min_value=1, step=1)
        submit = st.form_submit_button("L√§gg till")

    if submit:
        from random import randint

        nya_rader = []
        senaste_datum = pd.to_datetime(df["Datum"].max()) if not df.empty else pd.to_datetime(inst.get("Startdatum"))
        nils_maxsex = 2 if typ == "Vilovecka hemma" else 0
        nils_sextillf√§llen = [0] * 7
        if typ == "Vilovecka hemma":
            tillf√§llen = sorted(randint(0, 6) for _ in range(nils_maxsex))
            for i in tillf√§llen:
                nils_sextillf√§llen[i] = 1

        antal = 7 if typ == "Vilovecka hemma" else int(dagar)

        for i in range(antal):
            datum = senaste_datum + pd.Timedelta(days=1)
            senaste_datum = datum
            rad = {
                "Datum": datum.strftime("%Y-%m-%d"),
                "Typ": typ,
                "DP": dp,
                "DPP": dpp,
                "DAP": dap,
                "TPA": tpa,
                "TPP": tpp,
                "TAP": tap,
                "Enkel vaginal": enkel_vag,
                "Enkel anal": enkel_anal,
                "Kompisar": komp,
                "Pappans v√§nner": pappans,
                "Nils v√§nner": nils_v,
                "Nils familj": nils_f,
                "√ñvriga m√§n": ov,
                "Antal √§lskar med": √§lskar * 7 if typ == "Vilovecka hemma" else √§lskar,
                "Antal sover med": sover * 7 if typ == "Vilovecka hemma" else sover,
                "Nils sex": nils_sextillf√§llen[i] if typ == "Vilovecka hemma" else 0
            }
            nya_rader.append(rad)

        df = pd.concat([df, pd.DataFrame(nya_rader)], ignore_index=True)
        spara_data(df)
        st.rerun()

    st.subheader("üìä Statistik")

    tot_m√§n = df[["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj", "√ñvriga m√§n"]].sum().sum()
    tot_rader = len(df)
    kompisar = int(inst.get("Kompisar", 1))
    nils_fam = int(inst.get("Nils familj", 1))

    st.write(f"üë© {inst.get('Kvinnans namn')} ‚Äì √Ölder vid sista scen: {ber√§kna_√•lder(inst)} √•r")
    st.write(f"Totalt antal rader: {tot_rader}")
    st.write(f"Totalt antal m√§n (inkl. alla grupper): {tot_m√§n}")
    st.write(f"Snitt per scen: {round(tot_m√§n / tot_rader, 2) if tot_rader else 0}")
    st.write(f"√Ñlskat: {int(df['Antal √§lskar med'].sum())}, Snitt per man: {round(df['Antal √§lskar med'].sum() / kompisar, 2) if kompisar else 0}")
    st.write(f"Sovit med: {int(df['Antal sover med'].sum())}, Snitt per Nils familjemedlem: {round(df['Antal sover med'].sum() / nils_fam, 2) if nils_fam else 0}")

    st.dataframe(df.sort_values("Datum"))
