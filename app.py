import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
import random

# Autentisera Google Sheets
def auth_gspread():
    scope = ["https://spreadsheets.google.com/feeds",
             "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
    client = gspread.authorize(creds)
    return client

# Ladda data och s√§kerst√§ll rubriker
def load_data():
    client = auth_gspread()
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")

    headers = [
        "Datum", "M√§n", "F", "R", "Dm", "Df", "Dr", "3f", "3r", "3p",
        "Tid s", "Tid d", "Tid t", "Vila", "√Ñlskar", "√Ñlsk tid", "Sover med",
        "Jobb", "Grannar", "Tjej PojkV", "Nils Fam", "Svarta", "DeepT", "Grabbar",
        "Sekunder", "Varv",
        # Ber√§knade f√§lt nedan, de kan ligga i sheet men r√§knas i kod
        "K√§nner", "Jobb 2", "Grannar 2", "Tjej PojkV 2", "Nils Fam 2", "Totalt m√§n",
        "Summa singel", "Summa dubbel", "Summa trippel", "Summa vila", "Summa tid",
        "Tid kille", "Suger", "Filmer", "Int√§kter", "Malin l√∂n", "F√∂retag l√∂n",
        "V√§nner l√∂n", "H√•rdhet", "Snitt", "Total tid", "Tid kille DT", "Runk"
    ]

    current = worksheet.row_values(1)
    if current != headers:
        worksheet.resize(rows=1)
        worksheet.append_row(headers)

    df = pd.DataFrame(worksheet.get_all_records())
    return worksheet, df

# Uppdatera celler i en rad med dictionary {column_name: value}
def update_cells(worksheet, row_idx, updates):
    headers = worksheet.row_values(1)
    cells = []
    for col_name, val in updates.items():
        if col_name in headers:
            col_idx = headers.index(col_name) + 1
            cell = gspread.Cell(row_idx, col_idx, val)
            cells.append(cell)
    if cells:
        worksheet.update_cells(cells)

# L√§gg till rad i Google Sheet
def append_row(row_dict):
    client = auth_gspread()
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")
    headers = worksheet.row_values(1)
    row = [row_dict.get(h, 0) for h in headers]
    worksheet.append_row(row)

# Ber√§kna maxv√§rden f√∂r jobb 2 etc
def get_max_values(df):
    max_values = {}
    for col in ["Jobb", "Grannar", "Tjej PojkV", "Nils Fam"]:
        if col in df.columns and not df[col].empty:
            max_values[col + " 2"] = df[col].max()
        else:
            max_values[col + " 2"] = 0
    if all(x in df.columns for x in ["Jobb", "Grannar", "Tjej PojkV", "Nils Fam"]):
        df["K√§nner"] = df["Jobb"] + df["Grannar"] + df["Tjej PojkV"] + df["Nils Fam"]
        max_values["K√§nner 2"] = df["K√§nner"].max() if not df["K√§nner"].empty else 0
    else:
        max_values["K√§nner 2"] = 0
    return max_values

# Ber√§kna alla f√§lt enligt regler
def calculate_all(df):
    # Om df tom, returnera
    if df.empty:
        return df

    max_vals = get_max_values(df)

    # K√§nner = Jobb + Grannar + Tjej PojkV + Nils Fam
    df["K√§nner"] = df.get("Jobb", 0) + df.get("Grannar", 0) + df.get("Tjej PojkV", 0) + df.get("Nils Fam", 0)

    # Jobb 2, Grannar 2, Tjej PojkV 2, Nils Fam 2 (maxv√§rden)
    df["Jobb 2"] = max_vals["Jobb 2"]
    df["Grannar 2"] = max_vals["Grannar 2"]
    df["Tjej PojkV 2"] = max_vals["Tjej PojkV 2"]
    df["Nils Fam 2"] = max_vals["Nils Fam 2"]

    # Totalt m√§n
    df["Totalt m√§n"] = df["M√§n"] + df["K√§nner"]

    # Summa singel = (Tid s + Vila) * Totalt m√§n
    df["Summa singel"] = (df["Tid s"] + df["Vila"]) * df["Totalt m√§n"]

    # Summa dubbel = ((Tid d + Vila) + 9) * (Dm + Df + Dr)
    df["Summa dubbel"] = ((df["Tid d"] + df["Vila"]) + 9) * (df["Dm"] + df["Df"] + df["Dr"])

    # Summa trippel = ((Tid t + Vila) + 15) * (TPP + TAP + TPA)
    df["Summa trippel"] = ((df["Tid t"] + df["Vila"]) + 15) * (df["3f"] + df["3r"] + df["3p"])

    # Summa vila = (Totalt m√§n * Vila) + (Dm+Df+Dr)*(Vila+7) + (TPP+TAP+TPA)*(Vila+15)
    df["Summa vila"] = (df["Totalt m√§n"] * df["Vila"]) + (df["Dm"] + df["Df"] + df["Dr"]) * (df["Vila"] + 7) + \
                      (df["3f"] + df["3r"] + df["3p"]) * (df["Vila"] + 15)

    # Summa tid = sum singel + sum dubbel + sum trippel + sum vila
    df["Summa tid"] = df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"] + df["Summa vila"]

    # Tid kille (sekunder) = Summa singel + 2*Summa dubbel + 3*Summa trippel delat p√• Totalt m√§n
    df["Tid kille"] = (df["Summa singel"] + 2 * df["Summa dubbel"] + 3 * df["Summa trippel"]) / df["Totalt m√§n"].replace(0, 1)

    # Suger = 60% av (Summa singel + Summa dubbel + Summa trippel) / Totalt m√§n
    df["Suger"] = 0.6 * (df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"]) / df["Totalt m√§n"].replace(0, 1)

    # L√§gg till suger i tid kille
    df["Tid kille"] += df["Suger"]

    # H√•rdhet ber√§kning
    def ber√§kna_h√•rdhet(row):
        h√•rdhet = 0
        if row["M√§n"] > 0:
            h√•rdhet += 1
            if row["Dm"] > 0:
                h√•rdhet += 2
            if row["Df"] > 0:
                h√•rdhet += 2
            if row["Dr"] > 0:
                h√•rdhet += 4
            if row["3f"] > 0:
                h√•rdhet += 4
            if row["3r"] > 0:
                h√•rdhet += 6
            if row["3p"] > 0:
                h√•rdhet += 5
        return h√•rdhet

    df["H√•rdhet"] = df.apply(ber√§kna_h√•rdhet, axis=1)

    # Filmer = (m√§n + f + r + dm*2 + df*2 + dr*3 + tpp*4 + tap*6 + tpa*5) * h√•rdhet
    df["Filmer"] = (
        df["M√§n"] + df["F"] + df["R"] + df["Dm"] * 2 + df["Df"] * 2 + df["Dr"] * 3 +
        df["3f"] * 4 + df["3r"] * 6 + df["3p"] * 5
    ) * df["H√•rdhet"]

    # Pris i dollar (fast)
    df["Pris"] = 19.99

    # Int√§kter = filmer * pris
    df["Int√§kter"] = df["Filmer"] * df["Pris"]

    # Malin l√∂n = 5% av int√§kter max 1500 USD
    df["Malin l√∂n"] = df["Int√§kter"] * 0.05
    df.loc[df["Malin l√∂n"] > 1500, "Malin l√∂n"] = 1500

    # F√∂retagets l√∂n = 40% av int√§kter
    df["F√∂retag l√∂n"] = df["Int√§kter"] * 0.4

    # V√§nner l√∂n = int√§kter - malin l√∂n - f√∂retagets l√∂n
    df["V√§nner l√∂n"] = df["Int√§kter"] - df["Malin l√∂n"] - df["F√∂retag l√∂n"]

    # Snitt = DeepT / Grabbar (ers√§tt 0 med 1 f√∂r division)
    df["Snitt"] = df["DeepT"] / df["Grabbar"].replace(0, 1)

    # Total tid = Snitt * (Sekunder * Varv)
    df["Total tid"] = df["Snitt"] * (df["Sekunder"] * df["Varv"])

    # Tid kille DT = Total tid / Totalt m√§n
    df["Tid kille DT"] = df["Total tid"] / df["Totalt m√§n"].replace(0, 1)

    # Runk = 60% av Total tid / Totalt m√§n
    df["Runk"] = 0.6 * df["Total tid"] / df["Totalt m√§n"].replace(0, 1)

    # L√§gg till runk till tid kille
    df["Tid kille"] += df["Runk"]

    return df

# Skapa n√§sta datum
def n√§sta_datum(df):
    if df.empty or "Datum" not in df.columns:
        return datetime.today().date()
    try:
        senaste = pd.to_datetime(df["Datum"], errors="coerce").dropna().max()
        return (senaste + timedelta(days=1)).date()
    except Exception:
        return datetime.today().date()

# L√§gg till ny rad via formul√§r
def inmatning(df):
    st.header("‚ûï L√§gg till ny rad")
    with st.form("form_ny_rad"):
        ny_rad = {}
        f√§lt = [
            "M√§n", "F", "R", "Dm", "Df", "Dr", "3f", "3r", "3p",
            "Tid s", "Tid d", "Tid t", "Vila", "√Ñlskar", "√Ñlsk tid",
            "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils Fam",
            "Svarta", "DeepT", "Grabbar", "Sekunder", "Varv"
        ]
        for f in f√§lt:
            ny_rad[f] = st.number_input(f, min_value=0, step=1)
        ny_rad["Datum"] = n√§sta_datum(df).isoformat()
        submitted = st.form_submit_button("Spara")
        if submitted:
            append_row(ny_rad)
            st.success("‚úÖ Ny rad sparad. Ladda om appen f√∂r att se uppdatering.")

# Vilodag
def vilodag(df, jobb=True):
    ny_rad = {k:0 for k in [
        "M√§n", "F", "R", "Dm", "Df", "Dr", "3f", "3r", "3p",
        "Tid s", "Tid d", "Tid t", "Vila", "Sover med",
        "Jobb", "Grannar", "Tjej PojkV", "Nils Fam", "Svarta",
        "DeepT", "Grabbar", "Sekunder", "Varv", "√Ñlskar", "√Ñlsk tid"
    ]}
    ny_rad["Datum"] = n√§sta_datum(df).isoformat()
    if jobb:
        ny_rad.update({
            "√Ñlskar": 12,
            "Sover med": 1,
            "Jobb": df["Jobb"].max() if "Jobb" in df else 0,
            "Grannar": df["Grannar"].max() if "Grannar" in df else 0,
            "Tjej PojkV": df["Tjej PojkV"].max() if "Tjej PojkV" in df else 0,
            "Nils Fam": df["Nils Fam"].max() if "Nils Fam" in df else 0,
        })
    else:
        ny_rad.update({
            "√Ñlskar": 6,
            "Sover med": 0,
            "Jobb": 3,
            "Grannar": 3,
            "Tjej PojkV": 3,
            "Nils Fam": 3,
        })
    append_row(ny_rad)
    st.success(f"‚úÖ Vilodag {'jobb' if jobb else 'hemma'} tillagd.")

# Kopiera tv√• rader med h√∂gst Totalt m√§n
def kopiera_max(df):
    if df.empty:
        st.warning("Ingen data att kopiera.")
        return
    df["K√§nner"] = df["Jobb"] + df["Grannar"] + df["Tjej PojkV"] + df["Nils Fam"]
    df["Totalt m√§n"] = df["M√§n"] + df["K√§nner"]
    top2 = df.sort_values("Totalt m√§n", ascending=False).head(2)
    for _, rad in top2.iterrows():
        ny = rad.to_dict()
        ny["Datum"] = n√§sta_datum(df).isoformat()
        append_row(ny)
    st.success("‚úÖ Tv√• rader kopierades fr√•n h√∂gsta Totalt m√§n.")

# Presentation: Huvudvy
def huvudvy(df):
    st.header("üìä Huvudvy")
    if df.empty:
        st.warning("Ingen data att visa.")
        return

    totalt_m√§n = df["Totalt m√§n"].sum()
    k√§nner_2 = df["K√§nner 2"].max() if "K√§nner 2" in df else 0
    jobb_2 = df["Jobb 2"].max() if "Jobb 2" in df else 0
    grannar_2 = df["Grannar 2"].max() if "Grannar 2" in df else 0
    tjej_pojkv_2 = df["Tjej PojkV 2"].max() if "Tjej PojkV 2" in df else 0
    nils_fam_2 = df["Nils Fam 2"].max() if "Nils Fam 2" in df else 0

    snitt_film = (totalt_m√§n + df["K√§nner"].sum()) / max(1, len(df[df["M√§n"] > 0]))
    gangb = df["K√§nner"].sum() / max(1, k√§nner_2)
    √§lskat = df["√Ñlskar"].sum() / max(1, k√§nner_2)
    sover_med = df["Sover med"].sum() / max(1, nils_fam_2)
    vita = (totalt_m√§n - df["Svarta"].sum()) / max(1, totalt_m√§n) * 100
    svarta = df["Svarta"].sum() / max(1, totalt_m√§n) * 100

    filmer_summa = df["Filmer"].sum()
    int√§kter_summa = df["Int√§kter"].sum()
    malin_l√∂n_summa = df["Malin l√∂n"].sum()
    f√∂retag_l√∂n_summa = df["F√∂retag l√∂n"].sum()
    v√§nner_l√∂n_summa = df["V√§nner l√∂n"].sum() / max(1, k√§nner_2)

    st.write(f"**Totalt antal m√§n:** {totalt_m√§n}")
    st.write(f"**K√§nner (Kompisar):** {k√§nner_2}")
    st.write(f"**Jobb:** {jobb_2}")
    st.write(f"**Grannar:** {grannar_2}")
    st.write(f"**Tjej PojkV:** {tjej_pojkv_2}")
    st.write(f"**Nils Fam:** {nils_fam_2}")
    st.write(f"**Snitt film:** {snitt_film:.2f}")
    st.write(f"**GangB:** {gangb:.2f}")
    st.write(f"**√Ñlskat:** {√§lskat:.2f}")
    st.write(f"**Sover med:** {sover_med:.2f}")
    st.write(f"**Vita (%):** {vita:.1f}%")
    st.write(f"**Svarta (%):** {svarta:.1f}%")
    st.write(f"**Filmer (totalt):** {filmer_summa}")
    st.write(f"**Int√§kter (totalt):** ${int√§kter_summa:.2f}")
    st.write(f"**Malin l√∂n (totalt):** ${malin_l√∂n_summa:.2f}")
    st.write(f"**F√∂retagets l√∂n (totalt):** ${f√∂retag_l√∂n_summa:.2f}")
    st.write(f"**V√§nner l√∂n (per kompis):**
