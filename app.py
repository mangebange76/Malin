import streamlit as st
import pandas as pd
import numpy as np
import random
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread_dataframe import get_as_dataframe, set_with_dataframe

# === Google Sheets Setup ===
import toml
secrets = toml.load(".streamlit/secrets.toml")
SHEET_URL = secrets["SHEET_URL"]
GOOGLE_CREDENTIALS = secrets["GOOGLE_CREDENTIALS"]

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDENTIALS, scope)
gc = gspread.authorize(credentials)
sh = gc.open_by_url(SHEET_URL)
worksheet = sh.worksheet("Blad1")

# === Kolumnlista ===
ALL_COLUMNS = [
    "Dag", "Veckodag", "Nya killar", "Fitta", "R√∂v", "DM", "DF", "DA", "TPP", "TAP", "TP",
    "√Ñlskar", "Sover med", "Tid S", "Tid D", "Tid T", "Vila", "Jobb", "Grannar", "Tjej PojkV", "Nils fam",
    "Svarta", "DeepT", "Sekunder", "Vila mun", "Varv",
    # Ber√§knade
    "K√§nner", "M√§n", "Summa singel", "Summa dubbel", "Summa trippel",
    "Snitt", "Tid mun", "Summa tid", "Suger", "Tid kille", "H√•rdhet", "Filmer",
    "Pris", "Int√§kter", "Malin l√∂n", "Kompisar", "Aktiekurs"
]

def load_data():
    df = get_as_dataframe(worksheet, evaluate_formulas=True)
    df.fillna(0, inplace=True)

    for col in ALL_COLUMNS:
        if col not in df.columns:
            df[col] = 0

    df = df[ALL_COLUMNS]  # S√§kerst√§ll r√§tt ordning
    df["Dag"] = df["Dag"].astype(int)
    return df

def update_sheet(df):
    df_to_save = df[ALL_COLUMNS]
    set_with_dataframe(worksheet, df_to_save, include_index=False)

def ensure_columns_exist(df):
    for col in ALL_COLUMNS:
        if col not in df.columns:
            df[col] = 0
    return df

def hamta_maxvarden(df):
    rad_0 = df[df["Dag"] == 0]
    if rad_0.empty:
        return {"Jobb": 0, "Grannar": 0, "Tjej PojkV": 0, "Nils fam": 0}
    rad_0 = rad_0.iloc[0]
    return {
        "Jobb": rad_0.get("Jobb", 0),
        "Grannar": rad_0.get("Grannar", 0),
        "Tjej PojkV": rad_0.get("Tjej PojkV", 0),
        "Nils fam": rad_0.get("Nils fam", 0)
    }

def skapa_basrad(df):
    dag = df["Dag"].max() + 1
    rad = {k: 0 for k in ALL_COLUMNS}
    rad["Dag"] = dag
    return rad, dag

def slumpa_film_liten(maxv√§rden):
    return {
        "Nya killar": random.randint(10, 50),
        "Fitta": random.randint(3, 12),
        "R√∂v": random.randint(3, 12),
        "Dm": random.randint(10, 25),
        "Df": random.randint(10, 25),
        "Da": 0,
        "TPP": 0,
        "Tap": 0,
        "TP": 0,
        "√Ñlskar": 12,
        "Sover med": 1,
        "Tid s": 60,
        "Tid d": 70,
        "Tid trippel": 80,
        "Vila": 7,
        "Jobb": random.randint(3, maxv√§rden["Jobb"]),
        "Grannar": random.randint(3, maxv√§rden["Grannar"]),
        "Tjej PojkV": random.randint(3, maxv√§rden["Tjej PojkV"]),
        "Nils fam": random.randint(3, maxv√§rden["Nils fam"]),
        "Svarta": random.choice([0, random.randint(10, 50)]),
    }

def slumpa_film_stor(maxv√§rden):
    return {
        "Nya killar": random.randint(60, 200),
        "Fitta": random.randint(10, 30),
        "R√∂v": random.randint(10, 30),
        "Dm": random.randint(50, 100),
        "Df": random.randint(50, 100),
        "Da": random.randint(50, 100),
        "TPP": random.randint(30, 80),
        "Tap": random.randint(30, 80),
        "TP": random.randint(30, 80),
        "√Ñlskar": 12,
        "Sover med": 1,
        "Tid s": 60,
        "Tid d": 70,
        "Tid trippel": 80,
        "Vila": 7,
        "Jobb": random.randint(3, maxv√§rden["Jobb"]),
        "Grannar": random.randint(3, maxv√§rden["Grannar"]),
        "Tjej PojkV": random.randint(3, maxv√§rden["Tjej PojkV"]),
        "Nils fam": random.randint(3, maxv√§rden["Nils fam"]),
        "Svarta": random.choice([0, random.randint(60, 200)]),
    }

def vila_jobb(maxv√§rden):
    return {
        "√Ñlskar": 12,
        "Sover med": 1,
        "Jobb": int(maxv√§rden["Jobb"] * 0.3),
        "Grannar": int(maxv√§rden["Grannar"] * 0.3),
        "Tjej PojkV": int(maxv√§rden["Tjej PojkV"] * 0.3),
        "Nils fam": int(maxv√§rden["Nils fam"] * 0.3),
    }

def vila_hemma(maxv√§rden):
    return {
        "√Ñlskar": 6,
        "Jobb": 5,
        "Grannar": 3,
        "Tjej PojkV": 3,
        "Nils fam": 5,
    }

def vila_helt():
    return {}

def knappfunktioner(df):
    maxv√§rden = hamta_maxvarden(df)

    def visa_och_spara(rad, dag):
        rad["K√§nner"] = rad.get("Jobb", 0) + rad.get("Grannar", 0) + rad.get("Tjej PojkV", 0) + rad.get("Nils fam", 0)
        rad["M√§n"] = rad.get("Nya killar", 0) + rad["K√§nner"]
        ny_rad = visa_redigeringsformul√§r(rad, dag)
        if ny_rad:
            df = spara_redigerad_rad(df, ny_rad)
            df = visa_varningar(df)
        return df

    if st.button("üé≤ Slumpa Film liten"):
        rad, dag = skapa_basrad(df)
        rad.update(slumpa_film_liten(maxv√§rden))
        df = visa_och_spara(rad, dag)

    if st.button("üé≤ Slumpa Film stor"):
        rad, dag = skapa_basrad(df)
        rad.update(slumpa_film_stor(maxv√§rden))
        df = visa_och_spara(rad, dag)

    if st.button("üìã Kopiera st√∂rsta raden (nya killar)"):
        if not df.empty:
            st√∂rsta = df[df["Nya killar"] == df["Nya killar"].max()].iloc[0].to_dict()
            rad, dag = skapa_basrad(df)
            rad.update(st√∂rsta)
            df = visa_och_spara(rad, dag)

    if st.button("üè¢ Vila jobb"):
        rad, dag = skapa_basrad(df)
        rad.update(vila_jobb(maxv√§rden))
        df = visa_och_spara(rad, dag)

    if st.button("üõãÔ∏è Vila hemma"):
        rad, dag = skapa_basrad(df)
        rad.update(vila_hemma(maxv√§rden))
        df = visa_och_spara(rad, dag)

    if st.button("üí§ Vila helt"):
        rad, dag = skapa_basrad(df)
        rad.update(vila_helt())
        df = visa_och_spara(rad, dag)

    return df

def update_calculations(df):
    for i, rad in df.iterrows():
        dag = rad["Dag"]

        if dag == 0:
            continue

        rad["Veckodag"] = ["L√∂r", "S√∂n", "M√•n", "Tis", "Ons", "Tor", "Fre"][(dag - 1) % 7]

        # Maxv√§rden fr√•n Dag 0
        maxrad = df[df["Dag"] == 0]
        max_job = int(maxrad["Jobb"].max()) if not maxrad.empty else 0
        max_grannar = int(maxrad["Grannar"].max()) if not maxrad.empty else 0
        max_tjej = int(maxrad["Tjej PojkV"].max()) if not maxrad.empty else 0
        max_nils = int(maxrad["Nils fam"].max()) if not maxrad.empty else 0
        tot_v√§nner = max_job + max_grannar + max_tjej + max_nils

        # Inmatade f√§lt
        nya = int(rad["Nya killar"])
        √§lskar = int(rad["√Ñlskar"])
        sover = int(rad["Sover med"])
        tid_s = int(rad["Tid S"])
        tid_d = int(rad["Tid D"])
        tid_t = int(rad["Tid T"])
        vila = int(rad["Vila"])
        dm, df_, da = int(rad["DM"]), int(rad["DF"]), int(rad["DA"])
        tpp, tap, tp = int(rad["TPP"]), int(rad["TAP"]), int(rad["TP"])
        jobb, grannar, tjej, nils = int(rad["Jobb"]), int(rad["Grannar"]), int(rad["Tjej PojkV"]), int(rad["Nils fam"])
        svarta = int(rad["Svarta"])

        k√§nner = jobb + grannar + tjej + nils
        m√§n = nya + k√§nner
        rad["K√§nner"] = k√§nner
        rad["M√§n"] = m√§n

        # Summa singel/dubbel/trippel
        summa_singel = (tid_s + vila) * m√§n
        summa_dubbel = ((tid_d + vila) + 9) * (dm + df_ + da)
        summa_trippel = ((tid_t + vila) + 15) * (tpp + tap + tp)

        rad["Summa singel"] = summa_singel
        rad["Summa dubbel"] = summa_dubbel
        rad["Summa trippel"] = summa_trippel

        # Tid mun
        deept = int(rad["DeepT"])
        sek = int(rad["Sekunder"])
        vila_mun = int(rad["Vila mun"])
        varv = int(rad["Varv"])
        snitt = deept / m√§n if m√§n else 0
        tid_mun = (snitt * sek + vila_mun) * varv

        rad["Snitt"] = snitt
        rad["Tid mun"] = tid_mun

        # Summa tid
        summa_tid = summa_singel + summa_dubbel + summa_trippel + (√§lskar * 1800) + tid_mun + (sover * 1800)
        if nya == 0 and √§lskar == 0 and sover == 0:
            if k√§nner > 0:
                summa_tid = 10800  # 3h
        rad["Summa tid"] = round(summa_tid / 3600, 2)  # timmar

        # Suger
        total_m√§n = m√§n if m√§n > 0 else 1
        suger = 0.6 * (summa_singel + summa_dubbel + summa_trippel) / total_m√§n
        rad["Suger"] = suger / 60  # minuter

        # Tid kille
        tid_kille_dt = tid_mun / total_m√§n if total_m√§n else 0
        runk = (summa_tid * 0.6) / total_m√§n if total_m√§n else 0
        tid_kille = tid_s + (tid_d * 2) + (tid_t * 3) + (suger / 60) + (tid_kille_dt / 60) + (runk / 60) + (tid_mun / 60)
        rad["Tid kille"] = round(tid_kille, 2)

        # H√•rdhet
        h√•rdhet = 0
        if nya > 0: h√•rdhet += 1
        if dm > 0: h√•rdhet += 2
        if df_ > 0: h√•rdhet += 3
        if da > 0: h√•rdhet += 4
        if tpp > 0: h√•rdhet += 5
        if tap > 0: h√•rdhet += 7
        if tp > 0: h√•rdhet += 6
        rad["H√•rdhet"] = h√•rdhet

        # Filmer
        filmer = (m√§n + rad["Fitta"] + rad["R√∂v"] + dm * 2 + df_ * 2 + da * 3 + tpp * 4 + tap * 6 + tp * 5) * h√•rdhet
        rad["Filmer"] = filmer

        # Int√§kter
        rad["Pris"] = 39.99
        rad["Int√§kter"] = round(filmer * 39.99, 2)

        # Malins l√∂n
        rad["Malin l√∂n"] = min(700, rad["Int√§kter"] * 0.01)

        # Kompisar
        v√§nner = tot_v√§nner if tot_v√§nner > 0 else 1
        rad["Kompisar"] = round((rad["Int√§kter"] - rad["Malin l√∂n"]) / v√§nner, 2)

        df.iloc[i] = rad[ALL_COLUMNS].values  # ‚úÖ S√§kra kolumnordning och datatyper

    return df

def update_calculations(df):
    maxrad = df[df["Dag"] == 0].copy()
    maxv√§rden = {
        "Jobb": maxrad["Jobb"].values[0] if not maxrad.empty else 0,
        "Grannar": maxrad["Grannar"].values[0] if not maxrad.empty else 0,
        "Tjej PojkV": maxrad["Tjej PojkV"].values[0] if not maxrad.empty else 0,
        "Nils fam": maxrad["Nils fam"].values[0] if not maxrad.empty else 0
    }
    v√§nner = sum(maxv√§rden.values())
    aktiekurs = df["Aktiekurs"].iloc[-1] if "Aktiekurs" in df.columns and not df.empty else 40.0

    for i, rad in df.iterrows():
        if rad["Dag"] == 0:
            continue

        k√§nner = rad.get("Jobb", 0) + rad.get("Grannar", 0) + rad.get("Tjej PojkV", 0) + rad.get("Nils fam", 0)
        m√§n = rad.get("Nya killar", 0) + k√§nner

        rad["K√§nner"] = k√§nner
        rad["M√§n"] = m√§n

        # Summa tider
        singel = rad.get("Tid s", 0) * m√§n / 3600
        dubbel = rad.get("Tid d", 0) * (rad.get("Dm", 0) + rad.get("Df", 0) + rad.get("Da", 0)) / 3600
        trippel = rad.get("Tid trippel", 0) * (rad.get("TPP", 0) + rad.get("Tap", 0) + rad.get("TP", 0)) / 3600
        tid_mun = ((rad.get("DeepT", 0) / m√§n) * rad.get("Sekunder", 0) + rad.get("Vila mun", 0)) * rad.get("Varv", 0) / 3600 if m√§n > 0 else 0
        √§lskar_tid = rad.get("√Ñlskar", 0) * 0.5  # 30 min per √§lskar
        sover_tid = rad.get("Sover med", 0) * 0.5  # 30 min per person

        # Tid f√∂r enbart kompisar
        if m√§n == k√§nner and m√§n > 0 and rad.get("Nya killar", 0) == 0 and rad.get("√Ñlskar", 0) == 0 and rad.get("Sover med", 0) == 0:
            total_tid = 3
        else:
            total_tid = singel + dubbel + trippel + tid_mun + √§lskar_tid + sover_tid

        rad["Summa singel"] = singel
        rad["Summa dubbel"] = dubbel
        rad["Summa trippel"] = trippel
        rad["Tid mun"] = tid_mun
        rad["Summa tid"] = total_tid

        # Ber√§kningar
        snitt = (rad["DeepT"] / m√§n) if m√§n > 0 else 0
        h√•rdhet = 0
        h√•rdhet += 1 if rad.get("Nya killar", 0) > 0 else 0
        h√•rdhet += 2 if rad.get("Dm", 0) > 0 else 0
        h√•rdhet += 3 if rad.get("Df", 0) > 0 else 0
        h√•rdhet += 4 if rad.get("Da", 0) > 0 else 0
        h√•rdhet += 5 if rad.get("TPP", 0) > 0 else 0
        h√•rdhet += 7 if rad.get("Tap", 0) > 0 else 0
        h√•rdhet += 6 if rad.get("TP", 0) > 0 else 0

        tid_kille_dt = total_tid / m√§n if m√§n > 0 else 0
        runk = (total_tid * 0.6) / m√§n if m√§n > 0 else 0
        suger = 0.6 * (singel + dubbel + trippel) / m√§n if m√§n > 0 else 0

        tid_kille = rad.get("Tid s", 0) + rad.get("Tid d", 0) * 2 + rad.get("Tid trippel", 0) * 3
        tid_kille = tid_kille / 60 + suger + tid_kille_dt + runk + rad.get("Tid mun", 0) * 60 / 60

        filmer = (m√§n + rad.get("Fitta", 0) + rad.get("R√∂v", 0) +
                  rad.get("Dm", 0) * 2 + rad.get("Df", 0) * 2 + rad.get("Da", 0) * 3 +
                  rad.get("TPP", 0) * 4 + rad.get("Tap", 0) * 6 + rad.get("TP", 0) * 5) * h√•rdhet

        int√§kter = filmer * 39.99
        malin_l√∂n = min(700, int√§kter * 0.01)
        kompisar = ((int√§kter - malin_l√∂n) / v√§nner) if v√§nner > 0 else 0

        rad["Snitt"] = snitt
        rad["Suger"] = suger
        rad["Tid kille dt"] = tid_kille_dt
        rad["Runk"] = runk
        rad["Tid kille"] = tid_kille
        rad["H√•rdhet"] = h√•rdhet
        rad["Filmer"] = filmer
        rad["Int√§kter"] = int√§kter
        rad["Malin l√∂n"] = malin_l√∂n
        rad["Kompisar"] = kompisar

        df.iloc[i] = rad

    # Uppdatera aktiekurs: beroende p√• prestation (ex. h√•rdhet √∂ver snitt ‚Üí upp)
    if "Aktiekurs" not in df.columns:
        df["Aktiekurs"] = 40.0

    historik = df[df["Dag"] > 0]
    if not historik.empty:
        snitt_h√•rdhet = historik["H√•rdhet"].mean()
        snitt_m√§n = historik["M√§n"].mean()
        senaste = df.iloc[-1]
        prest = 0
        if senaste["H√•rdhet"] > snitt_h√•rdhet:
            prest += 1
        if senaste["Da"] > historik["Da"].mean():
            prest += 1
        if senaste["TPP"] > historik["TPP"].mean():
            prest += 1
        if senaste["Tap"] > historik["Tap"].mean():
            prest += 1
        if senaste["TP"] > historik["TP"].mean():
            prest += 1
        if senaste["M√§n"] > snitt_m√§n:
            prest += 1
        if senaste["Tid mun"] > historik["Tid mun"].mean():
            prest += 1
        procent = random.randint(3, 10)
        riktning = 1 if prest >= 4 else -1
        ny_kurs = aktiekurs * (1 + riktning * procent / 100)
        df.at[df.index[-1], "Aktiekurs"] = round(ny_kurs, 2)

    return df

def visa_statistik(df):
    st.subheader("üìä Statistik")

    maxrad = df[df["Dag"] == 0]
    max_v√§nner = maxrad[["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]].sum().sum() if not maxrad.empty else 0
    sista_aktiekurs = df["Aktiekurs"].iloc[-1] if "Aktiekurs" in df.columns and not df.empty else 40.0

    filmer = df[df["Nya killar"] > 0]["Filmer"].sum()
    totalt_m√§n = df["Nya killar"].sum() + max_v√§nner
    √§lskat = df["√Ñlskar"].sum()
    sovit = df["Sover med"].sum()
    jobb = df["Jobb"].sum()
    grannar = df["Grannar"].sum()
    tjej = df["Tjej PojkV"].sum()
    nils = df["Nils fam"].sum()
    svarta = df["Svarta"].sum()
    vita = df["Nya killar"].sum() - svarta
    s√•lda_film = df["Filmer"].sum()
    int√§kter = df["Int√§kter"].sum()
    malin_l√∂n = df["Malin l√∂n"].sum()
    v√§nner_l√∂n = df["Kompisar"].sum()

    snitt_gb = totalt_m√§n / filmer if filmer > 0 else 0
    √§lskat_snitt = √§lskat / max_v√§nner if max_v√§nner > 0 else 0
    sovit_snitt = sovit / maxrad["Nils fam"].sum() if not maxrad.empty and maxrad["Nils fam"].sum() > 0 else 0
    svarta_procent = (svarta / df["Nya killar"].sum()) * 100 if df["Nya killar"].sum() > 0 else 0
    vita_procent = (vita / df["Nya killar"].sum()) * 100 if df["Nya killar"].sum() > 0 else 0

    rader_med_m√§n = df[(df["Nya killar"] > 0) | (df["√Ñlskar"] > 0) | (df["Sover med"] > 0) | (df["K√§nner"] > 0)]
    roi_n√§mnare = df["Nya killar"].sum() + df["√Ñlskar"].sum() + df["Sover med"].sum() + df["K√§nner"].sum()
    malin_roi = (malin_l√∂n / roi_n√§mnare) if roi_n√§mnare > 0 else 0

    kompisar_total = max_v√§nner
    kompisar_aktiev√§rde_total = 5000 * sista_aktiekurs
    kompisar_aktiev√§rde_per = round(kompisar_aktiev√§rde_total / kompisar_total, 2) if kompisar_total > 0 else 0

    # Extra summeringar
    v√§nner_gb = df["K√§nner"].sum() / max_v√§nner if max_v√§nner > 0 else 0
    kompisar_sum = √§lskat + v√§nner_gb
    familj_sum = kompisar_sum + sovit

    st.metric("üé¨ Filmer", int(filmer))
    st.metric("üë® Totalt antal m√§n", totalt_m√§n)
    st.metric("‚ù§Ô∏è √Ñlskat", int(√§lskat))
    st.metric("üò¥ Sovit med", int(sovit))
    st.metric("üíº Jobb", int(jobb))
    st.metric("üè° Grannar", int(grannar))
    st.metric("üíë Tjej PojkV", int(tjej))
    st.metric("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Nils familj", int(nils))
    st.metric("‚ö´ Svarta", int(svarta))
    st.metric("‚ö™ Vita", int(vita))
    st.metric("üéûÔ∏è S√•lda filmer", int(s√•lda_film))
    st.metric("üí∞ Int√§kter", f"{int√§kter:,.2f} USD")
    st.metric("üë© Malin l√∂n", f"{malin_l√∂n:,.2f} USD")
    st.metric("üë¨ V√§nners l√∂n", f"{v√§nner_l√∂n:,.2f} USD")
    st.metric("üìà Snitt GB", f"{snitt_gb:.2f}")
    st.metric("üìä √Ñlskat snitt / kompis", f"{√§lskat_snitt:.2f}")
    st.metric("üõå Sovit med / Nils fam", f"{sovit_snitt:.2f}")
    st.metric("‚ö´ Svarta i %", f"{svarta_procent:.2f}%")
    st.metric("‚ö™ Vita i %", f"{vita_procent:.2f}%")
    st.metric("üìà Malin ROI per man", f"{malin_roi:.2f} USD")
    st.metric("üìâ Kompisars aktiev√§rde", f"{kompisar_aktiev√§rde_total:,.2f} USD")
    st.metric("üë• Kompis aktie / person", f"{kompisar_aktiev√§rde_per:,.2f} USD")
    st.metric("üßÆ Kompisar (√§lskat + v√§nnerGB)", f"{kompisar_sum:.2f}")
    st.metric("üè† Familj (kompisar + sovit)", f"{familj_sum:.2f}")

def main():
    st.set_page_config(layout="wide")
    st.title("üé• Malins datasp√•rning")

    df = load_data()
    df = ensure_columns_exist(df)
    df = update_calculations(df)
    update_sheet(df)

    vyval = st.sidebar.radio("V√§lj vy", ["Ny rad", "Statistik"])

    if vyval == "Ny rad":
        st.subheader("‚ûï L√§gg till ny rad eller anv√§nd knapp")
        df = formul√§r_maxv√§rden(df)
        df = knappfunktioner(df)
        df = visa_redigeringsform(df)

    elif vyval == "Statistik":
        visa_statistik(df)

if __name__ == "__main__":
    main()
