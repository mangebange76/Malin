import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from random import sample, randint
from berakningar import process_l√§gg_till_rader

# Autentisering och Google Sheets-koppling
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
gc = gspread.authorize(credentials)

SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"
sh = gc.open_by_url(SPREADSHEET_URL)

# Kolumnnamn
DATA_COLUMNS = [
    "Datum", "Typ", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
    "Enkel vaginal", "Enkel anal",
    "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj", "√ñvriga m√§n",
    "√Ñlskar med", "Sover med", "Nils sex",
    "DT tid per man (sek)", "DT total tid (sek)",
    "Total tid (sek)", "Total tid (h)",
    "Prenumeranter", "Int√§kt ($)", "Kvinnans l√∂n ($)", "M√§ns l√∂n ($)", "Kompisars l√∂n ($)",
    "Minuter per kille", "Scenens l√§ngd (h)"
]

INST_COLUMNS = ["Inst√§llning", "V√§rde", "Senast √§ndrad"]

# Initiera datablad
def init_sheet(name, cols):
    try:
        worksheet = sh.worksheet(name)
    except:
        worksheet = sh.add_worksheet(title=name, rows="1000", cols="30")
        worksheet.update("A1", [cols])
    else:
        existing_cols = worksheet.row_values(1)
        if existing_cols != cols:
            worksheet.resize(rows=1)
            worksheet.update("A1", [cols])

# Initiera inst√§llningar
def init_inst√§llningar():
    try:
        worksheet = sh.worksheet("Inst√§llningar")
    except:
        worksheet = sh.add_worksheet(title="Inst√§llningar", rows="100", cols="3")
        worksheet.update("A1", [INST_COLUMNS])
        standard = [
            ["Kvinnans namn", "Malin", datetime.now().strftime("%Y-%m-%d")],
            ["F√∂delsedatum", "1984-03-26", datetime.now().strftime("%Y-%m-%d")],
            ["Startdatum", "2014-03-26", datetime.now().strftime("%Y-%m-%d")],
            ["Kompisar", "100", datetime.now().strftime("%Y-%m-%d")],
            ["Pappans v√§nner", "40", datetime.now().strftime("%Y-%m-%d")],
            ["Nils v√§nner", "30", datetime.now().strftime("%Y-%m-%d")],
            ["Nils familj", "20", datetime.now().strftime("%Y-%m-%d")]
        ]
        worksheet.update(f"A2:C{len(standard)+1}", standard)

# L√§s inst√§llningar fr√•n Google Sheets
def l√§s_inst√§llningar():
    worksheet = sh.worksheet("Inst√§llningar")
    data = worksheet.get_all_records()
    inst = {}
    for rad in data:
        val = str(rad["V√§rde"])
        try:
            inst[rad["Inst√§llning"]] = float(val.replace(",", "."))
        except:
            inst[rad["Inst√§llning"]] = val
    return inst

# Spara enskild inst√§llning
def spara_inst√§llning(nyckel, v√§rde):
    worksheet = sh.worksheet("Inst√§llningar")
    df = pd.DataFrame(worksheet.get_all_records())
    idag = datetime.now().strftime("%Y-%m-%d")
    if nyckel in df["Inst√§llning"].values:
        idx = df[df["Inst√§llning"] == nyckel].index[0]
        worksheet.update_cell(idx + 2, 2, str(v√§rde))
        worksheet.update_cell(idx + 2, 3, idag)
    else:
        worksheet.append_row([nyckel, str(v√§rde), idag])

# S√§kerst√§ll att alla kolumner finns
def s√§kerst√§ll_kolumner(df):
    for kolumn in DATA_COLUMNS:
        if kolumn not in df.columns:
            df[kolumn] = ""
    return df[DATA_COLUMNS]

# Spara data till Google Sheets
def spara_data(df):
    df = df.fillna("").astype(str)
    worksheet = sh.worksheet("Data")
    worksheet.clear()
    worksheet.update("A1", [df.columns.tolist()] + df.values.tolist())

# Ladda data fr√•n Google Sheets
def ladda_data():
    try:
        worksheet = sh.worksheet("Data")
        data = worksheet.get_all_records()
        if not data:
            return pd.DataFrame(columns=DATA_COLUMNS)
        df = pd.DataFrame(data)
        return s√§kerst√§ll_kolumner(df)
    except:
        return pd.DataFrame(columns=DATA_COLUMNS)

from berakningar import process_l√§gg_till_rader  # Importerar ber√§kningslogik

def scenformul√§r(df, inst):
    st.subheader("üìã L√§gg till scen eller vila")

    with st.form("l√§gg_till"):
        kolumner = [
            ("Antal vilodagar", "vilodagar", 1, 1),
            ("Scenens l√§ngd (h)", "scen_tid", 14.0, 0.25),
            ("√ñvriga m√§n", "ov", 0, 1),
            ("Enkel vaginal", "enkel_vag", 0, 1),
            ("Enkel anal", "enkel_anal", 0, 1),
            ("DP", "dp", 0, 1),
            ("DPP", "dpp", 0, 1),
            ("DAP", "dap", 0, 1),
            ("TPP", "tpp", 0, 1),
            ("TAP", "tap", 0, 1),
            ("TPA", "tpa", 0, 1),
            ("Kompisar", "komp", 0, 1, int(inst.get("Kompisar", 999))),
            ("Pappans v√§nner", "pappans", 0, 1, int(inst.get("Pappans v√§nner", 999))),
            ("Nils v√§nner", "nils_v", 0, 1, int(inst.get("Nils v√§nner", 999))),
            ("Nils familj", "nils_f", 0, 1, int(inst.get("Nils familj", 999))),
            ("DT tid per man (sek)", "dt_tid_per_man", 0, 1),
            ("Antal √§lskar med", "alskar", 0, 1),
            ("Antal sover med", "sover", 0, 1),
        ]

        typ = st.selectbox("Typ", ["Scen", "Vila inspelningsplats", "Vilovecka hemma"], key="typ")

        # Skapa formul√§rf√§lt dynamiskt med keys
        for namn, key, min_v, step, *max_v in kolumner:
            kwargs = {"min_value": min_v, "step": step, "key": key}
            if max_v:
                kwargs["max_value"] = max_v[0]
            st.number_input(namn, **kwargs)

        submit = st.form_submit_button("‚úÖ L√§gg till rad")

    if submit:
        v√§rden = {key: st.session_state[key] for _, key, *_ in kolumner}
        v√§rden["typ"] = typ

        df = process_l√§gg_till_rader(df, inst, v√§rden)
        spara_data(df)

        # √Öterst√§ll formul√§rf√§lt
        for _, key, *_ in kolumner:
            st.session_state[key] = 0
        st.session_state["scen_tid"] = 14.0
        st.session_state["vilodagar"] = 1
        st.experimental_rerun()

# Visa befintlig data i tabell
def visa_data(df):
    st.subheader("üìä Samtliga scener och vilodagar")
    if df.empty:
        st.info("Ingen data tillg√§nglig √§nnu.")
    else:
        st.dataframe(df, use_container_width=True)

# Visa och redigera inst√§llningar i sidopanel
def visa_inst√§llningar(inst):
    with st.sidebar:
        st.header("‚öôÔ∏è Inst√§llningar")
        with st.form("inst_form"):
            namn = st.text_input("Kvinnans namn", value=str(inst.get("Kvinnans namn", "")))
            f√∂dd = st.date_input("F√∂delsedatum", value=pd.to_datetime(inst.get("F√∂delsedatum", "1984-03-26")))
            startdatum = st.date_input("Startdatum (f√∂rsta scen)", value=pd.to_datetime(inst.get("Startdatum", "2014-03-26")))

            inst_inputs = {}
            for f√§lt in ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]:
                inst_inputs[f√§lt] = st.number_input(f√§lt, value=float(inst.get(f√§lt, 0)), min_value=0.0, step=1.0)

            spara = st.form_submit_button("üíæ Spara inst√§llningar")

        if spara:
            spara_inst√§llning("Kvinnans namn", namn)
            spara_inst√§llning("F√∂delsedatum", f√∂dd.strftime("%Y-%m-%d"))
            spara_inst√§llning("Startdatum", startdatum.strftime("%Y-%m-%d"))
            for nyckel, v√§rde in inst_inputs.items():
                spara_inst√§llning(nyckel, v√§rde)
            st.success("Inst√§llningar sparade!")

def main():
    st.set_page_config(page_title="Malin Filmproduktion", layout="wide")
    st.title("üé¨ Malin Filmproduktion")

    # Initiera blad & ladda inst√§llningar
    init_sheet("Data", DATA_COLUMNS)
    init_inst√§llningar()
    inst = l√§s_inst√§llningar()
    df = ladda_data()

    # Visa sidopanel
    visa_inst√§llningar(inst)

    # Formul√§r f√∂r att l√§gga till scen/vila
    df = scenformul√§r(df, inst)

    # Visa befintlig data
    visa_data(df)

if __name__ == "__main__":
    main()
