import streamlit as st
import pandas as pd
import random
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials

# Autentisera Google Sheets
def auth_gspread():
    scope = ["https://spreadsheets.google.com/feeds",
             "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
    client = gspread.authorize(creds)
    return client

# Ladda och s√§kerst√§ll rubriker
def load_data():
    client = auth_gspread()
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")

    headers = [
        "Datum", "M√§n", "Fi", "R√∂", "Dm", "Df", "Dr", "TPP", "TAP", "TPA",
        "√Ñlskar", "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils fam",
        "Svarta", "Tid s", "Tid d", "Tid t", "Vila", "√Ñlsk tid", "Totalt m√§n",
        "K√§nner", "Jobb 2", "Grannar 2", "Tjej PojkV 2", "Nils fam 2",
        "Summa singel", "Summa dubbel", "Summa trippel", "Summa vila", "Summa tid",
        "Klockan", "Tid kille", "Suger", "Filmer", "Pris", "Int√§kter",
        "Malin l√∂n", "F√∂retag l√∂n", "V√§nner l√∂n", "H√•rdhet",
        "DeepT", "Grabbar", "Snitt", "Sekunder", "Varv", "Total tid",
        "Tid kille DT", "Runk"
    ]

    current = worksheet.row_values(1)
    if current != headers:
        worksheet.resize(rows=1)
        worksheet.append_row(headers)

    data = worksheet.get_all_records()
    df = pd.DataFrame(data)
    return worksheet, df

# Hj√§lpmetoder f√∂r ber√§kningar etc.
def get_max_values(df):
    return {
        "Jobb 2": df["Jobb"].max() if "Jobb" in df else 0,
        "Grannar 2": df["Grannar"].max() if "Grannar" in df else 0,
        "Tjej PojkV 2": df["Tjej PojkV"].max() if "Tjej PojkV" in df else 0,
        "Nils fam 2": df["Nils fam"].max() if "Nils fam" in df else 0,
        "K√§nner 2": (df["Jobb"] + df["Grannar"] + df["Tjej PojkV"] + df["Nils fam"]).max() if not df.empty else 0
    }

def calculate_all(df):
    if df.empty:
        return df
    # Ber√§kna k√§nner
    df["K√§nner"] = df[["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]].sum(axis=1)

    # H√§mta maxv√§rden f√∂r 2:or
    max_vals = get_max_values(df)
    df["Jobb 2"] = max_vals["Jobb 2"]
    df["Grannar 2"] = max_vals["Grannar 2"]
    df["Tjej PojkV 2"] = max_vals["Tjej PojkV 2"]
    df["Nils fam 2"] = max_vals["Nils fam 2"]

    # Totalt m√§n
    df["Totalt m√§n"] = df["M√§n"] + df["K√§nner"]

    # Summeringar
    df["Summa singel"] = (df["Tid s"] + df["Vila"]) * df["Totalt m√§n"]
    df["Summa dubbel"] = ((df["Tid d"] + df["Vila"]) + 9) * (df["Dm"] + df["Df"] + df["Dr"])
    df["Summa trippel"] = ((df["Tid t"] + df["Vila"]) + 15) * (df["TPP"] + df["TAP"] + df["TPA"])
    df["Summa vila"] = (df["Totalt m√§n"] * df["Vila"]) + ((df["Dm"] + df["Df"] + df["Dr"]) * (df["Vila"] + 10)) + ((df["TPP"] + df["TAP"] + df["TPA"]) * (df["Vila"] + 15))
    df["Summa tid"] = df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"] + df["Summa vila"]

    # Tid kille (sekunder)
    df["Tid kille"] = df["Tid s"] + (df["Tid d"] * 2) + (df["Tid t"] * 3)

    # Suger
    df["Suger"] = 0.6 * (df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"]) / df["Totalt m√§n"].replace(0, 1)

    # L√§gg till suger p√• tid kille
    df["Tid kille"] += df["Suger"]

    # Filmer och h√•rdhet
    def calc_hardness(row):
        h = 0
        if row["M√§n"] > 0:
            h += 1
            if row["Dm"] > 0: h += 2
            if row["Df"] > 0: h += 2
            if row["Dr"] > 0: h += 4
            if row["TPP"] > 0: h += 4
            if row["TAP"] > 0: h += 6
            if row["TPA"] > 0: h += 5
        return h

    df["H√•rdhet"] = df.apply(calc_hardness, axis=1)

    df["Filmer"] = (df["M√§n"] + df["Fi"] + df["R√∂"] + df["Dm"] * 2 + df["Df"] * 2 + df["Dr"] * 3 + df["TPP"] * 4 + df["TAP"] * 6 + df["TPA"] * 5) * df["H√•rdhet"]

    # Pris och int√§kter
    df["Pris"] = 19.99
    df["Int√§kter"] = df["Filmer"] * df["Pris"]

    # L√∂ner
    df["Malin l√∂n"] = df["Int√§kter"] * 0.05
    df.loc[df["Malin l√∂n"] > 1500, "Malin l√∂n"] = 1500

    df["F√∂retag l√∂n"] = df["Int√§kter"] * 0.4
    df["V√§nner l√∂n"] = df["Int√§kter"] - df["Malin l√∂n"] - df["F√∂retag l√∂n"]

    # DeepT, Grabbar, Snitt
    df["Snitt"] = 0
    if "DeepT" in df and "Grabbar" in df:
        df["Snitt"] = df["DeepT"] / df["Grabbar"].replace(0, 1)

    # Total tid etc.
    df["Total tid"] = df["Snitt"] * (df["Sekunder"] * df["Varv"])
    df["Tid kille DT"] = df["Total tid"] / df["Totalt m√§n"].replace(0, 1)
    df["Runk"] = 0.6 * df["Total tid"] / df["Totalt m√§n"].replace(0, 1)

    return df

# Presentation av huvudvy
def huvudvy(df):
    st.header("üìä Huvudvy")

    if df.empty:
        st.warning("Ingen data att visa i huvudvyn.")
        return

    totalt_m√§n = df["Totalt m√§n"].sum()
    totalt_k√§nner = df["K√§nner"].sum()
    max_vals = get_max_values(df)

    # Snitt film = (totalt m√§n + k√§nner) / antal rader d√§r m√§n > 0
    antal_rader = len(df[df["M√§n"] > 0])
    snitt_film = (totalt_m√§n + totalt_k√§nner) / antal_rader if antal_rader > 0 else 0

    # GangB = summan av k√§nner / summan av k√§nner 2
    gangb = totalt_k√§nner / (max_vals["K√§nner 2"] if max_vals["K√§nner 2"] > 0 else 1)

    # √Ñlskat = summan av √§lskar / k√§nner 2
    √§lskat = df["√Ñlskar"].sum() / (max_vals["K√§nner 2"] if max_vals["K√§nner 2"] > 0 else 1)

    # Sover med kvot
    sover_med_kvot = df["Sover med"].sum() / (max_vals["Nils fam 2"] if max_vals["Nils fam 2"] > 0 else 1)

    # Vita och svarta i procent
    svarta_summa = df["Svarta"].sum()
    vita = (totalt_m√§n - svarta_summa) / totalt_m√§n * 100 if totalt_m√§n > 0 else 0
    svarta = svarta_summa / totalt_m√§n * 100 if totalt_m√§n > 0 else 0

    # Summor av int√§kter och l√∂ner
    int√§kter_summa = df["Int√§kter"].sum()
    malin_l√∂n_summa = df["Malin l√∂n"].sum()
    f√∂retag_l√∂n_summa = df["F√∂retag l√∂n"].sum()
    v√§nner_l√∂n_summa = df["V√§nner l√∂n"].sum() / (max_vals["K√§nner 2"] if max_vals["K√§nner 2"] > 0 else 1)

    # Presentera allt
    st.write(f"**Totalt m√§n:** {totalt_m√§n}")
    st.write(f"**Antal k√§nner (Kompisar):** {totalt_k√§nner}")
    st.write(f"**Jobb:** {max_vals['Jobb 2']}")
    st.write(f"**Grannar:** {max_vals['Grannar 2']}")
    st.write(f"**Tjej PojkV:** {max_vals['Tjej PojkV 2']}")
    st.write(f"**Nils fam:** {max_vals['Nils fam 2']}")
    st.write(f"**Snitt film:** {snitt_film:.2f}")
    st.write(f"**GangB:** {gangb:.2f}")
    st.write(f"**√Ñlskat:** {√§lskat:.2f}")
    st.write(f"**Sover med (kvot):** {sover_med_kvot:.2f}")
    st.write(f"**Vita (%):** {vita:.1f}%")
    st.write(f"**Svarta (%):** {svarta:.1f}%")
    st.write(f"**Filmer (summa):** {df['Filmer'].sum()}")
    st.write(f"**Int√§kter (summa):** ${int√§kter_summa:.2f}")
    st.write(f"**Malin l√∂n (summa):** ${malin_l√∂n_summa:.2f}")
    st.write(f"**F√∂retag l√∂n (summa):** ${f√∂retag_l√∂n_summa:.2f}")
    st.write(f"**V√§nner l√∂n (per kompis):** ${v√§nner_l√∂n_summa:.2f}")

# Presentation av radvy
def radvy(df):
    st.header("üìã Radvyn")

    if df.empty:
        st.warning("Ingen data att visa i radvyn.")
        return

    rad = df.iloc[-1]

    # Tid kille inkl tid kille DT och Runk
    tid_kille = rad["Tid kille"] + rad["Tid kille DT"] + rad["Runk"]
    tid_kille_min = tid_kille / 60
    markering = "‚ö†Ô∏è Tid kille under 10 min, √∂verv√§g att √∂ka" if tid_kille_min < 10 else ""

    st.write(f"**Tid kille (min):** {tid_kille_min:.2f} {markering}")
    st.write(f"**Filmer:** {int(rad['Filmer'])}")
    st.write(f"**Int√§kter:** ${rad['Int√§kter']:.2f}")

    # Ber√§kning av klockan start 07:00 + summa tid i minuter
    total_tid_min = rad["Summa tid"] / 60
    starttid = datetime(2025, 1, 1, 7, 0)
    sluttid = (starttid + timedelta(minutes=total_tid_min)).strftime("%H:%M")
    st.write(f"**Klockan:** {sluttid}")

    # Form f√∂r redigering om tid kille < 10 min
    if tid_kille_min < 10:
        st.subheader("‚è±Ô∏è Justera tider f√∂r att √∂ka Tid kille")

        with st.form("justera_tid_form"):
            tid_s_ny = st.number_input("Tid s", value=int(rad["Tid s"]), min_value=0, step=1)
            tid_d_ny = st.number_input("Tid d", value=int(rad["Tid d"]), min_value=0, step=1)
            tid_t_ny = st.number_input("Tid t", value=int(rad["Tid t"]), min_value=0, step=1)
            varv_ny = st.number_input("Varv", value=int(rad.get("Varv", 1)), min_value=1, step=1)
            sekunder_ny = st.number_input("Sekunder", value=int(rad.get("Sekunder", 1)), min_value=1, step=1)

            submit = st.form_submit_button("Spara √§ndringar")
            if submit:
                client = auth_gspread()
                sheet = client.open_by_url(st.secrets["SHEET_URL"])
                worksheet = sheet.worksheet("Blad1")

                rad_index = df.index[-1] + 2  # +2 pga sheet rad 1 √§r header, df index b√∂rjar p√• 0
                cell_range = f"T{rad_index}:X{rad_index}"  # Tid s, Tid d, Tid t, Varv, Sekunder

                worksheet.update(cell_range, [[tid_s_ny, tid_d_ny, tid_t_ny, varv_ny, sekunder_ny]])
                st.success("‚è±Ô∏è Tider uppdaterade! Ladda om appen.")

import random

# L√§gg till ny rad via formul√§r
def inmatning(df):
    st.header("‚ûï L√§gg till ny rad")
    with st.form("form_ny_rad"):
        ny_rad = {}
        f√§lt_lista = [
            "M√§n", "F", "R", "Dm", "Df", "Dr", "TPP", "TAP", "TPA",
            "√Ñlskar", "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils fam", "Svarta",
            "Tid s", "Tid d", "Tid t", "Vila", "DeepT", "Grabbar", "Sekunder", "Varv"
        ]
        for f√§lt in f√§lt_lista:
            ny_rad[f√§lt] = st.number_input(f√§lt, min_value=0, step=1)

        ny_rad["Dag"] = (pd.to_datetime(df.iloc[-1]["Dag"]) + pd.Timedelta(days=1)).strftime("%Y-%m-%d") if not df.empty else datetime.today().strftime("%Y-%m-%d")
        submitted = st.form_submit_button("Spara")
        if submitted:
            append_row(ny_rad)
            st.success("‚úÖ Ny rad sparad. Ladda om appen f√∂r att se uppdatering.")

# Knapp f√∂r vilodag jobb
def vilodag_jobb(df):
    max_vals = get_max_values(df)
    ny_rad = {
        "Dag": (pd.to_datetime(df.iloc[-1]["Dag"]) + pd.Timedelta(days=1)).strftime("%Y-%m-%d") if not df.empty else datetime.today().strftime("%Y-%m-%d"),
        "√Ñlskar": 12,
        "Sover med": 1,
        "Jobb": max_vals["Jobb 2"],
        "Grannar": max_vals["Grannar 2"],
        "Tjej PojkV": max_vals["Tjej PojkV 2"],
        "Nils fam": max_vals["Nils fam 2"]
    }
    # S√§tt √∂vriga f√§lt till 0
    alla_f√§lt = [
        "M√§n", "F", "R", "Dm", "Df", "Dr", "TPP", "TAP", "TPA",
        "Tid s", "Tid d", "Tid t", "Vila", "DeepT", "Grabbar", "Sekunder", "Varv", "Svarta"
    ]
    for f√§lt in alla_f√§lt:
        ny_rad[f√§lt] = 0

    append_row(ny_rad)
    st.success("‚úÖ Vilodag jobb tillagd.")

# Knapp f√∂r vilodag hemma
def vilodag_hemma(df):
    ny_rad = {
        "Dag": (pd.to_datetime(df.iloc[-1]["Dag"]) + pd.Timedelta(days=1)).strftime("%Y-%m-%d") if not df.empty else datetime.today().strftime("%Y-%m-%d"),
        "√Ñlskar": 6,
        "Sover med": 0,
        "Jobb": 3,
        "Grannar": 3,
        "Tjej PojkV": 3,
        "Nils fam": 3
    }
    # √ñvriga f√§lt 0
    alla_f√§lt = [
        "M√§n", "F", "R", "Dm", "Df", "Dr", "TPP", "TAP", "TPA",
        "Tid s", "Tid d", "Tid t", "Vila", "DeepT", "Grabbar", "Sekunder", "Varv", "Svarta"
    ]
    for f√§lt in alla_f√§lt:
        ny_rad[f√§lt] = 0

    append_row(ny_rad)
    st.success("‚úÖ Vilodag hemma tillagd.")

# Kopiera tv√• rader med h√∂gst totalt m√§n och skapa tv√• nya rader
def kopiera_max(df):
    df["K√§nner"] = df["Jobb"] + df["Grannar"] + df["Tjej PojkV"] + df["Nils fam"]
    df["Totalt m√§n"] = df["M√§n"] + df["K√§nner"]
    top2 = df.sort_values("Totalt m√§n", ascending=False).head(2)
    for _, rad in top2.iterrows():
        ny = rad.to_dict()
        ny["Dag"] = (pd.to_datetime(df.iloc[-1]["Dag"]) + pd.Timedelta(days=1)).strftime("%Y-%m-%d") if not df.empty else datetime.today().strftime("%Y-%m-%d")
        append_row(ny)
    st.success("‚úÖ Tv√• rader kopierades fr√•n h√∂gsta Totalt m√§n.")

# Slumpknapp: slumpa v√§rden i manuella f√§lt
def slumpa_rad(df):
    manual_fields = [
        "M√§n", "F", "R", "Dm", "Df", "Dr", "TPP", "TAP", "TPA",
        "Jobb", "Grannar", "Tjej PojkV", "Nils fam", "Svarta",
        "Tid s", "Tid d", "Tid t", "Vila", "DeepT", "Grabbar", "Sekunder", "Varv"
    ]
    ny_rad = {}
    for f√§lt in manual_fields:
        if f√§lt in df.columns and not df.empty:
            min_val = df[f√§lt].min()
            max_val = df[f√§lt].max()
            if min_val == max_val:
                ny_rad[f√§lt] = int(min_val)
            else:
                ny_rad[f√§lt] = random.randint(int(min_val), int(max_val))
        else:
            ny_rad[f√§lt] = 0
    # Specifika fasta v√§rden
    ny_rad["√Ñlskar"] = 8
    ny_rad["Sover med"] = 1
    ny_rad["Vila"] = 7
    ny_rad["√Ñlsk tid"] = 30

    ny_rad["Dag"] = (pd.to_datetime(df.iloc[-1]["Dag"]) + pd.Timedelta(days=1)).strftime("%Y-%m-%d") if not df.empty else datetime.today().strftime("%Y-%m-%d")
    append_row(ny_rad)
    st.success("‚úÖ Ny rad med slumpade v√§rden tillagd.")

# Main funktion
def main():
    worksheet, df = load_data()

    st.title("MalinData App")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        if st.button("‚ûï L√§gg till vilodag jobb"):
            vilodag_jobb(df)
    with col2:
        if st.button("‚ûï L√§gg till vilodag hemma"):
            vilodag_hemma(df)
    with col3:
        if st.button("üìã Kopiera tv√• st√∂rsta"):
            kopiera_max(df)
    with col4:
        if st.button("üé≤ Slumpa ny rad"):
            slumpa_rad(df)

    inmatning(df)
    huvudvy(df)
    radvy(df)


if __name__ == "__main__":
    main()
