import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
import random

# Google Sheets-uppkoppling
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
gc = gspread.authorize(credentials)
sh = gc.open_by_url(SPREADSHEET_URL)

# Funktion: h√§mta och skapa ark
def get_or_create_worksheet(sheet, name, cols):
    try:
        ws = sheet.worksheet(name)
    except gspread.WorksheetNotFound:
        ws = sheet.add_worksheet(title=name, rows="1000", cols="50")
        ws.append_row(cols)
    return ws

# Ladda inst√§llningar
def ladda_inst√§llningar():
    inst_ws = get_or_create_worksheet(sh, "Inst√§llningar", ["Inst√§llning", "V√§rde", "Senast √§ndrad"])
    df = pd.DataFrame(inst_ws.get_all_records())
    inst = {}
    for _, rad in df.iterrows():
        key = rad["Inst√§llning"]
        value = rad["V√§rde"]
        if isinstance(value, str) and value.replace('.', '', 1).isdigit():
            inst[key] = float(value)
        else:
            inst[key] = value
    return inst, inst_ws

inst, inst_ws = ladda_inst√§llningar()

# Funktion: uppdatera inst√§llning
def uppdatera_inst√§llning(nyckel, nytt_v√§rde):
    df = pd.DataFrame(inst_ws.get_all_records())
    idx = df.index[df["Inst√§llning"] == nyckel].tolist()
    idag = datetime.today().strftime("%Y-%m-%d")
    if idx:
        inst_ws.update_cell(idx[0]+2, 2, nytt_v√§rde)
        inst_ws.update_cell(idx[0]+2, 3, idag)
    else:
        inst_ws.append_row([nyckel, nytt_v√§rde, idag])

# Sidopanel ‚Äì inst√§llningar
st.sidebar.header("Inst√§llningar")
startdatum = st.sidebar.date_input("Startdatum", datetime.strptime(inst.get("Startdatum", "2014-03-26"), "%Y-%m-%d"))
namn = st.sidebar.text_input("Kvinnans namn", inst.get("Kvinnans namn", "Malin"))
f√∂delsedatum = st.sidebar.date_input("F√∂delsedatum", datetime.strptime(inst.get("Kvinnans f√∂delsedatum", "1984-03-26"), "%Y-%m-%d"))

if st.sidebar.button("Spara inst√§llningar"):
    uppdatera_inst√§llning("Startdatum", startdatum.strftime("%Y-%m-%d"))
    uppdatera_inst√§llning("Kvinnans namn", namn)
    uppdatera_inst√§llning("Kvinnans f√∂delsedatum", f√∂delsedatum.strftime("%Y-%m-%d"))
    st.success("Inst√§llningar sparade")
    st.rerun()

# Funktion: H√§mta senaste datum fr√•n Scener
def h√§mta_senaste_datum():
    try:
        scener_ws = sh.worksheet("Scener")
        df = pd.DataFrame(scener_ws.get_all_records())
        if df.empty or "Datum" not in df.columns:
            return datetime.strptime(inst.get("Startdatum", "2014-03-26"), "%Y-%m-%d")
        else:
            senaste = df["Datum"].dropna().iloc[-1]
            return datetime.strptime(senaste, "%Y-%m-%d")
    except:
        return datetime.strptime(inst.get("Startdatum", "2014-03-26"), "%Y-%m-%d")

# √Öldersber√§kning
def ber√§kna_√•lder(f√∂delsedatum_str, senast_datum):
    f√∂delsedatum = datetime.strptime(f√∂delsedatum_str, "%Y-%m-%d")
    √•lder = senast_datum.year - f√∂delsedatum.year - ((senast_datum.month, senast_datum.day) < (f√∂delsedatum.month, f√∂delsedatum.day))
    return √•lder

# Funktion: Skapa kolumner om de saknas
def s√§kerst√§ll_kolumner(ws, f√∂rv√§ntade_kolumner):
    befintliga = ws.row_values(1)
    if befintliga != f√∂rv√§ntade_kolumner:
        ws.resize(rows=1)
        ws.update("A1", [f√∂rv√§ntade_kolumner])

# Funktion: Skapa databasblad vid behov
def initiera_databasblad():
    kolumner = [
        "Datum", "M√§n", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
        "Vaginal enkel", "Anal enkel",
        "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj",
        "DT tid (sek)", "√Ñlskar med", "Sover med",
        "Total tid (sek)", "DT total tid (sek)", "Total tid per man (min)",
        "Int√§kt ($)", "Kvinnans l√∂n ($)", "M√§nnens l√∂n ($)", "Kompisars l√∂n ($)",
        "Prenumeranter", "Vilodag", "Nils sex hemma"
    ]
    scener_ws = get_or_create_worksheet(sh, "Scener", kolumner)
    s√§kerst√§ll_kolumner(scener_ws, kolumner)

initiera_databasblad()

# H√§mta senaste datum och r√§kna ut nytt
senaste_datum = h√§mta_senaste_datum()
n√§sta_datum = senaste_datum + timedelta(days=1)

# Visa namn och √•lder
st.markdown(f"### {namn}, {ber√§kna_√•lder(inst.get('Kvinnans f√∂delsedatum', '1984-03-26'), senaste_datum)} √•r")
st.markdown(f"N√§sta scen planeras: **{n√§sta_datum.strftime('%Y-%m-%d')}**")

st.header("L√§gg till ny scen")

with st.form("ny_scen"):
    m√§n = st.number_input("Antal m√§n", min_value=0)
    dp = st.number_input("DP", min_value=0)
    dpp = st.number_input("DPP", min_value=0)
    dap = st.number_input("DAP", min_value=0)
    tpa = st.number_input("TPA", min_value=0)
    tpp = st.number_input("TPP", min_value=0)
    tap = st.number_input("TAP", min_value=0)
    vag = st.number_input("Enkel vaginal", min_value=0)
    anal = st.number_input("Enkel anal", min_value=0)

    komp_total = inst.get("Kompisar", 0)
    komp = st.number_input("Kompisar (i scen)", min_value=0, max_value=int(komp_total or 9999))
    pv_total = inst.get("Pappans v√§nner", 0)
    pv = st.number_input("Pappans v√§nner (i scen)", min_value=0, max_value=int(pv_total or 9999))
    nv_total = inst.get("Nils v√§nner", 0)
    nv = st.number_input("Nils v√§nner (i scen)", min_value=0, max_value=int(nv_total or 9999))
    nf_total = inst.get("Nils familj", 0)
    nf = st.number_input("Nils familj (i scen)", min_value=0, max_value=int(nf_total or 9999))

    dt_tid = st.number_input("Deep throat-tid per man (sekunder)", min_value=0)
    √§lskar = st.number_input("Antal '√§lskar med'", min_value=0)
    sover = st.number_input("Antal 'sover med'", min_value=0)

    tid_per_man_min = st.number_input("Tid varje man f√•r (minuter)", min_value=0)
    tid_per_man_sek = st.number_input("Tid varje man f√•r (sekunder)", min_value=0, step=15)

    skicka = st.form_submit_button("Spara scen")

if skicka:
    total_m√§n = m√§n + komp + pv + nv + nf
    penetrationstid = ((dp + dpp + dap) * 2 + (tpa + tpp + tap) * 2 + vag + anal) * 120 + (15 * (dp + dpp + dap + tpa + tpp + tap + vag + anal))
    √§lskartid = (√§lskar + sover) * 15 * 60
    total_tid = penetrationstid + √§lskartid

    dt_total = total_m√§n * dt_tid + total_m√§n * 2 + (total_m√§n // 10) * 30
    tid_per_man = (total_tid + dt_total) / total_m√§n / 60

    intakt = int(total_m√§n * 15)
    kvinnan = 800
    man_l√∂n = (m√§n + pv + nv + nf) * 200
    kompisar_l√∂n = max(intakt - kvinnan - man_l√∂n, 0) / max(inst.get("Kompisar", 1), 1)

    data = [
        n√§sta_datum.strftime("%Y-%m-%d"), m√§n, dp, dpp, dap, tpa, tpp, tap,
        vag, anal, komp, pv, nv, nf, dt_tid, √§lskar, sover,
        total_tid, dt_total, round(tid_per_man, 2),
        intakt, kvinnan, man_l√∂n, round(kompisar_l√∂n, 2),
        "", "", ""
    ]
    scener_ws = sh.worksheet("Scener")
    scener_ws.append_row(data)
    st.success("Scen sparad")
    st.rerun()

st.header("üìä Statistik")

try:
    df = pd.DataFrame(sh.worksheet("Scener").get_all_records())
    df["Datum"] = pd.to_datetime(df["Datum"], errors="coerce")

    total_m√§n = df["M√§n"].sum() + df["Kompisar"].sum() + df["Pappans v√§nner"].sum() + df["Nils v√§nner"].sum() + df["Nils familj"].sum()
    total_dt_tid = df["DT total tid (sek)"].sum()
    total_tid_per_man = df["Total tid per man (min)"].mean()

    st.markdown(f"- **Totalt antal m√§n:** {int(total_m√§n)}")
    st.markdown(f"- **Total DT-tid:** {round(total_dt_tid / 60, 1)} minuter")
    st.markdown(f"- **Genomsnittlig tid per man:** {round(total_tid_per_man, 2)} minuter")

    # Frekvens per v√§nkategori
    v√§n_kategorier = ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]
    for kategori in v√§n_kategorier:
        tot = df[kategori].sum()
        st.markdown(f"- **{kategori} (antal deltaganden):** {int(tot)}")

    # Antal "√§lskar med" och "sover med"
    st.markdown(f"- **Totalt '√§lskar med':** {int(df['√Ñlskar med'].sum())}")
    st.markdown(f"- **Totalt 'sover med' (endast Nils familj):** {int(df['Sover med'].sum())}")

except Exception as e:
    st.error(f"Fel vid h√§mtning av statistik: {e}")
