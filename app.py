import streamlit as st
import gspread
import pandas as pd
import datetime
import json
from oauth2client.service_account import ServiceAccountCredentials

# Autentisering med Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
gc = gspread.service_account_from_dict(credentials)

# Fil- och bladnamn
SHEET_NAME = "MalinData"
WORKSHEET_NAME = "Blad1"

# F√∂rv√§ntade kolumnrubriker i r√§tt ordning
EXPECTED_COLUMNS = [
    "Datum", "M√§n", "Fi", "R√∂", "DM", "DF", "DR",
    "TPP", "TAP", "TPA", "√Ñlskar med", "Sover med", "K√§nner", "Jobb", "Jobb 2",
    "Grannar", "Grannar 2", "Tjej PojkV", "Tjej PojkV 2", "Nils fam", "Nils fam 2",
    "Totalt m√§n", "Tid Singel", "Tid Dubbel", "Tid Trippel", "Vila",
    "Summa singel", "Summa dubbel", "Summa trippel", "Summa vila",
    "Summa tid", "Klockan", "Tid kille", "Suger", "Filmer",
    "Pris", "Int√§kter", "Malin l√∂n", "F√∂retag l√∂n", "V√§nner l√∂n", "H√•rdhet"
]

def load_sheet():
    sh = gc.open(SHEET_NAME)
    worksheet = sh.worksheet(WORKSHEET_NAME)

    # L√§s befintliga data
    data = worksheet.get_all_records()

    # Om rubrikerna √§r fel eller saknas, skriv in dem korrekt
    if not data or list(data[0].keys()) != EXPECTED_COLUMNS:
        worksheet.clear()
        worksheet.append_row(EXPECTED_COLUMNS)
        df = pd.DataFrame(columns=EXPECTED_COLUMNS)
    else:
        df = pd.DataFrame(data)

    return worksheet, df

def save_data(worksheet, df):
    # Konvertera alla v√§rden till str√§ngar f√∂r s√§ker uppdatering
    values = [df.columns.tolist()] + df.fillna("").astype(str).values.tolist()
    worksheet.update("A1", values)

def main():
    st.title("üìù Daglig inmatning ‚Äì MalinData")

    worksheet, df = load_sheet()

    # Datum: f√∂rsta raden anges manuellt, andra raden f√∂resl√•s +1 dag
    if df.empty:
        datum = st.date_input("Datum", datetime.date.today())
    else:
        senaste_datum = pd.to_datetime(df["Datum"], errors="coerce").max()
        datum = st.date_input("Datum", (senaste_datum + pd.Timedelta(days=1)).date())

    with st.form("inmatning_form"):
        ny_rad = {"Datum": str(datum)}

        heltalsf√§lt = [
            "M√§n", "Fi", "R√∂", "DM", "DF", "DR", "TPP", "TAP", "TPA",
            "√Ñlskar med", "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils fam"
        ]

        for f√§lt in heltalsf√§lt:
            ny_rad[f√§lt] = st.number_input(f√§lt, min_value=0, step=1, value=0)

        sekunder_f√§lt = ["Tid Singel", "Tid Dubbel", "Tid Trippel", "Vila"]
        for f√§lt in sekunder_f√§lt:
            ny_rad[f√§lt] = st.number_input(f√§lt + " (sekunder)", min_value=0, step=1, value=0)

        submitted = st.form_submit_button("Spara")

    if submitted:
        # Fyll √∂vriga kolumner med tomma v√§rden f√∂r nu
        for kolumn in EXPECTED_COLUMNS:
            if kolumn not in ny_rad:
                ny_rad[kolumn] = ""

        df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
        save_data(worksheet, df)
        st.success("‚úÖ Data sparad!")

if __name__ == "__main__":
    main()
