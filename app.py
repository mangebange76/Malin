# app.py ‚Äî DEL 1/6
import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import date, time, datetime, timedelta
import time as _time
import random
import math

# ===================== Import av extern ber√§kning =====================
try:
    from berakningar import berakna_radvarden as calc_row_values
except Exception:
    calc_row_values = None

# ============================== App-inst√§llningar ===============================
st.set_page_config(page_title="Malin", layout="centered")
st.title("Malin ‚Äì produktionsapp")

# =============================== Hj√§lpfunktioner ================================
def _retry_call(fn, *args, **kwargs):
    """Exponential backoff f√∂r 429/RESOURCE_EXHAUSTED."""
    delay = 0.5
    for _ in range(6):
        try:
            return fn(*args, **kwargs)
        except Exception as e:
            msg = str(e)
            if any(x in msg for x in ["429", "RESOURCE_EXHAUSTED", "RATE_LIMIT_EXCEEDED"]):
                _time.sleep(delay + random.uniform(0, 0.25))
                delay = min(delay * 2, 4)
                continue
            raise
    return fn(*args, **kwargs)

def _clamp(d: date, lo: date, hi: date):
    if d < lo: return lo
    if d > hi: return hi
    return d

def _hm_str_from_seconds(q_sec: int) -> str:
    h = q_sec // 3600
    m = round((q_sec % 3600) / 60)
    if m == 60:
        h += 1
        m = 0
    return f"{int(h)}h {int(m)} min"

def _ms_str_from_seconds(sec: int) -> str:
    m = sec // 60
    s = sec % 60
    return f"{int(m)}m {int(s)}s"

def _parse_iso_date(s: str):
    s = (s or "").strip()
    if not s:
        return None
    try:
        return datetime.fromisoformat(s).date()
    except Exception:
        for fmt in ("%Y-%m-%d", "%Y/%m/%d", "%d/%m/%Y", "%d-%m-%Y"):
            try:
                return datetime.strptime(s, fmt).date()
            except Exception:
                continue
    return None

def _safe_int(x, default=0):
    try:
        if x is None: return default
        if isinstance(x, str) and x.strip() == "":
            return default
        return int(float(x))
    except Exception:
        return default

def _usd(x):
    try:
        return f"${float(x):,.2f}"
    except Exception:
        return "-"

# =============================== Google Sheets =================================
@st.cache_resource(show_spinner=False)
def get_client():
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_info(dict(st.secrets["GOOGLE_CREDENTIALS"]), scopes=scopes)
    return gspread.authorize(creds)

client = get_client()
WORKSHEET_TITLE = "Data"
SETTINGS_SHEET = "Inst√§llningar"

@st.cache_resource(show_spinner=False)
def resolve_spreadsheet():
    sid = st.secrets.get("GOOGLE_SHEET_ID", "").strip() if "GOOGLE_SHEET_ID" in st.secrets else ""
    if sid:
        return _retry_call(client.open_by_key, sid)
    url = st.secrets.get("SHEET_URL", "").strip() if "SHEET_URL" in st.secrets else ""
    if url:
        return _retry_call(client.open_by_url, url)
    qp = ""
    try:
        qp = st.experimental_get_query_params().get("sheet", [""])[0]
    except Exception:
        pass
    if qp:
        return _retry_call(client.open_by_url, qp) if qp.startswith("http") else _retry_call(client.open_by_key, qp)
    st.error("L√§gg in GOOGLE_SHEET_ID eller SHEET_URL i Secrets (eller ?sheet=<url|id>).")
    st.stop()

spreadsheet = resolve_spreadsheet()

def _get_ws(title: str):
    """H√§mta ett blad; skapa endast om det inte finns. Inga extrablad skapas."""
    try:
        return spreadsheet.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = spreadsheet.add_worksheet(title=title, rows=200 if title==SETTINGS_SHEET else 2000, cols=120)
        if title == SETTINGS_SHEET:
            _retry_call(ws.update, "A1:C1", [["Key","Value","Label"]])
            defaults = [
                ["startdatum", date.today().isoformat(), ""],
                ["starttid", "07:00", ""],
                ["f√∂delsedatum", date(1990,1,1).isoformat(), "Malins f√∂delsedatum"],
                ["MAX_PAPPAN", "10", "Pappans v√§nner"],
                ["MAX_GRANNAR", "10", "Grannar"],
                ["MAX_NILS_VANNER", "10", "Nils v√§nner"],
                ["MAX_NILS_FAMILJ", "10", "Nils familj"],
                ["MAX_BEKANTA", "10", "Bekanta"],
                ["avgift_usd", "30.0", "Avgift (USD, per rad)"],
                ["PROD_STAFF", "800", "Produktionspersonal (fast)"],
                ["PERSONAL_PCT", "10", "Personal deltagit (% av PROD_STAFF)"],
                ["ESK_MIN", "20", "Eskilstuna min (slump)"],
                ["ESK_MAX", "40", "Eskilstuna max (slump)"],
                # Bonusr√§knare (persistenta ‚Äì uppdateras bara vid Spara)
                ["BONUS_TOTAL", "0", "Bonus killar totalt"],
                ["BONUS_USED",  "0", "Bonus killar deltagit"],
                ["BONUS_LEFT",  "0", "Bonus killar kvar"],
                # Etiketter (visning)
                ["LABEL_Pappans v√§nner", "", ""],
                ["LABEL_Grannar", "", ""],
                ["LABEL_Nils v√§nner", "", ""],
                ["LABEL_Nils familj", "", ""],
                ["LABEL_Bekanta", "", ""],
                ["LABEL_Eskilstuna killar", "", ""],
                ["LABEL_M√§n", "", ""],
                ["LABEL_Svarta", "", ""],
                ["LABEL_K√§nner", "", ""],
                ["LABEL_Personal deltagit", "", ""],
                ["LABEL_Bonus killar", "", ""],
                ["LABEL_Bonus deltagit", "", ""],
                ["LABEL_Malins f√∂delsedatum", "", ""],
            ]
            _retry_call(ws.update, f"A2:C{len(defaults)+1}", defaults)
        return ws

sheet = _get_ws(WORKSHEET_TITLE)
settings_ws = _get_ws(SETTINGS_SHEET)

# =========================== Header-s√§kring / schema ===========================
DEFAULT_COLUMNS = [
    "Datum","Typ","Veckodag","Scen",
    "M√§n","Svarta","Fitta","Rumpa","DP","DPP","DAP","TAP",
    "Tid S","Tid D","Vila","DT tid (sek/kille)","DT vila (sek/kille)",
    "Summa S","Summa D","Summa TP","Summa Vila",
    "Tid √Ñlskar (sek)","Tid √Ñlskar",
    "Tid Sover med (sek)","Tid Sover med",
    "Summa tid","Summa tid (sek)",
    "Tid per kille (sek)","Tid per kille",
    "Klockan","√Ñlskar","Sover med","K√§nner",
    "Pappans v√§nner","Grannar","Nils v√§nner","Nils familj","Bekanta","Eskilstuna killar",
    "Bonus killar","Bonus deltagit","Personal deltagit",
    "Totalt M√§n","Tid kille","Nils",
    "H√•ngel (sek/kille)","H√•ngel (m:s/kille)",
    "Suger","Suger per kille (sek)",
    "H√•rdhet","Prenumeranter","Avgift","Int√§kter",
    "Utgift m√§n","Int√§kt K√§nner","L√∂n Malin","Vinst",
    "K√§nner Sammanlagt"
]

def ensure_header_and_migrate():
    header = _retry_call(sheet.row_values, 1)
    if not header:
        _retry_call(sheet.insert_row, DEFAULT_COLUMNS, 1)
        st.session_state["COLUMNS"] = DEFAULT_COLUMNS
        st.caption("üß± Skapade kolumnrubriker.")
        return
    missing = [c for c in DEFAULT_COLUMNS if c not in header]
    if missing:
        from gspread.utils import rowcol_to_a1
        new_header = header + missing
        end_cell = rowcol_to_a1(1, len(new_header))
        _retry_call(sheet.update, f"A1:{end_cell}", [new_header])
        st.caption(f"üîß Migrerade header, lade till: {', '.join(missing)}")
        st.session_state["COLUMNS"] = new_header
    else:
        st.session_state["COLUMNS"] = header

ensure_header_and_migrate()
KOLUMNER = st.session_state["COLUMNS"]

# ============================== Inst√§llningar (persistent) ==============================
def _settings_as_dict():
    rows = _retry_call(settings_ws.get_all_records)
    d, labels = {}, {}
    for r in rows:
        key = (r.get("Key") or "").strip()
        if not key:
            continue
        d[key] = r.get("Value")
        if r.get("Label") is not None:
            labels[key] = str(r.get("Label"))
        if key.startswith("LABEL_"):
            cname = key[len("LABEL_"):]
            if str(r.get("Value") or "").strip():
                labels[cname] = str(r.get("Value")).strip()
    return d, labels

def _save_setting(key: str, value: str, label: str|None=None):
    recs = _retry_call(settings_ws.get_all_records)
    keys = [ (r.get("Key") or "") for r in recs ]
    try:
        idx = keys.index(key)
        rowno = idx + 2
    except ValueError:
        rowno = len(recs) + 2
        _retry_call(settings_ws.update, f"A{rowno}:C{rowno}", [[key, value, label or ""]])
        return
    _retry_call(settings_ws.update, f"B{rowno}", [[value]])
    if label is not None:
        _retry_call(settings_ws.update, f"C{rowno}", [[label]])

def _get_label(labels_map: dict, default_text: str) -> str:
    return labels_map.get(default_text, default_text)

CFG_RAW, LABELS = _settings_as_dict()

def _init_cfg_defaults_from_settings():
    st.session_state.setdefault("CFG", {})
    C = st.session_state["CFG"]

    def _get(k, fallback):
        return CFG_RAW.get(k, fallback)

    # Datum/tid
    try:
        C["startdatum"] = datetime.fromisoformat(_get("startdatum", date.today().isoformat())).date()
    except Exception:
        C["startdatum"] = date.today()
    try:
        hh, mm = str(_get("starttid", "07:00")).split(":")
        C["starttid"] = time(int(hh), int(mm))
    except Exception:
        C["starttid"] = time(7,0)
    try:
        C["f√∂delsedatum"] = datetime.fromisoformat(_get("f√∂delsedatum", "1990-01-01")).date()
    except Exception:
        C["f√∂delsedatum"] = date(1990,1,1)

    # Tal
    C["MAX_PAPPAN"]       = int(float(_get("MAX_PAPPAN", 10)))
    C["MAX_GRANNAR"]      = int(float(_get("MAX_GRANNAR", 10)))
    C["MAX_NILS_VANNER"]  = int(float(_get("MAX_NILS_VANNER", 10)))
    C["MAX_NILS_FAMILJ"]  = int(float(_get("MAX_NILS_FAMILJ", 10)))
    C["MAX_BEKANTA"]      = int(float(_get("MAX_BEKANTA", 10)))
    C["avgift_usd"]       = float(_get("avgift_usd", 30.0))
    C["PROD_STAFF"]       = int(float(_get("PROD_STAFF", 800)))
    C["PERSONAL_PCT"]     = int(float(_get("PERSONAL_PCT", 10)))
    C["ESK_MIN"]          = int(float(_get("ESK_MIN", 20)))
    C["ESK_MAX"]          = int(float(_get("ESK_MAX", 40)))

    # Bonus-r√§knare (l√§ses, men uppdateras f√∂rst vid Spara)
    C["BONUS_TOTAL"] = int(float(_get("BONUS_TOTAL", 0)))
    C["BONUS_USED"]  = int(float(_get("BONUS_USED", 0)))
    C["BONUS_LEFT"]  = int(float(_get("BONUS_LEFT", 0)))

_init_cfg_defaults_from_settings()
CFG = st.session_state["CFG"]

# ==== Scen- och datumhj√§lpare (robust, inga on√∂diga Sheets-anrop) ====
ROW_COUNT_KEY = "ROW_COUNT"

def _init_row_count_once():
    if ROW_COUNT_KEY in st.session_state:
        return
    try:
        vals = _retry_call(sheet.col_values, 1)  # EN g√•ng
        st.session_state[ROW_COUNT_KEY] = max(0, len(vals) - 1) if (vals and vals[0] == "Datum") else len(vals)
    except Exception:
        st.session_state[ROW_COUNT_KEY] = 0

_init_row_count_once()

def next_scene_number() -> int:
    return int(st.session_state.get(ROW_COUNT_KEY, 0)) + 1

def datum_och_veckodag_f√∂r_scen(scen_nummer: int):
    start = CFG.get("startdatum") or date.today()
    d = start + timedelta(days=int(scen_nummer) - 1)
    veckodagar = ["M√•ndag","Tisdag","Onsdag","Torsdag","Fredag","L√∂rdag","S√∂ndag"]
    return d, veckodagar[d.weekday()]

def _current_scene_info():
    scen = next_scene_number()
    d, veckodag = datum_och_veckodag_f√∂r_scen(scen)
    return scen, d, veckodag

# ============================== MENY (vyval) ===============================
st.sidebar.title("Meny")
view = st.sidebar.radio("V√§lj vy", ["Produktion", "Statistik"], index=0)

# ============================== Sidopanel ‚Äì inst√§llningar ==============================
with st.sidebar.expander("‚öôÔ∏è Konfiguration & etiketter", expanded=False):
    # datum/tid
    startdatum = st.date_input("Historiskt startdatum", value=CFG["startdatum"], key="sb_startdatum")
    starttid   = st.time_input("Starttid", value=CFG["starttid"], key="sb_starttid")
    fod        = st.date_input(_get_label(LABELS,"Malins f√∂delsedatum"),
                               value=_clamp(CFG["f√∂delsedatum"], date(1970,1,1), date.today()),
                               key="sb_fod")

    # max-v√§rden
    max_p  = st.number_input(_get_label(LABELS,"Pappans v√§nner")+" (max)", min_value=0, step=1, value=int(CFG["MAX_PAPPAN"]), key="sb_max_p")
    max_g  = st.number_input(_get_label(LABELS,"Grannar")+" (max)",        min_value=0, step=1, value=int(CFG["MAX_GRANNAR"]), key="sb_max_g")
    max_nv = st.number_input(_get_label(LABELS,"Nils v√§nner")+" (max)",    min_value=0, step=1, value=int(CFG["MAX_NILS_VANNER"]), key="sb_max_nv")
    max_nf = st.number_input(_get_label(LABELS,"Nils familj")+" (max)",    min_value=0, step=1, value=int(CFG["MAX_NILS_FAMILJ"]), key="sb_max_nf")
    max_bk = st.number_input(_get_label(LABELS,"Bekanta")+" (max)",        min_value=0, step=1, value=int(CFG["MAX_BEKANTA"]), key="sb_max_bk")

    # personal totalt + procent som deltar (ALLTID f√∂ljer procenten)
    prod_staff = st.number_input("Produktionspersonal (fast)", min_value=0, step=1, value=int(CFG["PROD_STAFF"]), key="sb_prod")
    personal_pct = st.number_input("Personal deltagit (%)", min_value=0, max_value=100, step=1, value=int(CFG["PERSONAL_PCT"]), key="sb_pct")

    # Eskilstuna intervall
    esk_min = st.number_input("Eskilstuna min (slump)", min_value=0, step=1, value=int(CFG["ESK_MIN"]), key="sb_esk_min")
    esk_max = st.number_input("Eskilstuna max (slump)", min_value=0, step=1, value=int(CFG["ESK_MAX"]), key="sb_esk_max")

    avgift_input = st.number_input("Avgift (USD, per ny rad)", min_value=0.0, step=1.0, value=float(CFG["avgift_usd"]), key="sb_fee")

    st.markdown("**Etiketter (p√•verkar endast visning)**")
    lab_p  = st.text_input("Etikett: Pappans v√§nner", value=_get_label(LABELS, "Pappans v√§nner"), key="sb_lab_p")
    lab_g  = st.text_input("Etikett: Grannar", value=_get_label(LABELS, "Grannar"), key="sb_lab_g")
    lab_nv = st.text_input("Etikett: Nils v√§nner", value=_get_label(LABELS, "Nils v√§nner"), key="sb_lab_nv")
    lab_nf = st.text_input("Etikett: Nils familj", value=_get_label(LABELS, "Nils familj"), key="sb_lab_nf")
    lab_bk = st.text_input("Etikett: Bekanta", value=_get_label(LABELS, "Bekanta"), key="sb_lab_bk")
    lab_esk= st.text_input("Etikett: Eskilstuna killar", value=_get_label(LABELS, "Eskilstuna killar"), key="sb_lab_esk")
    lab_man= st.text_input("Etikett: M√§n", value=_get_label(LABELS, "M√§n"), key="sb_lab_man")
    lab_sva= st.text_input("Etikett: Svarta", value=_get_label(LABELS, "Svarta"), key="sb_lab_sva")
    lab_kann=st.text_input("Etikett: K√§nner", value=_get_label(LABELS, "K√§nner"), key="sb_lab_kann")
    lab_person=st.text_input("Etikett: Personal deltagit", value=_get_label(LABELS, "Personal deltagit"), key="sb_lab_person")
    lab_bonus =st.text_input("Etikett: Bonus killar", value=_get_label(LABELS, "Bonus killar"), key="sb_lab_bonus")
    lab_bonusd=st.text_input("Etikett: Bonus deltagit", value=_get_label(LABELS, "Bonus deltagit"), key="sb_lab_bonusd")
    lab_mfd   = st.text_input("Etikett: Malins f√∂delsedatum", value=_get_label(LABELS, "Malins f√∂delsedatum"), key="sb_lab_mfd")

    if st.button("üíæ Spara inst√§llningar", key="sb_save_cfg"):
        # Skriv endast vid klick
        _save_setting("startdatum", startdatum.isoformat())
        _save_setting("starttid", starttid.strftime("%H:%M"))
        _save_setting("f√∂delsedatum", fod.isoformat(), label=lab_mfd)

        _save_setting("MAX_PAPPAN", str(int(max_p)), label=lab_p)
        _save_setting("MAX_GRANNAR", str(int(max_g)), label=lab_g)
        _save_setting("MAX_NILS_VANNER", str(int(max_nv)), label=lab_nv)
        _save_setting("MAX_NILS_FAMILJ", str(int(max_nf)), label=lab_nf)
        _save_setting("MAX_BEKANTA", str(int(max_bk)), label=lab_bk)

        _save_setting("PROD_STAFF", str(int(prod_staff)))
        _save_setting("PERSONAL_PCT", str(int(personal_pct)))
        _save_setting("ESK_MIN", str(int(esk_min)))
        _save_setting("ESK_MAX", str(int(esk_max)))

        _save_setting("avgift_usd", str(float(avgift_input)))

        # label-only overrides
        _save_setting("LABEL_Eskilstuna killar", lab_esk, label="")
        _save_setting("LABEL_M√§n", lab_man, label="")
        _save_setting("LABEL_Svarta", lab_sva, label="")
        _save_setting("LABEL_K√§nner", lab_kann, label="")
        _save_setting("LABEL_Personal deltagit", lab_person, label="")
        _save_setting("LABEL_Bonus killar", lab_bonus, label="")
        _save_setting("LABEL_Bonus deltagit", lab_bonusd, label="")

        st.success("Inst√§llningar och etiketter sparade ‚úÖ")
        st.rerun()

# app.py ‚Äî DEL 2/6  (Scenariov√§ljare + H√§mta v√§rden + Input i r√§tt ordning)

# ====== Sm√• hj√§lp-funktioner f√∂r scenarion ======
def _personal_from_pct() -> int:
    try:
        return int(round((CFG["PROD_STAFF"] * CFG["PERSONAL_PCT"]) / 100))
    except Exception:
        return 0

def _eskilstuna_random():
    lo = min(int(CFG["ESK_MIN"]), int(CFG["ESK_MAX"]))
    hi = max(int(CFG["ESK_MIN"]), int(CFG["ESK_MAX"]))
    return random.randint(lo, hi) if hi >= lo else 0

def _get_min_max_from_sheet(colname: str):
    """H√§mtar min/max fr√•n Google Sheet endast vid behov (n√§r du klickar 'H√§mta v√§rden')."""
    try:
        all_rows = _retry_call(sheet.get_all_records)
    except Exception:
        return 0, 0
    vals = []
    for r in all_rows:
        v = _safe_int(r.get(colname, 0), 0)
        vals.append(v)
    if not vals:
        return 0, 0
    return min(vals), max(vals)

# ====== Scenariov√§ljare ======
st.markdown("---")
st.subheader("üé¨ V√§lj scenario")
scenario = st.selectbox(
    "Scenario",
    ["Ny scen", "Slumpa scen vit", "Slumpa scen svart", "Vila i hemmet (7 dagar)", "Vila p√• jobbet"],
    index=0,
    key="scenario_select"
)

# ====== Knappar f√∂r fl√∂de ======
c_btn1, c_btn2 = st.columns([1,2])
with c_btn1:
    fetch_clicked = st.button("üì• H√§mta/slumpa v√§rden", key="btn_fetch_values")
with c_btn2:
    st.caption("Klick fyller enbart **input** enligt valt scenario. Inget sparas f√∂rr√§n du klickar **Spara raden**.")

# ====== S√§tt input via scenario n√§r man klickar 'H√§mta v√§rden' ======
if fetch_clicked:
    # Nollst√§ll inte explicit ‚Äî vi s√§tter alla f√§lt nedan.
    # Grund: standardv√§rden f√∂r vissa f√§lt
    alskar_val = 8
    sover_val  = 1
    personal_val = _personal_from_pct()

    if scenario == "Ny scen":
        # H√§r s√§tter vi endast 'Personal deltagit' enligt %; √∂vriga l√§mnas som de √§r (0).
        st.session_state["in_personal_deltagit"] = personal_val

    elif scenario == "Slumpa scen vit":
        # Slumpa utifr√•n min/max historik (alla relevanta kolumner)
        for col, key in [
            ("M√§n", "in_men"),
            ("Svarta", "in_svarta"),
            ("Fitta", "in_fitta"),
            ("Rumpa", "in_rumpa"),
            ("DP", "in_dp"),
            ("DPP", "in_dpp"),
            ("DAP", "in_dap"),
            ("TAP", "in_tap"),
            ("Pappans v√§nner", "in_pappan"),
            ("Grannar", "in_grannar"),
            ("Nils v√§nner", "in_nils_vanner"),
            ("Nils familj", "in_nils_familj"),
            ("Bekanta", "in_bekanta"),
            ("Eskilstuna killar", "in_eskilstuna"),
        ]:
            mn, mx = _get_min_max_from_sheet(col)
            st.session_state[key] = random.randint(mn, mx) if mx >= mn else 0
        # √Ñlskar / Sover med enligt specifikationen
        st.session_state["in_alskar"] = alskar_val
        st.session_state["in_sover"]  = sover_val
        # Personal enligt % (vit-scen)
        st.session_state["in_personal_deltagit"] = personal_val
        # Bonus deltagit kommer fr√•n ber√§kningar/baserat p√• bonus-killar ‚Äî f√∂rifyll 0 h√§r; ber√§kning visar i live
        st.session_state["in_bonus_deltagit"] = 0

    elif scenario == "Slumpa scen svart":
        # Svart: endast sex-aktiviteter + Svarta; √∂vriga k√§llor 0
        for col, key in [
            ("Fitta", "in_fitta"),
            ("Rumpa", "in_rumpa"),
            ("DP", "in_dp"),
            ("DPP", "in_dpp"),
            ("DAP", "in_dap"),
            ("TAP", "in_tap"),
        ]:
            mn, mx = _get_min_max_from_sheet(col)
            st.session_state[key] = random.randint(mn, mx) if mx >= mn else 0
        mn_b, mx_b = _get_min_max_from_sheet("Svarta")
        st.session_state["in_svarta"] = random.randint(mn_b, mx_b) if mx_b >= mn_b else 0

        # Nollst√§ll m√§n-relaterade k√§llor och m√§n
        for k in ["in_men","in_pappan","in_grannar","in_nils_vanner","in_nils_familj","in_bekanta","in_eskilstuna"]:
            st.session_state[k] = 0

        st.session_state["in_alskar"] = alskar_val
        st.session_state["in_sover"]  = sover_val
        # Svart-scen: personal deltagit ska vara 0 enligt senaste kravet
        st.session_state["in_personal_deltagit"] = 0
        # Bonus deltagit ‚Äì s√§tt 0 h√§r; live-ber√§kning kommer visa enligt bonus-reglerna
        st.session_state["in_bonus_deltagit"] = 0

    elif scenario == "Vila p√• jobbet":
        # Slumpa fitta, rumpa, DP, DPP, DAP, TAP mellan MIN/MAX i historiken
        for col, key in [
            ("Fitta", "in_fitta"),
            ("Rumpa", "in_rumpa"),
            ("DP", "in_dp"),
            ("DPP", "in_dpp"),
            ("DAP", "in_dap"),
            ("TAP", "in_tap"),
        ]:
            mn, mx = _get_min_max_from_sheet(col)
            st.session_state[key] = random.randint(mn, mx) if mx >= mn else 0

        # √ñvriga k√§llor (m√§n etc.) = 0 enligt tidigare logik
        for k in ["in_men","in_svarta","in_pappan","in_grannar","in_nils_vanner","in_nils_familj","in_bekanta"]:
            st.session_state[k] = 0
        # Eskilstuna: enligt intervall i sidopanelen
        st.session_state["in_eskilstuna"] = _eskilstuna_random()

        st.session_state["in_alskar"] = 12
        st.session_state["in_sover"]  = 1
        st.session_state["in_personal_deltagit"] = personal_val
        st.session_state["in_bonus_deltagit"] = 0  # live-ber√§kning hanterar bonuslogik

    elif scenario == "Vila i hemmet (7 dagar)":
        # F√∂rhandsifyll f√∂r dag 1 i input (alla 7 skapas inte h√§r ‚Äî du f√•r en separat knapp ‚ÄúGenerera 7 rader‚Äù senare)
        # Slumpa samma set (fitta,rumpa,dp,dpp,dap,tap) som f√∂r ‚ÄúVila p√• jobbet‚Äù
        for col, key in [
            ("Fitta", "in_fitta"),
            ("Rumpa", "in_rumpa"),
            ("DP", "in_dp"),
            ("DPP", "in_dpp"),
            ("DAP", "in_dap"),
            ("TAP", "in_tap"),
        ]:
            mn, mx = _get_min_max_from_sheet(col)
            st.session_state[key] = random.randint(mn, mx) if mx >= mn else 0

        # Dag 1: m√§n-relaterade = 0, Eskilstuna enligt intervall
        for k in ["in_men","in_svarta","in_pappan","in_grannar","in_nils_vanner","in_nils_familj","in_bekanta"]:
            st.session_state[k] = 0
        st.session_state["in_eskilstuna"] = _eskilstuna_random()

        st.session_state["in_alskar"] = 6
        st.session_state["in_sover"]  = 0  # dag 1 brukar vara 0; (senare dag 6 blir 1 i genereringen)
        st.session_state["in_personal_deltagit"] = personal_val
        st.session_state["in_bonus_deltagit"] = 0

    st.rerun()

# ====== Datum/veckodag f√∂r aktuell scen (ej sheets-anrop) ======
scen, rad_datum, veckodag = _current_scene_info()

# ====== INPUT ‚Äì Exakt ordning ======
st.markdown("---")
st.subheader("‚ûï Input (i r√§tt ordning)")

cA, cB, cC, cD = st.columns(4)
with cA:
    in_men     = st.number_input(_get_label(LABELS,"M√§n"),    min_value=0, step=1, value=st.session_state.get("in_men", 0), key="in_men")
    in_fitta   = st.number_input("Fitta",  min_value=0, step=1, value=st.session_state.get("in_fitta", 0), key="in_fitta")
    in_dp      = st.number_input("DP",     min_value=0, step=1, value=st.session_state.get("in_dp", 0), key="in_dp")
    in_dap     = st.number_input("DAP",    min_value=0, step=1, value=st.session_state.get("in_dap", 0), key="in_dap")
    in_pappan  = st.number_input(_get_label(LABELS,"Pappans v√§nner"), min_value=0, step=1, value=st.session_state.get("in_pappan", 0), key="in_pappan")
    in_nils_v  = st.number_input(_get_label(LABELS,"Nils v√§nner"),    min_value=0, step=1, value=st.session_state.get("in_nils_vanner", 0), key="in_nils_vanner")
    in_bekanta = st.number_input(_get_label(LABELS,"Bekanta"),        min_value=0, step=1, value=st.session_state.get("in_bekanta", 0), key="in_bekanta")
    in_bonus_d = st.number_input(_get_label(LABELS,"Bonus deltagit"), min_value=0, step=1, value=st.session_state.get("in_bonus_deltagit", 0), key="in_bonus_deltagit")
    in_alskar  = st.number_input("√Ñlskar", min_value=0, step=1, value=st.session_state.get("in_alskar", 0), key="in_alskar")
    in_tid_s   = st.number_input("Tid S (sek)", min_value=0, step=1, value=st.session_state.get("in_tid_s", 60), key="in_tid_s")
    in_dt_tid  = st.number_input("DT tid (sek/kille)", min_value=0, step=1, value=st.session_state.get("in_dt_tid", 60), key="in_dt_tid")

with cB:
    in_svarta  = st.number_input(_get_label(LABELS,"Svarta"), min_value=0, step=1, value=st.session_state.get("in_svarta", 0), key="in_svarta")
    in_rumpa   = st.number_input("Rumpa",  min_value=0, step=1, value=st.session_state.get("in_rumpa", 0), key="in_rumpa")
    in_dpp     = st.number_input("DPP",    min_value=0, step=1, value=st.session_state.get("in_dpp", 0), key="in_dpp")
    in_tap     = st.number_input("TAP",    min_value=0, step=1, value=st.session_state.get("in_tap", 0), key="in_tap")
    in_grannar = st.number_input(_get_label(LABELS,"Grannar"),        min_value=0, step=1, value=st.session_state.get("in_grannar", 0), key="in_grannar")
    in_nils_f  = st.number_input(_get_label(LABELS,"Nils familj"),    min_value=0, step=1, value=st.session_state.get("in_nils_familj", 0), key="in_nils_familj")
    in_esk     = st.number_input(_get_label(LABELS,"Eskilstuna killar"), min_value=0, step=1, value=st.session_state.get("in_eskilstuna", 0), key="in_eskilstuna")
    in_person  = st.number_input(_get_label(LABELS,"Personal deltagit"), min_value=0, step=1, value=st.session_state.get("in_personal_deltagit", _personal_from_pct()), key="in_personal_deltagit")
    in_sover   = st.number_input("Sover med (0 eller 1)", min_value=0, max_value=1, step=1, value=st.session_state.get("in_sover", 0), key="in_sover")
    in_tid_d   = st.number_input("Tid D (sek)", min_value=0, step=1, value=st.session_state.get("in_tid_d", 60), key="in_tid_d")
    in_dt_vila = st.number_input("DT vila (sek/kille)", min_value=0, step=1, value=st.session_state.get("in_dt_vila", 3), key="in_dt_vila")

with cC:
    # Tom kolumn f√∂r luft / framtida f√§lt
    pass

with cD:
    in_vila    = st.number_input("Vila (sek)",  min_value=0, step=1, value=st.session_state.get("in_vila", 7), key="in_vila")
    # H√§r kan vi l√§gga ev. extra f√§lt senare
    avgift_val = st.number_input("Avgift (USD, per rad)", min_value=0.0, step=1.0, value=float(CFG["avgift_usd"]), key="in_avgift")

# ====== Varningsflaggor (max) ‚Äì endast visning ======
if in_pappan > int(CFG["MAX_PAPPAN"]):
    st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {in_pappan} > max {int(CFG['MAX_PAPPAN'])}</span>", unsafe_allow_html=True)
if in_grannar > int(CFG["MAX_GRANNAR"]):
    st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {in_grannar} > max {int(CFG['MAX_GRANNAR'])}</span>", unsafe_allow_html=True)
if in_nils_v > int(CFG["MAX_NILS_VANNER"]):
    st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {in_nils_v} > max {int(CFG['MAX_NILS_VANNER'])}</span>", unsafe_allow_html=True)
if in_nils_f > int(CFG["MAX_NILS_FAMILJ"]):
    st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {in_nils_f} > max {int(CFG['MAX_NILS_FAMILJ'])}</span>", unsafe_allow_html=True)
if in_bekanta > int(CFG["MAX_BEKANTA"]):
    st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {in_bekanta} > max {int(CFG['MAX_BEKANTA'])}</span>", unsafe_allow_html=True)

# app.py ‚Äî DEL 3/6  (Live-f√∂rhandsber√§kning + Ekonomi + √Ölder)

# ====== Hj√§lp: r√§kna √•lder vid datum ======
def _age_on(d: date, birth: date) -> int:
    return d.year - birth.year - ((d.month, d.day) < (birth.month, birth.day))

# ====== Bygg grund_preview fr√•n inputs (utan att skriva till Sheets) ======
grund_preview = {
    "Typ": scenario if scenario != "Ny scen" else "",
    "Veckodag": veckodag,
    "Scen": scen,

    # Inputf√§lt (i r√§tt ordning)
    "M√§n": in_men,
    "Svarta": in_svarta,
    "Fitta": in_fitta,
    "Rumpa": in_rumpa,
    "DP": in_dp,
    "DPP": in_dpp,
    "DAP": in_dap,
    "TAP": in_tap,

    "Pappans v√§nner": in_pappan,
    "Grannar": in_grannar,
    "Nils v√§nner": in_nils_v,
    "Nils familj": in_nils_f,
    "Bekanta": in_bekanta,
    "Eskilstuna killar": in_esk,

    "Bonus killar": 0,  # (r√§knas i ber√§kningar utifr√•n prenumeranter/logik)
    "Bonus deltagit": in_bonus_d,  # visas live enligt input (ber√§kningar f√•r ocks√• s√§tta v√§rde i resultatet)
    "Personal deltagit": in_person,

    "√Ñlskar": in_alskar,
    "Sover med": in_sover,

    "Tid S": in_tid_s,
    "Tid D": in_tid_d,
    "Vila": in_vila,
    "DT tid (sek/kille)": in_dt_tid,
    "DT vila (sek/kille)": in_dt_vila,

    "Nils": 0,  # separat f√§lt vid behov
    "Avgift": float(avgift_val),

    # Viktigt: total personal (alla ska f√• l√∂n oavsett deltagit)
    "PROD_STAFF": int(CFG.get("PROD_STAFF", 800)),
}

# ====== Live-ber√§kning (ingen skrivning) ======
preview = {}
try:
    if callable(calc_row_values):
        # Anropa POSITIONELLT: (grund_dict, rad_datum, f√∂delsedatum, starttid)
        preview = calc_row_values(grund_preview, rad_datum, CFG["f√∂delsedatum"], CFG["starttid"])
    else:
        preview = {}
except Exception as e:
    st.warning(f"F√∂rhandsber√§kning misslyckades: {e}")
    preview = {}

# ====== √Ölder live ======
alder_live = _age_on(rad_datum, CFG["f√∂delsedatum"])

# ====== Live-visning ======
st.markdown("---")
st.subheader("üîé F√∂rhandsvisning (innan spar)")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Datum / veckodag", f"{rad_datum} / {veckodag}")
    st.metric("√Ölder (Malin)", f"{alder_live} √•r")
    st.metric("Totalt m√§n (raden)", int(preview.get("Totalt M√§n", 0)))
with col2:
    st.metric("Summa tid", preview.get("Summa tid", "-"))
    st.metric("Summa tid (sek)", int(preview.get("Summa tid (sek)", 0)))
    st.metric("Tid per kille (sek)", int(preview.get("Tid per kille (sek)", 0)))
with col3:
    st.metric("H√•ngel (m:s/kille)", preview.get("H√•ngel (m:s/kille)", "-"))
    st.metric("Suger per kille (sek)", int(preview.get("Suger per kille (sek)", 0)))
    st.metric("Klockan", preview.get("Klockan", "-"))

# Visa √§ven Bonus deltagit som faktisk siffra som anv√§nds i ber√§kning
st.caption(f"Bonus deltagit (input): {in_bonus_d}  ‚Ä¢  Ber√§knad (preview): {preview.get('Bonus deltagit','-')}")

# ====== Ekonomi (live) ======
st.markdown("#### üíµ Ekonomi (live)")
ec1, ec2, ec3, ec4 = st.columns(4)
with ec1:
    st.metric("Prenumeranter (rad)", int(preview.get("Prenumeranter", 0)))
    st.metric("Avgift (rad)", _usd(preview.get("Avgift", avgift_val)))
with ec2:
    st.metric("Int√§kter (rad)", _usd(preview.get("Int√§kter", 0)))
    st.metric("L√∂n Malin", _usd(preview.get("L√∂n Malin", 0)))
with ec3:
    st.metric("Utgift m√§n", _usd(preview.get("Utgift m√§n", 0)))
    st.metric("Int√§kt K√§nner", _usd(preview.get("Int√§kt K√§nner", 0)))
with ec4:
    st.metric("Vinst (rad)", _usd(preview.get("Vinst", 0)))

# ====== Info om vilka v√§rden som INTE r√§knas in i scenernas k√∂rtid ======
with st.expander("‚ÑπÔ∏è Tidslogik (live)", expanded=False):
    st.write(
        "- **Summa tid** inneh√•ller: Summa S (inkl. DT tid), Summa D, Summa TP, Summa Vila (inkl. DT vila).\n"
        "- **√Ñlskar/Sover med** adderas till **Klockan** men **ing√•r inte** i scenernas k√∂rtid.\n"
        "- **H√•ngel** och **Suger** visas endast i live f√∂r uppf√∂ljning.\n"
        "- **L√∂n/Utgift m√§n** r√§knar med hela personalstyrkan (`PROD_STAFF`), oberoende av 'Personal deltagit'."
    )

# app.py ‚Äî DEL 4/6  (Spara-fl√∂de, Auto-max, batch-sparning f√∂r 7-dagars)

ROW_COUNT_KEY = "ROW_COUNT"

# ---- Hj√§lp: bygg en "grund"-rad fr√•n nuvarande inputs (f√∂r enkelrads-scenario) ----
def _build_base_from_inputs(scen_label: str) -> dict:
    return {
        "Typ": scen_label if scen_label != "Ny scen" else "",
        "Veckodag": veckodag,
        "Scen": scen,
        "M√§n": in_men,
        "Svarta": in_svarta,
        "Fitta": in_fitta,
        "Rumpa": in_rumpa,
        "DP": in_dp,
        "DPP": in_dpp,
        "DAP": in_dap,
        "TAP": in_tap,
        "Pappans v√§nner": in_pappan,
        "Grannar": in_grannar,
        "Nils v√§nner": in_nils_v,
        "Nils familj": in_nils_f,
        "Bekanta": in_bekanta,
        "Eskilstuna killar": in_esk,
        "Bonus killar": 0,                 # r√§knas i ber√§kningar
        "Bonus deltagit": in_bonus_d,      # enligt input/buffert
        "Personal deltagit": in_person,
        "√Ñlskar": in_alskar,
        "Sover med": in_sover,
        "Tid S": in_tid_s,
        "Tid D": in_tid_d,
        "Vila": in_vila,
        "DT tid (sek/kille)": in_dt_tid,
        "DT vila (sek/kille)": in_dt_vila,
        "Nils": 0,
        "Avgift": float(avgift_val),
        "PROD_STAFF": int(CFG.get("PROD_STAFF", 800)),  # hela personalstyrkan ska f√• l√∂n
    }

# ---- Hj√§lp: se till att header finns (kallas vid spar) ----
def _ensure_header_on_save():
    header = _retry_call(sheet.row_values, 1)
    if not header:
        _retry_call(sheet.insert_row, DEFAULT_COLUMNS, 1)
        st.session_state[ROW_COUNT_KEY] = 0
        return DEFAULT_COLUMNS
    # migrera ev. saknade
    missing = [c for c in DEFAULT_COLUMNS if c not in header]
    if missing:
        from gspread.utils import rowcol_to_a1
        new_header = header + missing
        end_cell = rowcol_to_a1(1, len(new_header))
        _retry_call(sheet.update, f"A1:{end_cell}", [new_header])
        return new_header
    return header

# ---- Auto-max kontroll f√∂r k√§llor (g√∂rs vid spar) ----
def _compute_over_max_for(base: dict) -> dict:
    over = {}
    if base.get("Pappans v√§nner", 0) > int(CFG["MAX_PAPPAN"]):
        over["Pappans v√§nner"] = {"current_max": int(CFG["MAX_PAPPAN"]), "new_value": int(base["Pappans v√§nner"]), "max_key": "MAX_PAPPAN"}
    if base.get("Grannar", 0) > int(CFG["MAX_GRANNAR"]):
        over["Grannar"] = {"current_max": int(CFG["MAX_GRANNAR"]), "new_value": int(base["Grannar"]), "max_key": "MAX_GRANNAR"}
    if base.get("Nils v√§nner", 0) > int(CFG["MAX_NILS_VANNER"]):
        over["Nils v√§nner"] = {"current_max": int(CFG["MAX_NILS_VANNER"]), "new_value": int(base["Nils v√§nner"]), "max_key": "MAX_NILS_VANNER"}
    if base.get("Nils familj", 0) > int(CFG["MAX_NILS_FAMILJ"]):
        over["Nils familj"] = {"current_max": int(CFG["MAX_NILS_FAMILJ"]), "new_value": int(base["Nils familj"]), "max_key": "MAX_NILS_FAMILJ"}
    if base.get("Bekanta", 0) > int(CFG["MAX_BEKANTA"]):
        over["Bekanta"] = {"current_max": int(CFG["MAX_BEKANTA"]), "new_value": int(base["Bekanta"]), "max_key": "MAX_BEKANTA"}
    return over

def _apply_over_max_updates(over: dict):
    # uppdatera Inst√§llningar (max) n√§r anv√§ndaren bekr√§ftar
    for _, info in over.items():
        key = info["max_key"]
        new_val = int(info["new_value"])
        _save_setting(key, str(new_val))
        CFG[key] = new_val

# ---- Spara EN rad till Sheets ----
def _save_one_row(base: dict, row_date: date, veckodag_str: str):
    _ensure_header_on_save()
    # k√∂r den riktiga rad-ber√§kningen
    ber = calc_row_values(base, row_date, CFG["f√∂delsedatum"], CFG["starttid"])
    ber["Datum"] = row_date.isoformat()
    # skriv i kolumnordning
    header = _retry_call(sheet.row_values, 1)
    cols = header if header else DEFAULT_COLUMNS
    out = [ber.get(c, "") for c in cols]
    _retry_call(sheet.append_row, out)
    # bumpa r√§knare
    st.session_state[ROW_COUNT_KEY] = st.session_state.get(ROW_COUNT_KEY, 0) + 1

# ---- Spara antingen EN rad, eller en lista av rader (t.ex. 7 f√∂r "Vila i hemmet") ----
def _save_rows(rows_to_save: list):
    # rows_to_save: lista av tuples (base_dict, datum, veckodag_str)
    for base, dt, vd in rows_to_save:
        _save_one_row(base, dt, vd)

# ========= UI: Spara-knapp (hanterar Auto-max & batch) =========
st.markdown("---")
st.subheader("üíæ Spara")

# Buffert: om scenario "Vila i hemmet" genererade 7 dagar ligger de h√§r (fr√•n Del 2)
multi = st.session_state.get("MULTI_PREVIEW_ROWS", None)

def _make_rows_payload():
    if multi:
        # spara alla 7
        return [(row["base"], row["date"], row["veckodag"]) for row in multi]
    # annars spara den aktuella
    single_base = _build_base_from_inputs(scenario)
    return [(single_base, rad_datum, veckodag)]

# F√∂rhandsvisa vilka rader som kommer sparas
with st.expander("Visa rader som kommer att sparas", expanded=False):
    payload = _make_rows_payload()
    st.write(f"Antal rader: {len(payload)}")
    for i, (b, dt, vd) in enumerate(payload, start=1):
        st.write(f"**{i}.** {dt} ({vd}) ‚Äî Typ: {b.get('Typ','') or 'Ny scen'} ‚Äî M√§n: {b.get('M√§n',0)}, Svarta: {b.get('Svarta',0)}, Bonus deltagit: {b.get('Bonus deltagit',0)}, Personal deltagit: {b.get('Personal deltagit',0)}")

# Klick = g√∂r √∂ver-max-kontroll; om n√•got √∂ver -> fr√•ga; annars skriv direkt
if st.button("üíæ Spara nu"):
    payload = _make_rows_payload()
    # samla alla over_max √∂ver samtliga rader
    over_all = {}
    for (b, _dt, _vd) in payload:
        over = _compute_over_max_for(b)
        if over:
            over_all.update(over)

    if over_all:
        # visa bekr√§ftelse
        st.session_state["PENDING_SAVE_ROWS"] = payload
        st.session_state["PENDING_OVERMAX"] = over_all
        st.warning("Vissa v√§rden √∂verstiger nuvarande max. Vill du uppdatera max och forts√§tta spara?")
    else:
        try:
            _save_rows(payload)
            st.success(f"Sparade {len(payload)} rad(er) ‚úÖ")
            # t√∂m buffert f√∂r 7-dagars om den fanns
            st.session_state.pop("MULTI_PREVIEW_ROWS", None)
            st.rerun()
        except Exception as e:
            st.error(f"Kunde inte spara: {e}")

# Bekr√§ftelsedialog f√∂r Auto-max
if "PENDING_SAVE_ROWS" in st.session_state:
    over_all = st.session_state.get("PENDING_OVERMAX", {})
    if over_all:
        with st.expander("Detaljer om max-uppdateringar", expanded=True):
            for f, info in over_all.items():
                st.write(f"- **{f}**: max {info['current_max']} ‚Üí **{info['new_value']}**")
        c1, c2 = st.columns(2)
        with c1:
            if st.button("‚úÖ Uppdatera max och spara"):
                try:
                    _apply_over_max_updates(over_all)
                    _save_rows(st.session_state["PENDING_SAVE_ROWS"])
                    st.success(f"Sparade {len(st.session_state['PENDING_SAVE_ROWS'])} rad(er) ‚úÖ")
                    st.session_state.pop("PENDING_SAVE_ROWS", None)
                    st.session_state.pop("PENDING_OVERMAX", None)
                    st.session_state.pop("MULTI_PREVIEW_ROWS", None)
                    st.rerun()
                except Exception as e:
                    st.error(f"Kunde inte spara: {e}")
        with c2:
            if st.button("‚úã Avbryt"):
                st.session_state.pop("PENDING_SAVE_ROWS", None)
                st.session_state.pop("PENDING_OVERMAX", None)
                st.info("Sparning avbruten.")

# app.py ‚Äî DEL 5/6  (Sidopanel + Statistik)

# ---------------------- SIDOPANEL: inst√§llningar & etiketter ----------------------
st.sidebar.header("Inst√§llningar")

with st.sidebar.expander("‚öôÔ∏è Konfiguration (persistent)", expanded=False):
    # --- Basv√§rden (l√§ser fr√•n CFG en g√•ng; skriver f√∂rst p√• klick) ---
    startdatum_inp = st.date_input("Historiskt startdatum",
                                   value=CFG["startdatum"],
                                   key="sb_startdatum")
    starttid_inp   = st.time_input("Starttid",
                                   value=CFG["starttid"],
                                   key="sb_starttid")
    fod_inp        = st.date_input("Malins f√∂delsedatum",
                                   value=CFG["f√∂delsedatum"],
                                   key="sb_fodelsedatum")

    # Maxk√§llor
    max_p  = st.number_input("Max Pappans v√§nner", min_value=0, step=1,
                             value=int(CFG["MAX_PAPPAN"]), key="sb_max_p")
    max_g  = st.number_input("Max Grannar",        min_value=0, step=1,
                             value=int(CFG["MAX_GRANNAR"]), key="sb_max_g")
    max_nv = st.number_input("Max Nils v√§nner",    min_value=0, step=1,
                             value=int(CFG["MAX_NILS_VANNER"]), key="sb_max_nv")
    max_nf = st.number_input("Max Nils familj",    min_value=0, step=1,
                             value=int(CFG["MAX_NILS_FAMILJ"]), key="sb_max_nf")
    max_bk = st.number_input("Max Bekanta",        min_value=0, step=1,
                             value=int(CFG["MAX_BEKANTA"]), key="sb_max_bk")

    # Produktionspersonal totalt + procent som deltar (standard 10%)
    prod_staff_inp = st.number_input("Produktionspersonal totalt",
                                     min_value=0, step=1,
                                     value=int(CFG.get("PROD_STAFF", 800)),
                                     key="sb_prod_staff")
    personal_pct_inp = st.number_input(
        "Andel personal som deltar (%)",
        min_value=0.0, max_value=100.0, step=0.1,
        value=float(st.session_state.get("personal_pct", 10.0)),
        key="sb_personal_pct"
    )

    # Eskilstuna-intervall f√∂r slump
    st.markdown("**Intervall f√∂r Eskilstuna killar (slump)**")
    esk_min_inp = st.number_input("Min", min_value=0, step=1,
                                  value=int(st.session_state.get("eskilstuna_min", 20)),
                                  key="sb_esk_min")
    esk_max_inp = st.number_input("Max", min_value=0, step=1,
                                  value=int(st.session_state.get("eskilstuna_max", 40)),
                                  key="sb_esk_max")

    # Avgift per rad
    avgift_inp = st.number_input("Avgift (USD, per ny rad)",
                                 min_value=0.0, step=1.0,
                                 value=float(CFG["avgift_usd"]),
                                 key="sb_avgift")

    st.markdown("---")
    st.markdown("**Etiketter (p√•verkar endast visning)**")
    lab_p   = st.text_input("Etikett: Pappans v√§nner",   value=LABELS.get("Pappans v√§nner",""), key="sb_lab_p")
    lab_g   = st.text_input("Etikett: Grannar",          value=LABELS.get("Grannar",""), key="sb_lab_g")
    lab_nv  = st.text_input("Etikett: Nils v√§nner",      value=LABELS.get("Nils v√§nner",""), key="sb_lab_nv")
    lab_nf  = st.text_input("Etikett: Nils familj",      value=LABELS.get("Nils familj",""), key="sb_lab_nf")
    lab_bk  = st.text_input("Etikett: Bekanta",          value=LABELS.get("Bekanta",""), key="sb_lab_bk")
    lab_esk = st.text_input("Etikett: Eskilstuna killar",value=LABELS.get("Eskilstuna killar",""), key="sb_lab_esk")
    lab_man = st.text_input("Etikett: M√§n",              value=LABELS.get("M√§n",""), key="sb_lab_man")
    lab_sva = st.text_input("Etikett: Svarta",           value=LABELS.get("Svarta",""), key="sb_lab_sva")
    lab_kann= st.text_input("Etikett: K√§nner",           value=LABELS.get("K√§nner",""), key="sb_lab_kann")
    lab_per = st.text_input("Etikett: Personal deltagit",value=LABELS.get("Personal deltagit",""), key="sb_lab_per")
    lab_bon = st.text_input("Etikett: Bonus killar",     value=LABELS.get("Bonus killar",""), key="sb_lab_bon")
    lab_bod = st.text_input("Etikett: Bonus deltagit",   value=LABELS.get("Bonus deltagit",""), key="sb_lab_bod")

    # Spara inst√§llningar
    if st.button("üíæ Spara inst√§llningar", key="sb_save"):
        try:
            # Persist
            _save_setting("startdatum", startdatum_inp.isoformat())
            _save_setting("starttid", starttid_inp.strftime("%H:%M"))
            _save_setting("f√∂delsedatum", fod_inp.isoformat())

            _save_setting("MAX_PAPPAN", str(int(max_p)))
            _save_setting("MAX_GRANNAR", str(int(max_g)))
            _save_setting("MAX_NILS_VANNER", str(int(max_nv)))
            _save_setting("MAX_NILS_FAMILJ", str(int(max_nf)))
            _save_setting("MAX_BEKANTA", str(int(max_bk)))

            _save_setting("PROD_STAFF", str(int(prod_staff_inp)))
            _save_setting("avgift_usd", str(float(avgift_inp)))

            # Etikett-override
            _save_setting("LABEL_Pappans v√§nner", lab_p or "", "")
            _save_setting("LABEL_Grannar",        lab_g or "", "")
            _save_setting("LABEL_Nils v√§nner",    lab_nv or "", "")
            _save_setting("LABEL_Nils familj",    lab_nf or "", "")
            _save_setting("LABEL_Bekanta",        lab_bk or "", "")
            _save_setting("LABEL_Eskilstuna killar", lab_esk or "", "")
            _save_setting("LABEL_M√§n", lab_man or "", "")
            _save_setting("LABEL_Svarta", lab_sva or "", "")
            _save_setting("LABEL_K√§nner", lab_kann or "", "")
            _save_setting("LABEL_Personal deltagit", lab_per or "", "")
            _save_setting("LABEL_Bonus killar", lab_bon or "", "")
            _save_setting("LABEL_Bonus deltagit", lab_bod or "", "")

            # Uppdatera runtime-CFG / session_state (utan fler Sheets-anrop)
            CFG["startdatum"]       = startdatum_inp
            CFG["starttid"]         = starttid_inp
            CFG["f√∂delsedatum"]     = fod_inp
            CFG["MAX_PAPPAN"]       = int(max_p)
            CFG["MAX_GRANNAR"]      = int(max_g)
            CFG["MAX_NILS_VANNER"]  = int(max_nv)
            CFG["MAX_NILS_FAMILJ"]  = int(max_nf)
            CFG["MAX_BEKANTA"]      = int(max_bk)
            CFG["PROD_STAFF"]       = int(prod_staff_inp)
            CFG["avgift_usd"]       = float(avgift_inp)

            st.session_state.personal_pct  = float(personal_pct_inp)
            st.session_state.eskilstuna_min = int(min(esk_min_inp, esk_max_inp))
            st.session_state.eskilstuna_max = int(max(esk_min_inp, esk_max_inp))

            # Uppdatera LABELS i minnet
            for k, v in [
                ("Pappans v√§nner", lab_p), ("Grannar", lab_g), ("Nils v√§nner", lab_nv),
                ("Nils familj", lab_nf), ("Bekanta", lab_bk), ("Eskilstuna killar", lab_esk),
                ("M√§n", lab_man), ("Svarta", lab_sva), ("K√§nner", lab_kann),
                ("Personal deltagit", lab_per), ("Bonus killar", lab_bon), ("Bonus deltagit", lab_bod)
            ]:
                if v is not None and v.strip() != "":
                    LABELS[k] = v.strip()

            st.success("Inst√§llningar & etiketter sparade ‚úÖ")
            st.rerun()
        except Exception as e:
            st.error(f"Kunde inte spara inst√§llningarna: {e}")

# ------------------------------ STATISTIK-VY -----------------------------------
if view == "Statistik":
    st.header("üìä Statistik")

    try:
        rows = _retry_call(sheet.get_all_records)
    except Exception as e:
        st.warning(f"Kunde inte l√§sa data: {e}")
        st.stop()

    # Hj√§lpare
    def _safe_i(x): return _safe_int(x, 0)

    def _row_tot_men(r):
        # Om "Totalt M√§n" finns, anv√§nd den. Annars r√§kna ihop komponenterna.
        if "Totalt M√§n" in r and str(r.get("Totalt M√§n","")).strip() != "":
            return _safe_i(r.get("Totalt M√§n", 0))
        return (
            _safe_i(r.get("M√§n", 0)) + _safe_i(r.get("K√§nner", 0)) + _safe_i(r.get("Svarta", 0)) +
            _safe_i(r.get("Bekanta", 0)) + _safe_i(r.get("Eskilstuna killar", 0)) +
            _safe_i(r.get("Bonus deltagit", 0)) + _safe_i(r.get("Personal deltagit", 0))
        )

    # Bas
    antal_scener = 0
    privat_gb_cnt = 0
    totalt_man_sum = 0
    bonus_deltagit_sum = 0
    personal_deltagit_sum = 0

    svarta_like_sum = 0  # Svarta + Bonus deltagit r√§knas som svarta i andel
    tot_for_andel_svarta = 0

    # Prenumeranter
    from datetime import timedelta as _td
    cutoff = date.today() - _td(days=30)
    total_pren = 0
    aktiva_pren = 0

    for r in rows:
        typ = (r.get("Typ") or "").strip()
        tot_m = _row_tot_men(r)

        if tot_m > 0:
            antal_scener += 1
        elif _safe_i(r.get("K√§nner", 0)) > 0:
            privat_gb_cnt += 1

        totalt_man_sum += tot_m

        svarta_like_sum += _safe_i(r.get("Svarta", 0)) + _safe_i(r.get("Bonus deltagit", 0))
        tot_for_andel_svarta += max(0, tot_m)

        bonus_deltagit_sum   += _safe_i(r.get("Bonus deltagit", 0))
        personal_deltagit_sum+= _safe_i(r.get("Personal deltagit", 0))

        if typ not in ("Vila p√• jobbet", "Vila i hemmet"):
            total_pren += _safe_i(r.get("Prenumeranter", 0))
            d = _parse_iso_date(r.get("Datum", ""))
            if d and d >= cutoff:
                aktiva_pren += _safe_i(r.get("Prenumeranter", 0))

    andel_svarta_pct = round((svarta_like_sum / tot_for_andel_svarta) * 100, 2) if tot_for_andel_svarta > 0 else 0.0

    # Metrik
    c1, c2, c3, c4 = st.columns(4)
    with c1: st.metric("Antal scener", antal_scener)
    with c2: st.metric("Privat GB", privat_gb_cnt)
    with c3: st.metric("Totalt m√§n (summa)", totalt_man_sum)
    with c4: st.metric("Andel svarta (%)", andel_svarta_pct)

    c5, c6 = st.columns(2)
    with c5: st.metric("Bonus killar (deltagit, sum)", bonus_deltagit_sum)
    with c6: st.metric("Personal (deltagit, sum)", personal_deltagit_sum)

    st.markdown("---")
    st.subheader("üë• Prenumeranter")
    pc1, pc2 = st.columns(2)
    with pc1: st.metric("Prenumeranter (totalt)", int(total_pren))
    with pc2: st.metric("Aktiva prenumeranter (30 dagar)", int(aktiva_pren))

    st.markdown("---")
    st.subheader("üî© DP/DPP/DAP/TAP ‚Äî Summa och snitt per scen")
    dp_sum  = sum(_safe_i(r.get("DP", 0))  for r in rows if _safe_i(r.get("DP", 0))  > 0)
    dpp_sum = sum(_safe_i(r.get("DPP", 0)) for r in rows if _safe_i(r.get("DPP", 0)) > 0)
    dap_sum = sum(_safe_i(r.get("DAP", 0)) for r in rows if _safe_i(r.get("DAP", 0)) > 0)
    tap_sum = sum(_safe_i(r.get("TAP", 0)) for r in rows if _safe_i(r.get("TAP", 0)) > 0)

    denom_scen = antal_scener if antal_scener > 0 else 1
    dp_avg  = round(dp_sum  / denom_scen, 2) if antal_scener > 0 else 0.0
    dpp_avg = round(dpp_sum / denom_scen, 2) if antal_scener > 0 else 0.0
    dap_avg = round(dap_sum / denom_scen, 2) if antal_scener > 0 else 0.0
    tap_avg = round(tap_sum / denom_scen, 2) if antal_scener > 0 else 0.0

    s1, s2, s3, s4 = st.columns(4)
    with s1: st.metric("Summa DP (>0)", dp_sum)
    with s2: st.metric("Summa DPP (>0)", dpp_sum)
    with s3: st.metric("Summa DAP (>0)", dap_sum)
    with s4: st.metric("Summa TAP (>0)", tap_sum)

    a1, a2, a3, a4 = st.columns(4)
    with a1: st.metric("Snitt DP / scen", dp_avg)
    with a2: st.metric("Snitt DPP / scen", dpp_avg)
    with a3: st.metric("Snitt DAP / scen", dap_avg)
    with a4: st.metric("Snitt TAP / scen", tap_avg)

    st.stop()

# app.py ‚Äî DEL 6/6  (Data-tabell, radering & sm√•hj√§lpare)

# ------------------------------ VISA DATA (frivillig l√§sning) ------------------------------
st.markdown("---")
st.subheader("üìä Aktuella data")
try:
    rows = _retry_call(sheet.get_all_records)
    if rows:
        st.dataframe(rows, use_container_width=True)
    else:
        st.info("Inga datarader √§nnu.")
except Exception as e:
    st.warning(f"Kunde inte l√§sa data: {e}")

# -------------------------------- RADERA RAD (explicit √•tg√§rd) -----------------------------
st.subheader("üóë Ta bort rad")
try:
    # ROW_COUNT h√•lls uppdaterad endast n√§r vi sparar/ta bort (inte vid varje keypress)
    total_rows = st.session_state.get(ROW_COUNT_KEY, 0)
    if total_rows <= 0:
        # Om vi inte har n√•gon cache (t.ex. precis startat), f√∂rs√∂k l√§sa snabbt EN g√•ng:
        try:
            vals = _retry_call(sheet.col_values, 1)  # kolumn A (Datum)
            total_rows = max(0, len(vals) - 1) if (vals and vals[0] == "Datum") else len(vals)
            st.session_state[ROW_COUNT_KEY] = total_rows
        except Exception:
            total_rows = 0

    if total_rows > 0:
        idx = st.number_input(
            "Radnummer att ta bort (1 = f√∂rsta dataraden)",
            min_value=1, max_value=total_rows, step=1, value=1, key="del_idx"
        )
        if st.button("Ta bort vald rad", key="btn_del_row"):
            try:
                _retry_call(sheet.delete_rows, int(idx) + 1)  # +1 pga header
                st.session_state[ROW_COUNT_KEY] = max(0, st.session_state.get(ROW_COUNT_KEY, 0) - 1)
                st.success(f"Rad {idx} borttagen.")
                st.rerun()
            except Exception as e:
                st.error(f"Kunde inte ta bort rad: {e}")
    else:
        st.caption("Ingen datarad att ta bort.")
except Exception as e:
    st.warning(f"Kunde inte initiera radering: {e}")

# ----------------------------------- SLUT P√Ö APP -----------------------------------
