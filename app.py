import streamlit as st
import pandas as pd
import datetime
import random
import gspread
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="MalinApp", layout="wide")

SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
gc = gspread.authorize(credentials)
sh = gc.open_by_url(SPREADSHEET_URL)

def get_or_create_worksheet(sh, name, headers):
    try:
        ws = sh.worksheet(name)
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title=name, rows="1000", cols=str(len(headers)))
        ws.append_row(headers)
    return ws

def l√§s_inst√§llningar():
    inst_ws = get_or_create_worksheet(sh, "Inst√§llningar", ["Inst√§llning", "V√§rde"])
    inst_data = inst_ws.get_all_records()
    inst = {}
    for rad in inst_data:
        v√§rde_str = str(rad["V√§rde"]).replace(",", ".")
        try:
            inst[rad["Inst√§llning"]] = float(v√§rde_str)
        except ValueError:
            inst[rad["Inst√§llning"]] = rad["V√§rde"]
    return inst

def spara_inst√§llningar(inst):
    inst_ws = get_or_create_worksheet(sh, "Inst√§llningar", ["Inst√§llning", "V√§rde"])
    inst_ws.clear()
    inst_ws.append_row(["Inst√§llning", "V√§rde"])
    for k, v in inst.items():
        inst_ws.append_row([k, v])

inst = l√§s_inst√§llningar()

# Sidopanel f√∂r inst√§llningar
with st.sidebar:
    st.header("üîß Inst√§llningar")
    startdatum = st.text_input("Startdatum (√Ö√Ö√Ö√Ö-MM-DD)", value=inst.get("Startdatum", "2014-03-26"))
    namn = st.text_input("Kvinnans namn", value=inst.get("Namn", "Malin"))
    f√∂delse = st.text_input("F√∂delsedatum (√Ö√Ö√Ö√Ö-MM-DD)", value=inst.get("F√∂delsedatum", "1984-03-26"))

    kompisar = st.number_input("Totalt antal kompisar", min_value=0, value=int(inst.get("Kompisar", 0)))
    pappans_v√§nner = st.number_input("Totalt antal pappans v√§nner", min_value=0, value=int(inst.get("Pappans v√§nner", 0)))
    nils_v√§nner = st.number_input("Totalt antal Nils v√§nner", min_value=0, value=int(inst.get("Nils v√§nner", 0)))
    nils_familj = st.number_input("Totalt antal Nils familj", min_value=0, value=int(inst.get("Nils familj", 0)))

    om_spara = st.button("Spara inst√§llningar")
    if om_spara:
        inst.update({
            "Startdatum": startdatum,
            "Namn": namn,
            "F√∂delsedatum": f√∂delse,
            "Kompisar": kompisar,
            "Pappans v√§nner": pappans_v√§nner,
            "Nils v√§nner": nils_v√§nner,
            "Nils familj": nils_familj
        })
        spara_inst√§llningar(inst)
        st.success("Inst√§llningar sparade!")
        st.rerun()

# Skapa huvuddatan vid behov
huvud_headers = [
    "Datum", "Typ", "M√§n", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
    "Vaginal (enkel)", "Anal (enkel)",
    "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj",
    "Tid per man (min)", "Tid per man (sek)", "Deep throat (sek)", "DT total tid (sek)",
    "DT vilotid (sek)", "DT m√§n", "Total tid (sek)",
    "√Ñlskar med", "Sover med", "Int√§kt bolag", "Int√§kt kvinna", "Int√§kt m√§n", "Int√§kt kompisar", "Prenumeranter", "Aktiekurs"
]
df_ws = get_or_create_worksheet(sh, "Data", huvud_headers)
data = df_ws.get_all_records()
df = pd.DataFrame(data)

st.subheader("üé¨ L√§gg till ny scen")

today = pd.to_datetime(df["Datum"].max(), errors="coerce") if not df.empty else pd.to_datetime(inst["Startdatum"])
n√§sta_datum = today + pd.Timedelta(days=1)
st.markdown(f"N√§sta datum: **{n√§sta_datum.strftime('%Y-%m-%d')}**")

med_typ = st.selectbox("Typ av rad", ["Scen", "Vila inspelningsplats", "Vila hem"])
antal_m√§n = st.number_input("Antal m√§n", min_value=0, value=0)
dp = st.number_input("DP", min_value=0, value=0)
dpp = st.number_input("DPP", min_value=0, value=0)
dap = st.number_input("DAP", min_value=0, value=0)
tpa = st.number_input("TPA", min_value=0, value=0)
tpp = st.number_input("TPP", min_value=0, value=0)
tap = st.number_input("TAP", min_value=0, value=0)
vag = st.number_input("Enkel vaginal", min_value=0, value=0)
anal = st.number_input("Enkel anal", min_value=0, value=0)

kompisar_raden = st.number_input("Kompisar (scenniv√•)", min_value=0, max_value=int(inst["Kompisar"]), value=0)
pappans_raden = st.number_input("Pappans v√§nner (scenniv√•)", min_value=0, max_value=int(inst["Pappans v√§nner"]), value=0)
nils_raden = st.number_input("Nils v√§nner (scenniv√•)", min_value=0, max_value=int(inst["Nils v√§nner"]), value=0)
nilsfam_raden = st.number_input("Nils familj (scenniv√•)", min_value=0, max_value=int(inst["Nils familj"]), value=0)

tid_man_min = st.number_input("Tid per man (minuter)", min_value=0.0, value=8.0, step=0.5)
dt_tid = st.number_input("Deep throat per man (sek)", min_value=0, value=30)

alskar_med = st.number_input("√Ñlskar med", min_value=0, value=0)
sover_med = st.number_input("Sover med", min_value=0, value=0)

def ber√§kna_total_tid():
    tid_per_man_sec = tid_man_min * 60
    total_tid_sec = 0

    # Trippelpenetrationer (3 m√§n, 2 min per trio)
    trippel_tid = (tpa + tpp + tap) * (2 * 60 + 15)

    # Dubbelpenetrationer (2 m√§n, 2 min per duo)
    dubbel_tid = (dp + dpp + dap) * (2 * 60 + 15)

    # Enkelpenetrationer (vaginal + anal)
    enkel_tid = (vag + anal) * (2 * 60 + 15)

    total_tid_sec += trippel_tid + dubbel_tid + enkel_tid

    # Deep throat total tid + vila
    tot_m√§n = antal_m√§n + kompisar_raden + pappans_raden + nils_raden + nilsfam_raden
    dt_total = dt_tid * tot_m√§n
    dt_vila = (tot_m√§n - 1) * 2 + (tot_m√§n // 10) * 30

    total_tid_sec += dt_total + dt_vila

    # √Ñlskar med + sover med (vardera 15 min per person)
    extra_tid = (alskar_med + sover_med) * 15 * 60
    total_tid_sec += extra_tid

    return total_tid_sec, tid_per_man_sec, dt_total, dt_vila, tot_m√§n

if st.button("Spara scenrad"):
    total_tid, tid_man_sec, dt_total, dt_vila, dt_m√§n = ber√§kna_total_tid()
    intakt_kvinna = 800
    intakt_man = (antal_m√§n - kompisar_raden) * 200
    intakt_total = antal_m√§n * 15  # 15 USD per prenumerant

    intakt_kompisar = max(0, intakt_total - intakt_kvinna - intakt_man)
    if inst["Kompisar"] > 0:
        intakt_kompisar = intakt_kompisar / inst["Kompisar"]

    ny_rad = [
        n√§sta_datum.strftime('%Y-%m-%d'), med_typ, antal_m√§n,
        dp, dpp, dap, tpa, tpp, tap, vag, anal,
        kompisar_raden, pappans_raden, nils_raden, nilsfam_raden,
        tid_man_min, tid_man_sec, dt_tid, dt_total,
        dt_vila, dt_m√§n, total_tid,
        alskar_med, sover_med,
        intakt_total, intakt_kvinna, intakt_man, round(intakt_kompisar, 2),
        antal_m√§n, 0  # aktiekurs s√§tts senare
    ]
    df_ws.append_row(ny_rad)
    st.success("Rad sparad!")
    st.rerun()

st.header("üìä Statistik")

if not df.empty:
    df["Datum"] = pd.to_datetime(df["Datum"], errors="coerce")
    sista_datum = df["Datum"].max()
    √•lder = None
    try:
        f√∂delse_dt = pd.to_datetime(inst.get("F√∂delsedatum"))
        √•lder = int((sista_datum - f√∂delse_dt).days / 365.25)
    except:
        √•lder = "?"

    st.subheader(f"{inst.get('Namn', 'Kvinnan')} ‚Äì √Ölder {√•lder} √•r")

    total_tid = df["Total tid (sek)"].sum()
    timmar = total_tid // 3600
    minuter = (total_tid % 3600) // 60
    st.markdown(f"**Total inspelad tid:** {int(timmar)} h {int(minuter)} min")

    st.markdown(f"**Totalt antal m√§n:** {df['M√§n'].sum()}")
    st.markdown(f"**Totala deep throat-m√§n:** {df['DT m√§n'].sum()}")
    st.markdown(f"**Totalt antal √§lskar med:** {df['√Ñlskar med'].sum()}")
    st.markdown(f"**Totalt antal sover med:** {df['Sover med'].sum()}")

    for kategori in ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]:
        st.markdown(f"**{kategori} gangbang-tillf√§llen:** {df[kategori].sum()}")

else:
    st.info("Ingen data √§nnu ‚Äì l√§gg till en scen f√∂rst.")
