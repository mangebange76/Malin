import streamlit as st
import pandas as pd
import random
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials

# --- Autentisering och dataladdning ---

def auth_gspread():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
    client = gspread.authorize(creds)
    return client

def load_data():
    client = auth_gspread()
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")

    headers = [
        "Datum", "M√§n", "Fi", "R√∂", "Dm", "Df", "Dr", "TPP", "TAP", "TPA",
        "√Ñlskar", "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils fam",
        "Svarta", "Tid Singel", "Tid Dubbel", "Tid Trippel", "Vila",
        "Summa singel", "Summa dubbel", "Summa trippel", "Summa vila",
        "Summa tid", "Klockan", "Tid kille", "Suger", "Filmer", "Pris",
        "Int√§kter", "Malin l√∂n", "F√∂retagets l√∂n", "V√§nner l√∂n",
        "H√•rdhet", "Jobb 2", "Grannar 2", "Tjej PojkV 2", "Nils fam 2",
        "K√§nner", "Totalt m√§n", "DeepT", "Grabbar", "Snitt", "Sekunder",
        "Varv", "Total tid", "Tid kille DT", "Runk"
    ]

    # S√§kerst√§ll att rubriker finns - skapa vid behov
    current_headers = worksheet.row_values(1)
    if current_headers != headers:
        worksheet.resize(rows=1)
        worksheet.append_row(headers)

    df = pd.DataFrame(worksheet.get_all_records())
    # Fyll NaN med 0 f√∂r ber√§kningar
    df.fillna(0, inplace=True)
    return worksheet, df

def append_row(row_dict):
    client = auth_gspread()
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")
    headers = worksheet.row_values(1)
    row = [row_dict.get(col, 0) for col in headers]
    worksheet.append_row(row)

def update_row(row_index, updates):
    client = auth_gspread()
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")
    headers = worksheet.row_values(1)
    for col, val in updates.items():
        col_idx = headers.index(col) + 1
        worksheet.update_cell(row_index + 2, col_idx, val)  # +2 pga header + 0-index

# --- Ber√§kningar ---

def update_calculations(df):
    # S√§kerst√§ll heltal och ers√§tt NaN
    for col in df.columns:
        if col not in ["Datum", "Klockan"]:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0).astype(int)

    # Ber√§kna K√§nner
    df["K√§nner"] = df[["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]].sum(axis=1)

    # H√∂gsta v√§rden (2-variant)
    df["Jobb 2"] = df["Jobb"].max()
    df["Grannar 2"] = df["Grannar"].max()
    df["Tjej PojkV 2"] = df["Tjej PojkV"].max()
    df["Nils fam 2"] = df["Nils fam"].max()
    df["K√§nner 2"] = df[["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]].max(axis=1).max()

    # Totalt m√§n
    df["Totalt m√§n"] = df["M√§n"] + df["K√§nner"]

    # Ber√§kna Summa singel, dubbel, trippel och vila i sekunder enligt regler
    df["Summa singel"] = (df["Tid Singel"] + df["Vila"]) * df["Totalt m√§n"]
    df["Summa dubbel"] = ((df["Tid Dubbel"] + df["Vila"]) + 9) * (df["Dm"] + df["Df"] + df["Dr"])
    df["Summa trippel"] = ((df["Tid Trippel"] + df["Vila"]) + 15) * (df["TPP"] + df["TAP"] + df["TPA"])

    df["Summa vila"] = (df["Totalt m√§n"] * df["Vila"]) + \
                      ((df["Dm"] + df["Df"] + df["Dr"]) * (df["Vila"] + 7)) + \
                      ((df["TPP"] + df["TAP"] + df["TPA"]) * (df["Vila"] + 15))

    df["Summa tid"] = df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"] + df["Summa vila"]

    # Starttid 07:00 f√∂r klockan
    base_time = datetime(2025, 1, 1, 7, 0)
    df["Klockan"] = df["Summa tid"].apply(lambda x: (base_time + timedelta(seconds=x)).strftime("%H:%M:%S"))

    # Tid kille (sek) = tid s + tid d*2 + tid t*3 + suger + tid kille DT + runk (ber√§knas senare)
    df["Tid kille"] = df["Tid Singel"] + df["Tid Dubbel"] * 2 + df["Tid Trippel"] * 3

    # Suger = 60% av (Summa tid / Totalt m√§n)
    df["Suger"] = 0
    mask = df["Totalt m√§n"] > 0
    df.loc[mask, "Suger"] = 0.6 * (df.loc[mask, "Summa tid"] / df.loc[mask, "Totalt m√§n"])

    # Filmer enligt viktad summa
    df["H√•rdhet"] = 0
    df.loc[df["M√§n"] > 0, "H√•rdhet"] += 1
    df.loc[df["Dm"] > 0, "H√•rdhet"] += 2
    df.loc[df["Df"] > 0, "H√•rdhet"] += 2
    df.loc[df["Dr"] > 0, "H√•rdhet"] += 4
    df.loc[df["TPP"] > 0, "H√•rdhet"] += 4
    df.loc[df["TAP"] > 0, "H√•rdhet"] += 6
    df.loc[df["TPA"] > 0, "H√•rdhet"] += 5

    df["Filmer"] = (
        df["M√§n"] + df["Fi"] + df["R√∂"] +
        df["Dm"] * 2 + df["Df"] * 2 + df["Dr"] * 3 +
        df["TPP"] * 4 + df["TAP"] * 6 + df["TPA"] * 5
    ) * df["H√•rdhet"]

    df["Pris"] = 19.99
    df["Int√§kter"] = df["Filmer"] * df["Pris"]

    df["Malin l√∂n"] = df["Int√§kter"] * 0.05
    df.loc[df["Malin l√∂n"] > 1500, "Malin l√∂n"] = 1500

    df["F√∂retagets l√∂n"] = df["Int√§kter"] * 0.4
    df["V√§nner l√∂n"] = df["Int√§kter"] - df["Malin l√∂n"] - df["F√∂retagets l√∂n"]

    # DeepT, Grabbar, Snitt, Sekunder, Varv, Total tid
    df["Snitt"] = 0
    mask = (df["Grabbar"] > 0)
    df.loc[mask, "Snitt"] = df.loc[mask, "DeepT"] / df.loc[mask, "Grabbar"]

    df["Total tid"] = df["Snitt"] * (df["Sekunder"] * df["Varv"])
    df["Tid kille DT"] = 0
    df.loc[df["Totalt m√§n"] > 0, "Tid kille DT"] = df.loc[df["Totalt m√§n"] > 0, "Total tid"] / df.loc[df["Totalt m√§n"] > 0, "Totalt m√§n"]

    df["Runk"] = 0
    df.loc[df["Totalt m√§n"] > 0, "Runk"] = 0.6 * df.loc[df["Totalt m√§n"] > 0, "Total tid"] / df.loc[df["Totalt m√§n"] > 0, "Totalt m√§n"]

    # Uppdatera Tid kille med suger, tid kille DT och runk
    df["Tid kille"] = df["Tid kille"] + df["Suger"] + df["Tid kille DT"] + df["Runk"]

    return df

# --- Presentation ---

def present_main_view(df):
    st.header("üìä Huvudvy")

    totalt_m√§n = df["Totalt m√§n"].sum()
    k√§nner_2 = df["K√§nner 2"].max() if "K√§nner 2" in df else 0
    jobb_2 = df["Jobb 2"].max() if "Jobb 2" in df else 0
    grannar_2 = df["Grannar 2"].max() if "Grannar 2" in df else 0
    tjej_pojkv_2 = df["Tjej PojkV 2"].max() if "Tjej PojkV 2" in df else 0
    nils_fam_2 = df["Nils fam 2"].max() if "Nils fam 2" in df else 0

    vita = 0
    svarta = 0
    if totalt_m√§n > 0:
        svarta = df["Svarta"].sum() / totalt_m√§n * 100
        vita = (totalt_m√§n - df["Svarta"].sum()) / totalt_m√§n * 100

    snitt_film = (totalt_m√§n + df["K√§nner"].sum()) / len(df[df["M√§n"] > 0]) if len(df[df["M√§n"] > 0]) > 0 else 0
    gangb = df["K√§nner"].sum() / k√§nner_2 if k√§nner_2 > 0 else 0
    √§lskat = df["√Ñlskar"].sum() / k√§nner_2 if k√§nner_2 > 0 else 0
    sover_med_kvot = df["Sover med"].sum() / nils_fam_2 if nils_fam_2 > 0 else 0

    filmer_sum = df["Filmer"].sum()
    int√§kter_sum = df["Int√§kter"].sum()
    malin_l√∂n_sum = df["Malin l√∂n"].sum()
    f√∂retag_l√∂n_sum = df["F√∂retagets l√∂n"].sum()
    v√§nner_l√∂n_sum = df["V√§nner l√∂n"].sum() / k√§nner_2 if k√§nner_2 > 0 else 0

    st.write(f"Totalt antal m√§n: {totalt_m√§n}")
    st.write(f"K√§nner (Kompisar): {k√§nner_2}")
    st.write(f"Jobb (Jobb 2): {jobb_2}")
    st.write(f"Grannar (Grannar 2): {grannar_2}")
    st.write(f"Tjej PojkV (Tjej PojkV 2): {tjej_pojkv_2}")
    st.write(f"Nils fam (Nils fam 2): {nils_fam_2}")
    st.write(f"Vita (%): {vita:.1f}%")
    st.write(f"Svarta (%): {svarta:.1f}%")
    st.write(f"Snitt film: {snitt_film:.2f}")
    st.write(f"GangB: {gangb:.2f}")
    st.write(f"√Ñlskat: {√§lskat:.2f}")
    st.write(f"Sover med kvot: {sover_med_kvot:.2f}")
    st.write(f"Filmer: {filmer_sum}")
    st.write(f"Int√§kter: ${int√§kter_sum:.2f}")
    st.write(f"Malin l√∂n: ${malin_l√∂n_sum:.2f}")
    st.write(f"F√∂retagets l√∂n: ${f√∂retag_l√∂n_sum:.2f}")
    st.write(f"V√§nner l√∂n (per kompis): ${v√§nner_l√∂n_sum:.2f}")

# --- Del 2 kommer med radvy, inmatning, knappar och main ---

# --- Radvyn ---

def radvy(df):
    st.header("üìã Radvyn")
    if df.empty:
        st.warning("Ingen data att visa.")
        return

    rad = df.iloc[-1]

    tid_kille_min = rad["Tid kille"] / 60
    varning = "‚ö†Ô∏è √ñka tid!" if tid_kille_min < 10 else ""

    st.write(f"**Datum:** {rad['Datum'] if 'Datum' in rad else ''}")
    st.write(f"**Tid kille:** {tid_kille_min:.2f} minuter {varning}")
    st.write(f"**Filmer:** {int(rad['Filmer'])}")
    st.write(f"**Int√§kter:** ${rad['Int√§kter']:.2f}")
    st.write(f"**Klockan:** {rad['Klockan']}")

    # Form f√∂r att redigera tid s, d, t om tid kille under 10 min
    with st.form("justera_tid_form"):
        tid_s = st.number_input("Tid Singel (sekunder)", min_value=0, value=int(rad["Tid Singel"]))
        tid_d = st.number_input("Tid Dubbel (sekunder)", min_value=0, value=int(rad["Tid Dubbel"]))
        tid_t = st.number_input("Tid Trippel (sekunder)", min_value=0, value=int(rad["Tid Trippel"]))
        submitted = st.form_submit_button("Spara √§ndring")

        if submitted:
            # Uppdatera dataraden i Google Sheet
            row_idx = len(df)  # sista raden (0-index => +1 header)
            updates = {
                "Tid Singel": tid_s,
                "Tid Dubbel": tid_d,
                "Tid Trippel": tid_t
            }
            update_row(row_idx, updates)
            st.success("‚è±Ô∏è Tider uppdaterade! Ladda om sidan f√∂r uppdatering.")

# --- Inmatningsformul√§r f√∂r ny rad ---

def inmatning(df):
    st.header("‚ûï L√§gg till ny rad")
    with st.form("form_ny_rad"):
        ny_rad = {}
        # Datum automatiskt: +1 dag fr√•n senaste datum eller idag
        if df.empty or "Datum" not in df.columns:
            ny_rad["Datum"] = datetime.today().strftime("%Y-%m-%d")
        else:
            senaste_str = df.iloc[-1]["Datum"]
            try:
                senaste_dt = pd.to_datetime(senaste_str)
                ny_rad["Datum"] = (senaste_dt + timedelta(days=1)).strftime("%Y-%m-%d")
            except Exception:
                ny_rad["Datum"] = datetime.today().strftime("%Y-%m-%d")

        for f√§lt in [
            "M√§n", "Fi", "R√∂", "Dm", "Df", "Dr", "TPP", "TAP", "TPA",
            "√Ñlskar", "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils fam",
            "Svarta", "Tid Singel", "Tid Dubbel", "Tid Trippel", "Vila",
            "DeepT", "Grabbar", "Sekunder", "Varv"
        ]:
            ny_rad[f√§lt] = st.number_input(f√§lt, min_value=0, step=1)

        ny_rad["Pris"] = 19.99

        submitted = st.form_submit_button("Spara ny rad")
        if submitted:
            append_row(ny_rad)
            st.success("‚úÖ Ny rad sparad! Ladda om sidan f√∂r att se uppdatering.")

# --- Vilodagsknappar ---

def vilodag_jobb(df):
    ny_rad = {
        "Datum": (pd.to_datetime(df.iloc[-1]["Datum"]) + pd.Timedelta(days=1)).strftime("%Y-%m-%d") if not df.empty else datetime.today().strftime("%Y-%m-%d"),
        "√Ñlskar": 12,
        "Sover med": 1,
        "Jobb": df["Jobb"].max() if "Jobb" in df.columns else 0,
        "Grannar": df["Grannar"].max() if "Grannar" in df.columns else 0,
        "Tjej PojkV": df["Tjej PojkV"].max() if "Tjej PojkV" in df.columns else 0,
        "Nils fam": df["Nils fam"].max() if "Nils fam" in df.columns else 0,
    }
    # √ñvriga f√§lt 0
    for col in df.columns:
        if col not in ny_rad and col != "Datum":
            ny_rad[col] = 0

    append_row(ny_rad)
    st.success("‚úÖ Vilodag jobb tillagd.")

def vilodag_hemma(df):
    ny_rad = {
        "Datum": (pd.to_datetime(df.iloc[-1]["Datum"]) + pd.Timedelta(days=1)).strftime("%Y-%m-%d") if not df.empty else datetime.today().strftime("%Y-%m-%d"),
        "√Ñlskar": 6,
        "Sover med": 0,
        "Jobb": 3,
        "Grannar": 3,
        "Tjej PojkV": 3,
        "Nils fam": 3,
    }
    for col in df.columns:
        if col not in ny_rad and col != "Datum":
            ny_rad[col] = 0

    append_row(ny_rad)
    st.success("‚úÖ Vilodag hemma tillagd.")

# --- Kopiera tv√• st√∂rsta rader (Totalt m√§n) ---

def kopiera_max(df):
    if df.empty:
        st.warning("Ingen data att kopiera.")
        return

    df["K√§nner"] = df[["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]].sum(axis=1)
    df["Totalt m√§n"] = df["M√§n"] + df["K√§nner"]
    top2 = df.sort_values("Totalt m√§n", ascending=False).head(2)

    for _, rad in top2.iterrows():
        ny = rad.to_dict()
        ny["Datum"] = (pd.to_datetime(df.iloc[-1]["Datum"]) + pd.Timedelta(days=1)).strftime("%Y-%m-%d")
        append_row(ny)

    st.success("‚úÖ Tv√• rader kopierades.")

# --- Slumpknapp: slumpv√§rden i manuellt inmatade f√§lt ---

def slumpa_rad(df):
    if df.empty:
        st.warning("Ingen data att slumpa fr√•n.")
        return

    ny_rad = {}
    # Datum √∂kar 1 dag fr√•n senaste
    ny_rad["Datum"] = (pd.to_datetime(df.iloc[-1]["Datum"]) + pd.Timedelta(days=1)).strftime("%Y-%m-%d")

    manuella_f√§lt = [
        "M√§n", "Fi", "R√∂", "Dm", "Df", "Dr", "TPP", "TAP", "TPA",
        "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils fam",
        "Svarta", "Tid Singel", "Tid Dubbel", "Tid Trippel",
        "Vila", "DeepT", "Grabbar", "Sekunder", "Varv"
    ]

    for f√§lt in manuella_f√§lt:
        min_val = int(df[f√§lt].min()) if f√§lt in df.columns and not df.empty else 0
        max_val = int(df[f√§lt].max()) if f√§lt in df.columns and not df.empty else 10
        if f√§lt == "√Ñlskar":
            ny_rad[f√§lt] = 8
        elif f√§lt == "Sover med":
            ny_rad[f√§lt] = 1
        elif f√§lt == "Vila":
            ny_rad[f√§lt] = 7
        elif f√§lt == "√Ñlsk tid":
            ny_rad[f√§lt] = 30
        else:
            if max_val < min_val:
                max_val = min_val + 10
            ny_rad[f√§lt] = random.randint(min_val, max_val)

    ny_rad["Pris"] = 19.99

    append_row(ny_rad)
    st.success("‚úÖ Ny rad med slumpm√§ssiga v√§rden tillagd.")

# --- Huvudfunktionen ---

def main():
    worksheet, df = load_data()
    df = update_calculations(df)

    st.title("Malin Data App")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        if st.button("‚ûï L√§gg till vilodag jobb"):
            vilodag_jobb(df)

    with col2:
        if st.button("‚ûï L√§gg till vilodag hemma"):
            vilodag_hemma(df)

    with col3:
        if st.button("üìã Kopiera tv√• st√∂rsta rader"):
            kopiera_max(df)

    with col4:
        if st.button("üé≤ L√§gg till slumpm√§ssig rad"):
            slumpa_rad(df)

    inmatning(df)
    present_main_view(df)
    radvy(df)

if __name__ == "__main__":
    main()
