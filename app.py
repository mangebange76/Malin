import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from datetime import date, time, datetime, timedelta
import time as _time
import random

# ===================== Import av extern ber√§kning =====================
try:
    from berakningar import berakna_radvarden as calc_row_values
except Exception:
    calc_row_values = None

# ============================== App-inst√§llningar ===============================
st.set_page_config(page_title="Malin", layout="centered")
st.title("Malin ‚Äì produktionsapp")

# =============================== Hj√§lpfunktioner ================================
def _retry_call(fn, *args, **kwargs):
    """Exponential backoff f√∂r 429/RESOURCE_EXHAUSTED."""
    delay = 0.5
    for _ in range(6):
        try:
            return fn(*args, **kwargs)
        except Exception as e:
            msg = str(e)
            if any(x in msg for x in ["429", "RESOURCE_EXHAUSTED", "RATE_LIMIT_EXCEEDED"]):
                _time.sleep(delay + random.uniform(0, 0.25))
                delay = min(delay * 2, 4)
                continue
            raise
    return fn(*args, **kwargs)

def _clamp(d: date, lo: date, hi: date):
    if d < lo: return lo
    if d > hi: return hi
    return d

def _hm_str_from_seconds(q_sec: int) -> str:
    h = q_sec // 3600
    m = round((q_sec % 3600) / 60)
    if m == 60:
        h += 1
        m = 0
    return f"{int(h)}h {int(m)} min"

def _ms_str_from_seconds(sec: int) -> str:
    m = sec // 60
    s = sec % 60
    return f"{int(m)}m {int(s)}s"

def _parse_iso_date(s: str):
    s = (s or "").strip()
    if not s:
        return None
    try:
        return datetime.fromisoformat(s).date()
    except Exception:
        for fmt in ("%Y-%m-%d", "%Y/%m/%d", "%d/%m/%Y", "%d-%m-%Y"):
            try:
                return datetime.strptime(s, fmt).date()
            except Exception:
                continue
    return None

def _safe_int(x, default=0):
    try:
        if x is None: return default
        if isinstance(x, str) and x.strip() == "":
            return default
        return int(float(x))
    except Exception:
        return default

def _usd(x):
    try:
        return f"${float(x):,.2f}"
    except Exception:
        return "-"

# =============================== Google Sheets =================================
@st.cache_resource(show_spinner=False)
def get_client():
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_info(dict(st.secrets["GOOGLE_CREDENTIALS"]), scopes=scopes)
    return gspread.authorize(creds)

client = get_client()
WORKSHEET_TITLE = "Data"
SETTINGS_SHEET  = "Inst√§llningar"

@st.cache_resource(show_spinner=False)
def resolve_sheet():
    """√ñppna arket via ID eller URL och h√§mta bladet 'Data'."""
    sid = st.secrets.get("GOOGLE_SHEET_ID", "").strip() if "GOOGLE_SHEET_ID" in st.secrets else ""
    if sid:
        sh = _retry_call(client.open_by_key, sid)
    else:
        url = st.secrets.get("SHEET_URL", "").strip() if "SHEET_URL" in st.secrets else ""
        if not url:
            st.error("L√§gg in GOOGLE_SHEET_ID eller SHEET_URL i Secrets.")
            st.stop()
        sh = _retry_call(client.open_by_url, url)

    # S√§kerst√§ll att Inst√§llningar-bladet finns (INTE skapa n√•got annat blad)
    try:
        _ = sh.worksheet(SETTINGS_SHEET)
    except gspread.WorksheetNotFound:
        _retry_call(sh.add_worksheet, title=SETTINGS_SHEET, rows=200, cols=3)
        ws = sh.worksheet(SETTINGS_SHEET)
        _retry_call(ws.update, "A1:C1", [["Key", "Value", "Label"]])

    return sh

spreadsheet = resolve_sheet()

def _get_settings_ws():
    # Robust: undvik APIError genom att sl√• upp via metadata och fallback till listning
    try:
        return spreadsheet.worksheet(SETTINGS_SHEET)
    except Exception:
        # Hitta via lista
        for ws in spreadsheet.worksheets():
            if ws.title == SETTINGS_SHEET:
                return ws
        # Om saknas helt: skapa (enda plats vi skapar)
        ws = _retry_call(spreadsheet.add_worksheet, title=SETTINGS_SHEET, rows=200, cols=3)
        _retry_call(ws.update, "A1:C1", [["Key", "Value", "Label"]])
        return ws

# =========================== Header-s√§kring / migration =========================
DEFAULT_COLUMNS = [
    "Datum",
    "Typ",
    "Veckodag","Scen",
    "M√§n","Svarta","Fitta","Rumpa","DP","DPP","DAP","TAP",
    "Tid S","Tid D","Vila","DT tid (sek/kille)","DT vila (sek/kille)",
    "Summa S","Summa D","Summa TP","Summa Vila",
    "Tid √Ñlskar (sek)","Tid √Ñlskar",
    "Tid Sover med (sek)","Tid Sover med",
    "Summa tid","Summa tid (sek)",
    "Tid per kille (sek)","Tid per kille",
    "Klockan","√Ñlskar","Sover med","K√§nner",
    "Pappans v√§nner","Grannar","Nils v√§nner","Nils familj","Bekanta","Eskilstuna killar",
    "Bonus killar","Bonus deltagit",
    "Totalt M√§n","Tid kille","Nils",
    "H√•ngel (sek/kille)","H√•ngel (m:s/kille)",
    "Suger","Suger per kille (sek)",
    "H√•rdhet","Prenumeranter","Avgift","Int√§kter",
    "Int√§kt m√§n","Int√§kt K√§nner","L√∂n Malin","Int√§kt F√∂retaget","Vinst",
    "K√§nner Sammanlagt"
]

def _ensure_data_ws_and_header():
    # √ñppna/Skapa bara DATA-bladet och s√§kerst√§ll headers
    try:
        data_ws = spreadsheet.worksheet(WORKSHEET_TITLE)
    except gspread.WorksheetNotFound:
        data_ws = _retry_call(spreadsheet.add_worksheet, title=WORKSHEET_TITLE, rows=1000, cols=len(DEFAULT_COLUMNS)+5)
        _retry_call(data_ws.update, "A1:ZZ1", [DEFAULT_COLUMNS])
        return data_ws

    header = _retry_call(data_ws.row_values, 1)
    if not header:
        _retry_call(data_ws.update, "A1:ZZ1", [DEFAULT_COLUMNS])
    else:
        missing = [c for c in DEFAULT_COLUMNS if c not in header]
        if missing:
            new_header = header + missing
            _retry_call(data_ws.update, "A1:ZZ1", [new_header])
    return data_ws

sheet = _ensure_data_ws_and_header()
KOLUMNER = _retry_call(sheet.row_values, 1)

# ====================== Ladda / Spara Inst√§llningar (Key/Value/Label) ======================
DEFAULT_CFG = {
    "STARTDATE": date.today().isoformat(),
    "STARTTIME": "07:00:00",
    "BIRTHDATE": "1990-01-01",
    "MAX_PAPPAN": "10",
    "MAX_GRANNAR": "10",
    "MAX_NILS_VANNER": "10",
    "MAX_NILS_FAMILJ": "10",
    "MAX_BEKANTA": "10",
    "FEE_USD": "30",
    # Bonus-pool
    "BONUS_POOL_TOTAL": "0",
    "BONUS_PARTICIPATED": "0",
    # Etiketter
    "LABEL_PAPPAN": "Pappans v√§nner",
    "LABEL_GRANNAR": "Grannar",
    "LABEL_NILS_VANNER": "Nils v√§nner",
    "LABEL_NILS_FAMILJ": "Nils familj",
    "LABEL_BEKANTA": "Bekanta",
    "LABEL_ESKILSTUNA": "Eskilstuna killar",
    "LABEL_MEN": "M√§n",
    "LABEL_BLACK": "Svarta",
    "LABEL_BIRTHDATE": "Malins f√∂delsedatum",
}

def _settings_as_dict():
    ws = _get_settings_ws()
    rows = _retry_call(ws.get_all_records)
    data = {}
    for r in rows:
        key = (r.get("Key") or "").strip()
        if not key:
            continue
        val = (str(r.get("Value")) if r.get("Value") is not None else "").strip()
        label = (r.get("Label") or "").strip()
        data[key] = {"Value": val, "Label": label}
    # Fyll p√• saknade nycklar med default
    changed = False
    for k, v in DEFAULT_CFG.items():
        if k not in data:
            data[k] = {"Value": str(v), "Label": ""}
            changed = True
    if changed:
        _write_settings_dict(data)
    return data

def _write_settings_dict(dct):
    ws = _get_settings_ws()
    # skriv rubriker varje g√•ng f√∂r s√§kerhets skull
    values = [["Key", "Value", "Label"]]
    for k, trip in dct.items():
        values.append([k, trip.get("Value", ""), trip.get("Label", "")])
    _retry_call(ws.clear)
    _retry_call(ws.update, f"A1:C{len(values)}", values)

def _load_cfg():
    d = _settings_as_dict()
    # G√∂r ett string->value map + labels
    CFG_STR = {k: v["Value"] for k, v in d.items()}
    LABELS = {
        "PAPPAN": d.get("LABEL_PAPPAN", {}).get("Label") or "Pappans v√§nner",
        "GRANNAR": d.get("LABEL_GRANNAR", {}).get("Label") or "Grannar",
        "NILS_VANNER": d.get("LABEL_NILS_VANNER", {}).get("Label") or "Nils v√§nner",
        "NILS_FAMILJ": d.get("LABEL_NILS_FAMILJ", {}).get("Label") or "Nils familj",
        "BEKANTA": d.get("LABEL_BEKANTA", {}).get("Label") or "Bekanta",
        "ESKILSTUNA": d.get("LABEL_ESKILSTUNA", {}).get("Label") or "Eskilstuna killar",
        "MEN": d.get("LABEL_MEN", {}).get("Label") or "M√§n",
        "BLACK": d.get("LABEL_BLACK", {}).get("Label") or "Svarta",
        "BIRTHDATE": d.get("LABEL_BIRTHDATE", {}).get("Label") or "Malins f√∂delsedatum",
    }
    return CFG_STR, LABELS

CFG_STR, LABELS = _load_cfg()

# Helper getters
def _cfg_int(k, default=0):
    try:
        return int(float(CFG_STR.get(k, default)))
    except Exception:
        return int(default)

def _cfg_float(k, default=0.0):
    try:
        return float(CFG_STR.get(k, default))
    except Exception:
        return float(default)

def _cfg_date(k, default_iso):
    s = CFG_STR.get(k, default_iso)
    try:
        return datetime.fromisoformat(s).date()
    except Exception:
        return _parse_iso_date(s) or date.today()

def _cfg_time(k, default="07:00:00"):
    s = CFG_STR.get(k, default)
    try:
        return datetime.fromisoformat(s).time()
    except Exception:
        try:
            return datetime.strptime(s, "%H:%M").time()
        except Exception:
            try:
                return datetime.strptime(s, "%H:%M:%S").time()
            except Exception:
                return time(7,0)

# ===== Meny =====
st.sidebar.title("Meny")
view = st.sidebar.radio("V√§lj vy", ["Produktion", "Statistik", "Inst√§llningar"], index=0)

# =============================== STATISTIKVY (of√∂r√§ndrad logik) ================================
if view == "Statistik":
    st.header("üìä Statistik")
    try:
        rows = _retry_call(sheet.get_all_records)
    except Exception as e:
        st.warning(f"Kunde inte l√§sa data: {e}")
        st.stop()

    # --- Basmetrik ---
    antal_scener = 0
    privat_gb_cnt = 0
    totalt_man = 0  # m√§n + eskilstuna
    summa_for_snitt_scener = 0
    summa_privat_gb_kanner = 0

    total_svarta_sum = 0
    total_men_like_sum = 0  # m√§n + eskilstuna + svarta

    for r in rows:
        man = _safe_int(r.get("M√§n", 0), 0) + _safe_int(r.get("Eskilstuna killar", 0), 0)
        esk = 0
        kanner = _safe_int(r.get("K√§nner", 0), 0)
        svarta = _safe_int(r.get("Svarta", 0), 0)

        men_like = man
        men_like_plus_black = man + svarta

        if men_like > 0:
            antal_scener += 1
            totalt_man += men_like
            summa_for_snitt_scener += (men_like + kanner)

        if men_like == 0 and kanner > 0:
            privat_gb_cnt += 1
            summa_privat_gb_kanner += kanner

        total_svarta_sum += svarta
        total_men_like_sum += men_like_plus_black

    snitt_scener = round(summa_for_snitt_scener / antal_scener, 2) if antal_scener > 0 else 0.0
    snitt_privat_gb = round(summa_privat_gb_kanner / privat_gb_cnt, 2) if privat_gb_cnt > 0 else 0.0
    andel_svarta_pct = round((total_svarta_sum / total_men_like_sum) * 100, 2) if total_men_like_sum > 0 else 0.0

    c1, c2, c3, c4, c5 = st.columns(5)
    with c1: st.metric("Antal scener", antal_scener)
    with c2: st.metric("Privat GB", privat_gb_cnt)
    with c3: st.metric("Totalt antal m√§n", totalt_man)
    with c4: st.metric("Snitt scener", snitt_scener)
    with c5: st.metric("Snitt Privat GB", snitt_privat_gb)
    st.metric("Andel svarta av m√§n (%)", andel_svarta_pct)

    st.stop()

# ================================ Inst√§llningar ===============================
if view == "Inst√§llningar":
    st.header("‚öôÔ∏è Inst√§llningar (permanenta via fliken 'Inst√§llningar')")

    startdatum = st.date_input("Historiskt startdatum", value=_cfg_date("STARTDATE", date.today().isoformat()))
    starttid   = st.time_input("Starttid", value=_cfg_time("STARTTIME"))
    f√∂delsedatum = st.date_input(LABELS["BIRTHDATE"], value=_cfg_date("BIRTHDATE", "1990-01-01"))

    st.subheader("Maxv√§rden (Auto-Max med varning)")
    max_p  = st.number_input(f'{LABELS["PAPPAN"]} (max)', min_value=0, step=1, value=_cfg_int("MAX_PAPPAN", 10))
    max_g  = st.number_input(f'{LABELS["GRANNAR"]} (max)', min_value=0, step=1, value=_cfg_int("MAX_GRANNAR", 10))
    max_nv = st.number_input(f'{LABELS["NILS_VANNER"]} (max)', min_value=0, step=1, value=_cfg_int("MAX_NILS_VANNER", 10))
    max_nf = st.number_input(f'{LABELS["NILS_FAMILJ"]} (max)', min_value=0, step=1, value=_cfg_int("MAX_NILS_FAMILJ", 10))
    max_bk = st.number_input(f'{LABELS["BEKANTA"]} (max)', min_value=0, step=1, value=_cfg_int("MAX_BEKANTA", 10))

    st.subheader("Pris per prenumerant (g√§ller N√ÑSTA rad)")
    fee = st.number_input("Avgift (USD, per ny rad)", min_value=0.0, step=1.0, value=_cfg_float("FEE_USD", 30.0))

    st.subheader("Etiketter")
    lbl_p  = st.text_input("Etikett ‚Äì Pappans v√§nner", value=LABELS["PAPPAN"])
    lbl_g  = st.text_input("Etikett ‚Äì Grannar", value=LABELS["GRANNAR"])
    lbl_nv = st.text_input("Etikett ‚Äì Nils v√§nner", value=LABELS["NILS_VANNER"])
    lbl_nf = st.text_input("Etikett ‚Äì Nils familj", value=LABELS["NILS_FAMILJ"])
    lbl_bk = st.text_input("Etikett ‚Äì Bekanta", value=LABELS["BEKANTA"])
    lbl_es = st.text_input("Etikett ‚Äì Eskilstuna killar", value=LABELS["ESKILSTUNA"])
    lbl_m  = st.text_input("Etikett ‚Äì M√§n", value=LABELS["MEN"])
    lbl_bl = st.text_input("Etikett ‚Äì Svarta", value=LABELS["BLACK"])
    lbl_bd = st.text_input("Etikett ‚Äì Malins f√∂delsedatum", value=LABELS["BIRTHDATE"])

    if st.button("üíæ Spara inst√§llningar"):
        d = _settings_as_dict()  # h√§mtar befintliga (inkl defaults)

        # Uppdatera values
        d["STARTDATE"]["Value"] = startdatum.isoformat()
        d["STARTTIME"]["Value"] = starttid.strftime("%H:%M:%S")
        d["BIRTHDATE"]["Value"] = f√∂delsedatum.isoformat()
        d["FEE_USD"]["Value"]   = str(float(fee))

        d["MAX_PAPPAN"]["Value"] = str(int(max_p))
        d["MAX_GRANNAR"]["Value"] = str(int(max_g))
        d["MAX_NILS_VANNER"]["Value"] = str(int(max_nv))
        d["MAX_NILS_FAMILJ"]["Value"] = str(int(max_nf))
        d["MAX_BEKANTA"]["Value"] = str(int(max_bk))

        # Etiketter
        d["LABEL_PAPPAN"]["Label"] = lbl_p
        d["LABEL_GRANNAR"]["Label"] = lbl_g
        d["LABEL_NILS_VANNER"]["Label"] = lbl_nv
        d["LABEL_NILS_FAMILJ"]["Label"] = lbl_nf
        d["LABEL_BEKANTA"]["Label"] = lbl_bk
        d["LABEL_ESKILSTUNA"]["Label"] = lbl_es
        d["LABEL_MEN"]["Label"] = lbl_m
        d["LABEL_BLACK"]["Label"] = lbl_bl
        d["LABEL_BIRTHDATE"]["Label"] = lbl_bd

        _write_settings_dict(d)
        st.success("Inst√§llningar sparade. Ladda om vyn Produktion/Statistik f√∂r att se etiketter.")
        st.stop()

# ================================ Produktion (visar inputs) ===============================
if view == "Produktion":
    # L√§ser in igen f√∂r att f√• senaste etiketter/values
    CFG_STR, LABELS = _load_cfg()

    # Initiera session max (f√∂r varningar/etiketter)
    st.session_state.setdefault("MAX_PAPPAN", _cfg_int("MAX_PAPPAN", 10))
    st.session_state.setdefault("MAX_GRANNAR", _cfg_int("MAX_GRANNAR", 10))
    st.session_state.setdefault("MAX_NILS_VANNER", _cfg_int("MAX_NILS_VANNER", 10))
    st.session_state.setdefault("MAX_NILS_FAMILJ", _cfg_int("MAX_NILS_FAMILJ", 10))
    st.session_state.setdefault("MAX_BEKANTA", _cfg_int("MAX_BEKANTA", 10))
    st.session_state.setdefault("FEE_USD", _cfg_float("FEE_USD", 30.0))

    def next_scene_number():
        try:
            vals = _retry_call(sheet.col_values, 1)  # Datum
            row_count = max(0, len(vals) - 1) if (vals and vals[0] == "Datum") else len(vals)
        except Exception:
            row_count = 0
        return row_count + 1

    def datum_och_veckodag_f√∂r_scen(nr: int):
        startdatum = _cfg_date("STARTDATE", date.today().isoformat())
        veckodagar = ["M√•ndag","Tisdag","Onsdag","Torsdag","Fredag","L√∂rdag","S√∂ndag"]
        d = startdatum + timedelta(days=nr - 1)
        return d, veckodagar[d.weekday()]

    st.subheader("‚ûï L√§gg till ny h√§ndelse")

    m√§n_label = LABELS["MEN"]
    svarta_label = LABELS["BLACK"]
    m√§n    = st.number_input(m√§n_label,    min_value=0, step=1, value=0)
    svarta = st.number_input(svarta_label, min_value=0, step=1, value=0)
    fitta  = st.number_input("Fitta",  min_value=0, step=1, value=0)
    rumpa  = st.number_input("Rumpa",  min_value=0, step=1, value=0)
    dp     = st.number_input("DP",     min_value=0, step=1, value=0)
    dpp    = st.number_input("DPP",    min_value=0, step=1, value=0)
    dap    = st.number_input("DAP",    min_value=0, step=1, value=0)
    tap    = st.number_input("TAP",    min_value=0, step=1, value=0)

    tid_s  = st.number_input("Tid S (sek)", min_value=0, step=1, value=60)
    tid_d  = st.number_input("Tid D (sek)", min_value=0, step=1, value=60)
    vila   = st.number_input("Vila (sek)",  min_value=0, step=1, value=7)

    dt_tid  = st.number_input("DT tid (sek/kille)",  min_value=0, step=1, value=60)
    dt_vila = st.number_input("DT vila (sek/kille)", min_value=0, step=1, value=3)

    √§lskar    = st.number_input("√Ñlskar",                min_value=0, step=1, value=0)
    sover_med = st.number_input("Sover med (0 eller 1)", min_value=0, max_value=1, step=1, value=0)

    lbl_p  = f'{LABELS["PAPPAN"]} (max {st.session_state.MAX_PAPPAN})'
    lbl_g  = f'{LABELS["GRANNAR"]} (max {st.session_state.MAX_GRANNAR})'
    lbl_nv = f'{LABELS["NILS_VANNER"]} (max {st.session_state.MAX_NILS_VANNER})'
    lbl_nf = f'{LABELS["NILS_FAMILJ"]} (max {st.session_state.MAX_NILS_FAMILJ})'
    lbl_bk = f'{LABELS["BEKANTA"]} (max {st.session_state.MAX_BEKANTA})'

    pappans_v√§nner = st.number_input(lbl_p,  min_value=0, step=1, value=0, key="input_pappan")
    grannar        = st.number_input(lbl_g,  min_value=0, step=1, value=0, key="input_grannar")
    nils_v√§nner    = st.number_input(lbl_nv, min_value=0, step=1, value=0, key="input_nils_vanner")
    nils_familj    = st.number_input(lbl_nf, min_value=0, step=1, value=0, key="input_nils_familj")
    bekanta        = st.number_input(lbl_bk, min_value=0, step=1, value=0, key="input_bekanta")

    eskilstuna_killar = st.number_input(LABELS["ESKILSTUNA"], min_value=0, step=1, value=0, key="input_eskilstuna")

    nils = st.number_input("Nils", min_value=0, step=1, value=0)

    # Varningsflaggor vid √∂verskridna max (g√§ller inte Eskilstuna killar)
    if pappans_v√§nner > st.session_state.MAX_PAPPAN:
        st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {pappans_v√§nner} > max {st.session_state.MAX_PAPPAN}</span>", unsafe_allow_html=True)
    if grannar > st.session_state.MAX_GRANNAR:
        st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {grannar} > max {st.session_state.MAX_GRANNAR}</span>", unsafe_allow_html=True)
    if nils_v√§nner > st.session_state.MAX_NILS_VANNER:
        st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {nils_v√§nner} > max {st.session_state.MAX_NILS_VANNER}</span>", unsafe_allow_html=True)
    if nils_familj > st.session_state.MAX_NILS_FAMILJ:
        st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {nils_familj} > max {st.session_state.MAX_NILS_FAMILJ}</span>", unsafe_allow_html=True)
    if bekanta > st.session_state.MAX_BEKANTA:
        st.markdown(f"<span style='color:#d00'>‚ö†Ô∏è {bekanta} > max {st.session_state.MAX_BEKANTA}</span>", unsafe_allow_html=True)

    scen = next_scene_number()
    rad_datum, veckodag = datum_och_veckodag_f√∂r_scen(scen)

    grund_preview = {
        "Typ": "",
        "Veckodag": veckodag, "Scen": scen,
        "M√§n": m√§n, "Svarta": svarta, "Fitta": fitta, "Rumpa": rumpa, "DP": dp, "DPP": dpp, "DAP": dap, "TAP": tap,
        "Tid S": tid_s, "Tid D": tid_d, "Vila": vila,
        "DT tid (sek/kille)": dt_tid, "DT vila (sek/kille)": dt_vila,
        "√Ñlskar": √§lskar, "Sover med": sover_med,
        "Pappans v√§nner": pappans_v√§nner, "Grannar": grannar,
        "Nils v√§nner": nils_v√§nner, "Nils familj": nils_familj, "Bekanta": bekanta, "Eskilstuna killar": eskilstuna_killar,
        "Nils": nils,
        "Avgift": float(st.session_state["FEE_USD"]),
    }

    def _calc_preview(grund):
        try:
            if callable(calc_row_values):
                bd = _cfg_date("BIRTHDATE", "1990-01-01")
                stime = _cfg_time("STARTTIME", "07:00:00")
                return calc_row_values(grund, rad_datum, bd, stime)
            else:
                st.error("Hittar inte berakningar.py eller berakna_radvarden().")
                return {}
        except Exception as e:
            st.warning(f"F√∂rhandsber√§kning misslyckades: {e}")
            return {}

    preview = _calc_preview(grund_preview)

    st.markdown("---")
    st.subheader("üîé F√∂rhandsvisning (innan spar)")

    col1, col2 = st.columns(2)
    with col1:
        st.metric("Datum / veckodag", f"{rad_datum} / {veckodag}")
        st.metric("Summa tid", preview.get("Summa tid", "-"))
        st.metric("Summa tid (sek)", int(preview.get("Summa tid (sek)", 0)))
        st.metric("H√•ngel (m:s/kille)", preview.get("H√•ngel (m:s/kille)", "-"))
    with col2:
        st.metric("Totalt m√§n (raden)", int(preview.get("Totalt M√§n", 0)))
        st.metric("Tid per kille", preview.get("Tid per kille", "-"))
        st.metric("Tid per kille (sek)", int(preview.get("Tid per kille (sek)", 0)))
        st.metric("Suger per kille (sek)", int(preview.get("Suger per kille (sek)", 0)))

    st.caption(f"Klockan blir: {preview.get('Klockan','-')} (start {_cfg_time('STARTTIME').strftime('%H:%M')})")

    # ===== Prenumeranter & Ekonomi (live) =====
    st.markdown("#### üìà Prenumeranter & Ekonomi (live)")
    ec1, ec2, ec3, ec4 = st.columns(4)
    with ec1:
        st.metric("Prenumeranter (rad)", int(preview.get("Prenumeranter", 0)))
        st.metric("Avgift (rad)", _usd(preview.get("Avgift", _cfg_float("FEE_USD",30.0))))
    with ec2:
        st.metric("Int√§kter (rad)", _usd(preview.get("Int√§kter", 0)))
        st.metric("L√∂n Malin", _usd(preview.get("L√∂n Malin", 0)))
    with ec3:
        st.metric("Kostnad m√§n", _usd(preview.get("Int√§kt m√§n", 0)))
        st.metric("Int√§kt K√§nner", _usd(preview.get("Int√§kt K√§nner", 0)))
    with ec4:
        st.metric("Int√§kt F√∂retaget", _usd(preview.get("Int√§kt F√∂retaget", 0)))
        st.metric("Vinst (rad)", _usd(preview.get("Vinst", 0)))

    # ============================== Spara ================================
    def _save_row(grund, rad_datum, veckodag):
        try:
            base = dict(grund)
            base.setdefault("Avgift", float(st.session_state["FEE_USD"]))
            bd = _cfg_date("BIRTHDATE", "1990-01-01")
            stime = _cfg_time("STARTTIME", "07:00:00")
            ber = calc_row_values(base, rad_datum, bd, stime)
            ber["Datum"] = rad_datum.isoformat()
        except Exception as e:
            st.error(f"Ber√§kningen misslyckades vid sparning: {e}")
            return

        row = [ber.get(col, "") for col in _retry_call(sheet.row_values,1)]
        _retry_call(sheet.append_row, row)
        st.success(f"‚úÖ Rad sparad ({ber.get('Typ') or 'H√§ndelse'}). Datum {rad_datum} ({veckodag}), Klockan {ber.get('Klockan','-')}")

    if st.button("üíæ Spara raden"):
        _save_row(grund_preview, rad_datum, veckodag)

    # ============================== Snabb√•tg√§rder (exempel: vila) ===============================
    st.markdown("---")
    st.subheader("üõ†Ô∏è Snabb√•tg√§rder")

    def _rand_40_60_of_max(mx: int) -> int:
        try:
            mx = int(mx)
        except Exception:
            mx = 0
        if mx <= 0:
            return 0
        lo = max(0, int(round(mx * 0.40)))
        hi = max(lo, int(round(mx * 0.60)))
        import random as _r
        return _r.randint(lo, hi)

    def _rand_eskilstuna_20_40() -> int:
        r = random.random()
        if r < 0.30:
            return random.randint(20, 30)
        else:
            return random.randint(31, 40)

    if st.button("‚ûï Skapa 'Vila p√• jobbet'-rad"):
        try:
            scen_num = next_scene_number()
            rad_datum2, veckodag2 = datum_och_veckodag_f√∂r_scen(scen_num)

            pv = _rand_40_60_of_max(_cfg_int("MAX_PAPPAN", 0))
            gr = _rand_40_60_of_max(_cfg_int("MAX_GRANNAR", 0))
            nv = _rand_40_60_of_max(_cfg_int("MAX_NILS_VANNER", 0))
            nf = _rand_40_60_of_max(_cfg_int("MAX_NILS_FAMILJ", 0))
            bk = _rand_40_60_of_max(_cfg_int("MAX_BEKANTA", 0))
            esk = _rand_eskilstuna_20_40()

            grund_vila = {
                "Typ": "Vila p√• jobbet",
                "Veckodag": veckodag2, "Scen": scen_num,
                "M√§n": 0, "Svarta": 0, "Fitta": 0, "Rumpa": 0, "DP": 0, "DPP": 0, "DAP": 0, "TAP": 0,
                "Tid S": 0, "Tid D": 0, "Vila": 0,
                "DT tid (sek/kille)": 60, "DT vila (sek/kille)": 3,
                "√Ñlskar": 12, "Sover med": 1,
                "Pappans v√§nner": pv, "Grannar": gr,
                "Nils v√§nner": nv, "Nils familj": nf, "Bekanta": bk, "Eskilstuna killar": esk,
                "Nils": 0,
                "Avgift": float(st.session_state["FEE_USD"]),
            }
            _save_row(grund_vila, rad_datum2, veckodag2)
        except Exception as e:
            st.error(f"Misslyckades att skapa 'Vila p√• jobbet'-rad: {e}")

    if st.button("üè† Skapa 'Vila i hemmet' (7 dagar)"):
        try:
            start_scene = next_scene_number()
            r = random.random()
            if r < 0.50:
                ones_count = 0
            elif r < 0.95:
                ones_count = 1
            else:
                ones_count = 2
            nils_one_offsets = set(random.sample(range(6), ones_count)) if ones_count > 0 else set()

            for offset in range(7):
                scen_num = start_scene + offset
                rad_d, veckod = datum_och_veckodag_f√∂r_scen(scen_num)

                if offset <= 4:
                    pv = _rand_40_60_of_max(_cfg_int("MAX_PAPPAN", 0))
                    gr = _rand_40_60_of_max(_cfg_int("MAX_GRANNAR", 0))
                    nv = _rand_40_60_of_max(_cfg_int("MAX_NILS_VANNER", 0))
                    nf = _rand_40_60_of_max(_cfg_int("MAX_NILS_FAMILJ", 0))
                    bk = _rand_40_60_of_max(_cfg_int("MAX_BEKANTA", 0))
                    esk = _rand_eskilstuna_20_40()
                else:
                    pv = gr = nv = nf = bk = 0
                    esk = _rand_eskilstuna_20_40()

                sv = 1 if offset == 6 else 0

                if offset == 6:
                    nils_val = 0
                else:
                    nils_val = 1 if offset in nils_one_offsets else 0

                grund_home = {
                    "Typ": "Vila i hemmet",
                    "Veckodag": veckod, "Scen": scen_num,
                    "M√§n": 0, "Svarta": 0, "Fitta": 0, "Rumpa": 0, "DP": 0, "DPP": 0, "DAP": 0, "TAP": 0,
                    "Tid S": 0, "Tid D": 0, "Vila": 0,
                    "DT tid (sek/kille)": 60, "DT vila (sek/kille)": 3,
                    "√Ñlskar": 6, "Sover med": sv,
                    "Pappans v√§nner": pv, "Grannar": gr,
                    "Nils v√§nner": nv, "Nils familj": nf, "Bekanta": bk, "Eskilstuna killar": esk,
                    "Nils": nils_val,
                    "Avgift": float(st.session_state["FEE_USD"]),
                }
                _save_row(grund_home, rad_d, veckod)

            st.success("‚úÖ Skapade 7 'Vila i hemmet'-rader.")
        except Exception as e:
            st.error(f"Misslyckades att skapa 'Vila i hemmet': {e}")

    # ================================ Visa ================================
    st.subheader("üìä Aktuella data")
    try:
        rows = _retry_call(sheet.get_all_records)
        if rows:
            st.dataframe(rows, use_container_width=True)
        else:
            st.info("Inga datarader √§nnu.")
    except Exception as e:
        st.warning(f"Kunde inte l√§sa data: {e}")
