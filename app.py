import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from random import sample
import math

# Autentisering
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
gc = gspread.authorize(credentials)

# Spreadsheet
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"
sh = gc.open_by_url(SPREADSHEET_URL)

# Kolumner
DATA_COLUMNS = [
    "Datum", "Typ", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
    "Enkel vaginal", "Enkel anal",
    "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj", "√ñvriga m√§n",
    "√Ñlskar med", "Sover med", "Nils sex",
    "DT tid per man (sek)", "DT total tid (sek)", "Total tid (sek)", "Total tid (h)",
    "Prenumeranter", "Int√§kt ($)", "Kvinnans l√∂n ($)", "M√§ns l√∂n ($)", "Kompisars l√∂n ($)",
    "Minuter per kille", "Scenens l√§ngd (h)"
]

INST_COLUMNS = ["Inst√§llning", "V√§rde", "Senast √§ndrad"]

# Initiera blad
def init_sheet(name, cols):
    try:
        worksheet = sh.worksheet(name)
    except:
        worksheet = sh.add_worksheet(title=name, rows="1000", cols="30")
        worksheet.update("A1", [cols])
    else:
        existing_cols = worksheet.row_values(1)
        if existing_cols != cols:
            worksheet.resize(rows=1)
            worksheet.update("A1", [cols])

def init_inst√§llningar():
    try:
        worksheet = sh.worksheet("Inst√§llningar")
    except:
        worksheet = sh.add_worksheet(title="Inst√§llningar", rows="100", cols="3")
        worksheet.update("A1", [INST_COLUMNS])
        standard = [
            ["Kvinnans namn", "Malin", datetime.now().strftime("%Y-%m-%d")],
            ["F√∂delsedatum", "1984-03-26", datetime.now().strftime("%Y-%m-%d")],
            ["Startdatum", "2014-03-26", datetime.now().strftime("%Y-%m-%d")],
            ["Kompisar", "100", datetime.now().strftime("%Y-%m-%d")],
            ["Pappans v√§nner", "40", datetime.now().strftime("%Y-%m-%d")],
            ["Nils v√§nner", "30", datetime.now().strftime("%Y-%m-%d")],
            ["Nils familj", "20", datetime.now().strftime("%Y-%m-%d")]
        ]
        worksheet.update(f"A2:C{len(standard)+1}", standard)

def l√§s_inst√§llningar():
    worksheet = sh.worksheet("Inst√§llningar")
    data = worksheet.get_all_records()
    inst = {}
    for rad in data:
        val = str(rad["V√§rde"])
        try:
            inst[rad["Inst√§llning"]] = float(val.replace(",", "."))
        except:
            inst[rad["Inst√§llning"]] = val
    return inst

def spara_inst√§llning(nyckel, v√§rde):
    worksheet = sh.worksheet("Inst√§llningar")
    df = pd.DataFrame(worksheet.get_all_records())
    idag = datetime.now().strftime("%Y-%m-%d")
    if nyckel in df["Inst√§llning"].values:
        idx = df[df["Inst√§llning"] == nyckel].index[0]
        worksheet.update_cell(idx + 2, 2, str(v√§rde))
        worksheet.update_cell(idx + 2, 3, idag)
    else:
        worksheet.append_row([nyckel, str(v√§rde), idag])

def s√§kerst√§ll_kolumner(df):
    for kolumn in DATA_COLUMNS:
        if kolumn not in df.columns:
            df[kolumn] = ""
    return df[DATA_COLUMNS]

def spara_data(df):
    df = df.fillna("").astype(str)
    worksheet = sh.worksheet("Data")
    worksheet.clear()
    worksheet.update("A1", [df.columns.tolist()] + df.values.tolist())

def ladda_data():
    try:
        worksheet = sh.worksheet("Data")
        data = worksheet.get_all_records()
        if not data:
            return pd.DataFrame(columns=DATA_COLUMNS)
        df = pd.DataFrame(data)
        return s√§kerst√§ll_kolumner(df)
    except:
        return pd.DataFrame(columns=DATA_COLUMNS)

def scenformul√§r(df, inst):
    st.subheader("L√§gg till scen eller vila")

    if "form_data" not in st.session_state:
        st.session_state.form_data = {
            "Typ": "Scen",
            "DP": 0, "DPP": 0, "DAP": 0,
            "TPA": 0, "TPP": 0, "TAP": 0,
            "Enkel vaginal": 0, "Enkel anal": 0,
            "Kompisar": 0, "Pappans v√§nner": 0, "Nils v√§nner": 0, "Nils familj": 0,
            "√ñvriga m√§n": 0,
            "√Ñlskar med": 0, "Sover med": 0,
            "DT tid per man (sek)": 0,
            "Scenens l√§ngd (h)": 0,
            "Antal vilodagar": 1
        }

    with st.form("l√§gg_till_formul√§r"):
        f = st.session_state.form_data
        f["Typ"] = st.selectbox("Typ", ["Scen", "Vila inspelningsplats", "Vilovecka hemma"], index=["Scen", "Vila inspelningsplats", "Vilovecka hemma"].index(f["Typ"]))
        f["Antal vilodagar"] = st.number_input("Antal vilodagar", min_value=1, step=1, value=f["Antal vilodagar"])
        f["Scenens l√§ngd (h)"] = st.number_input("Scenens l√§ngd", min_value=0.0, step=0.25, value=f["Scenens l√§ngd (h)"])
        f["√ñvriga m√§n"] = st.number_input("√ñvriga m√§n", min_value=0, step=1, value=f["√ñvriga m√§n"])
        f["Enkel vaginal"] = st.number_input("Enkel vaginal", min_value=0, step=1, value=f["Enkel vaginal"])
        f["Enkel anal"] = st.number_input("Enkel anal", min_value=0, step=1, value=f["Enkel anal"])
        f["DP"] = st.number_input("DP", min_value=0, step=1, value=f["DP"])
        f["DPP"] = st.number_input("DPP", min_value=0, step=1, value=f["DPP"])
        f["DAP"] = st.number_input("DAP", min_value=0, step=1, value=f["DAP"])
        f["TPP"] = st.number_input("TPP", min_value=0, step=1, value=f["TPP"])
        f["TAP"] = st.number_input("TAP", min_value=0, step=1, value=f["TAP"])
        f["TPA"] = st.number_input("TPA", min_value=0, step=1, value=f["TPA"])
        f["Kompisar"] = st.number_input("Kompisar", min_value=0, max_value=int(inst.get("Kompisar", 999)), step=1, value=f["Kompisar"])
        f["Pappans v√§nner"] = st.number_input("Pappans v√§nner", min_value=0, max_value=int(inst.get("Pappans v√§nner", 999)), step=1, value=f["Pappans v√§nner"])
        f["Nils v√§nner"] = st.number_input("Nils v√§nner", min_value=0, max_value=int(inst.get("Nils v√§nner", 999)), step=1, value=f["Nils v√§nner"])
        f["Nils familj"] = st.number_input("Nils familj", min_value=0, max_value=int(inst.get("Nils familj", 999)), step=1, value=f["Nils familj"])
        f["DT tid per man (sek)"] = st.number_input("DT tid per man", min_value=0, step=1, value=f["DT tid per man (sek)"])
        f["√Ñlskar med"] = st.number_input("Antal √§lskar med", min_value=0, step=1, value=f["√Ñlskar med"])
        f["Sover med"] = st.number_input("Antal sover med", min_value=0, step=1, value=f["Sover med"])

        # Visa ber√§knad tid
        from berakningar import ber√§kna_tid_per_kille
        tid_min, total_h = ber√§kna_tid_per_kille(f)
        st.info(f"üïí Varje kille f√•r {tid_min:.2f} minuter inkl. deep throat")
        if total_h > 18:
            st.warning(f"‚ö†Ô∏è Total tid ({total_h:.2f} timmar) √∂verskrider 18 timmar!")

        submit = st.form_submit_button("L√§gg till")

    if submit:
        from berakningar import process_l√§gg_till_rader
        df = process_l√§gg_till_rader(df, inst, f)
        spara_data(df)

        # Nollst√§ll f√§lten
        del st.session_state.form_data
        st.rerun()

import streamlit as st
import pandas as pd
from datetime import datetime
from google.oauth2.service_account import Credentials
import gspread

# Autentisering och initiering
SHEET_URL = "https://docs.google.com/spreadsheets/d/1U7P_f57LqDvm_gBtzBjRWyTuTj-nQlSwgDnN36Yj4cU/edit#gid=0"
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"])
gc = gspread.authorize(credentials)
sh = gc.open_by_url(SHEET_URL)
blad = sh.worksheet("Data")

# Standardinst√§llningar
STANDARDINST√ÑLLNINGAR = {
    "Startdatum": "2014-03-26",
    "Kvinnans namn": "Malin",
    "F√∂delsedatum": "1984-03-26",
    "Kompisar": 40,
    "Pappans v√§nner": 20,
    "Nils v√§nner": 20,
    "Nils familj": 10
}

def load_data():
    try:
        data = blad.get_all_records()
        return pd.DataFrame(data)
    except:
        blad.update([list(STANDARDINST√ÑLLNINGAR.keys())])
        return pd.DataFrame(columns=list(STANDARDINST√ÑLLNINGAR.keys()))

def spara_data(df):
    df_str = df.fillna("").astype(str)
    blad.update([df_str.columns.values.tolist()] + df_str.values.tolist())

def visa_inst√§llningar(inst):
    with st.sidebar:
        st.header("Inst√§llningar")
        for nyckel in ["Startdatum", "Kvinnans namn", "F√∂delsedatum", "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]:
            ny_v√§rde = st.text_input(nyckel, str(inst.get(nyckel, "")), key=f"inst_{nyckel}")
            inst[nyckel] = ny_v√§rde if nyckel in ["Startdatum", "Kvinnans namn", "F√∂delsedatum"] else int(ny_v√§rde)
        if st.button("Spara inst√§llningar"):
            instblad = sh.worksheet("Inst√§llningar")
            instblad.update("A1", [[k, inst[k]] for k in inst])

def l√§s_inst√§llningar():
    try:
        instblad = sh.worksheet("Inst√§llningar")
        data = instblad.get_all_records()
        return {rad["Inst√§llning"]: rad["V√§rde"] for rad in data}
    except:
        instblad = sh.add_worksheet(title="Inst√§llningar", rows="100", cols="2")
        instblad.update("A1", [["Inst√§llning", "V√§rde"]])
        for k, v in STANDARDINST√ÑLLNINGAR.items():
            instblad.append_row([k, v])
        return STANDARDINST√ÑLLNINGAR.copy()

def main():
    st.title("üé¨ Scenplanering ‚Äì Malin")

    inst = l√§s_inst√§llningar()
    visa_inst√§llningar(inst)

    df = load_data()
    from berakningar import process_l√§gg_till_rader
    from berakningar import ber√§kna_tid_per_kille
    scenformul√§r(df, inst)

    st.subheader("Alla scener och vilodagar")
    if not df.empty:
        st.dataframe(df, use_container_width=True)

if __name__ == "__main__":
    main()
