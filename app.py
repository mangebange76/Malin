import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, timedelta

# Autentisering
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
gc = gspread.authorize(credentials)

# Fil och blad
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"
SPREADSHEET_NAME = "MalinData2"
sh = gc.open_by_url(SPREADSHEET_URL)

# Initiera blad
def init_sheet(name, cols):
    try:
        sh.worksheet(name)
    except:
        sh.add_worksheet(title=name, rows="1000", cols="30")
        sh.values_update(name, {"range": "A1", "majorDimension": "ROWS", "values": [cols]})

init_sheet("Data", [
    "Datum", "Typ", "M√§n", "DP", "DPP", "DAP", "TPA", "TPP", "TAP", "Vaginal", "Anal",
    "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj",
    "Tid per man (min)", "DT tid (sek)", "DT m√§n", "DT total tid (sek)",
    "√Ñlskar med", "Sover med", "Total tid (sek)", "Int√§kt (USD)",
    "Kvinna l√∂n", "M√§n l√∂n", "Kompis l√∂n", "Prenumeranter", "Kurs"
])

init_sheet("Inst√§llningar", [
    "Inst√§llning", "V√§rde", "Senast √§ndrad"
])

# Funktion: L√§s inst√§llningar fr√•n bladet
def l√§s_inst√§llningar():
    inst_df = pd.DataFrame(sh.worksheet("Inst√§llningar").get_all_records())
    inst = {
        rad["Inst√§llning"]: float(str(rad["V√§rde"]).replace(",", "."))
        if str(rad["V√§rde"]).replace(",", "").replace(".", "", 1).isdigit()
        else rad["V√§rde"]
        for _, rad in inst_df.iterrows()
    }
    return inst

# Funktion: Spara inst√§llning
def spara_inst√§llning(namn, v√§rde):
    inst_df = pd.DataFrame(sh.worksheet("Inst√§llningar").get_all_records())
    if namn in inst_df["Inst√§llning"].values:
        idx = inst_df[inst_df["Inst√§llning"] == namn].index[0]
        inst_df.at[idx, "V√§rde"] = v√§rde
        inst_df.at[idx, "Senast √§ndrad"] = datetime.now().strftime("%Y-%m-%d")
    else:
        inst_df = inst_df.append({
            "Inst√§llning": namn,
            "V√§rde": v√§rde,
            "Senast √§ndrad": datetime.now().strftime("%Y-%m-%d")
        }, ignore_index=True)
    sh.worksheet("Inst√§llningar").update([inst_df.columns.values.tolist()] + inst_df.values.tolist())

# L√§ser inst√§llningar in i appen
inst = l√§s_inst√§llningar()

# Sidopanel: Grundinst√§llningar
st.sidebar.header("‚öôÔ∏è Inst√§llningar")

startdatum = st.sidebar.text_input("Startdatum (t.ex. 2014-03-26)", value=inst.get("Startdatum", "2014-03-26"))
spara_inst√§llning("Startdatum", startdatum)

namn = st.sidebar.text_input("Namn", value=inst.get("Namn", "Malin"))
spara_inst√§llning("Namn", namn)

f√∂delsedatum = st.sidebar.text_input("F√∂delsedatum (t.ex. 1984-03-26)", value=inst.get("F√∂delsedatum", "1984-03-26"))
spara_inst√§llning("F√∂delsedatum", f√∂delsedatum)

for kategori in ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]:
    antal = int(st.sidebar.number_input(f"Antal {kategori}", min_value=0, value=int(inst.get(kategori, 0))))
    spara_inst√§llning(kategori, antal)

# Prenumerationsvikter
st.sidebar.subheader("üìà Prenumerationsvikter")
for typ in ["Vaginal", "Anal", "DP", "DPP", "DAP", "TPA", "TPP", "TAP"]:
    vikt = float(st.sidebar.number_input(f"Vikt {typ}", value=float(inst.get(f"Vikt_{typ}", 1.0)), step=0.1))
    spara_inst√§llning(f"Vikt_{typ}", vikt)

# Startkurs
startkurs = float(st.sidebar.number_input("Startkurs", value=float(inst.get("Startkurs", 1.0)), step=0.01))
spara_inst√§llning("Startkurs", startkurs)

# Funktion: H√§mta DataFrame fr√•n databladet
def h√§mta_data():
    data = sh.worksheet("Data").get_all_records()
    return pd.DataFrame(data)

df = h√§mta_data()

def sista_datum(df):
    if not df.empty:
        return pd.to_datetime(df["Datum"].iloc[-1])
    else:
        return pd.to_datetime(inst["Startdatum"])

def ber√§kna_tid(man_tid_min, dt_tid_sek, antal_m√§n):
    dt_total = dt_tid_sek * antal_m√§n + (antal_m√§n * 2) + (antal_m√§n // 10 * 30)
    total = (man_tid_min * 60 * antal_m√§n) + dt_total
    return total, dt_total

def ber√§kna_prenumeranter(rad, inst):
    pren = 0
    for typ in ["Vaginal", "Anal", "DP", "DPP", "DAP", "TPA", "TPP", "TAP"]:
        pren += rad[typ] * inst.get(f"Vikt_{typ}", 1.0)
    return round(pren)

st.header("‚ûï L√§gg till scen")

med_sc = st.checkbox("Ny scen")
med_vila = st.checkbox("L√§gg till vilodagar")

if med_sc:
    st.subheader("Ny scen")

    datum = (sista_datum(df) + timedelta(days=1)).strftime("%Y-%m-%d")
    m√§n = st.number_input("Totalt antal m√§n", min_value=0)
    dp = st.number_input("DP", min_value=0)
    dpp = st.number_input("DPP", min_value=0)
    dap = st.number_input("DAP", min_value=0)
    tpa = st.number_input("TPA", min_value=0)
    tpp = st.number_input("TPP", min_value=0)
    tap = st.number_input("TAP", min_value=0)
    vaginal = st.number_input("Enkel vaginal", min_value=0)
    anal = st.number_input("Enkel anal", min_value=0)

    kompisar = st.number_input("Kompisar (scenniv√•)", min_value=0, max_value=int(inst["Kompisar"]))
    pappans = st.number_input("Pappans v√§nner (scenniv√•)", min_value=0, max_value=int(inst["Pappans v√§nner"]))
    nils_v√§nner = st.number_input("Nils v√§nner", min_value=0, max_value=int(inst["Nils v√§nner"]))
    nils_familj = st.number_input("Nils familj", min_value=0, max_value=int(inst["Nils familj"]))

    tid_per_man = st.number_input("Tid per man (minuter)", min_value=0.0)
    dt_tid = st.number_input("Deep throat-tid per man (sek)", min_value=0.0)

    √§lskar_med = st.number_input("Antal '√§lskar med'", min_value=0)
    sover_med = st.number_input("Antal 'sover med'", min_value=0)

    # Summering
    totalt_antal_m√§n = m√§n + kompisar + pappans + nils_v√§nner + nils_familj
    total_tid, dt_total_tid = ber√§kna_tid(tid_per_man, dt_tid, totalt_antal_m√§n)
    totalt_tid_m_√§lskar = total_tid + ((√§lskar_med + sover_med) * 15 * 60)

    intakt = ber√§kna_prenumeranter({
        "Vaginal": vaginal, "Anal": anal,
        "DP": dp, "DPP": dpp, "DAP": dap,
        "TPA": tpa, "TPP": tpp, "TAP": tap
    }, inst) * 15

    kvinnol√∂n = 800
    m√§nl√∂n = m√§n * 200
    kompisl√∂n = max(0, intakt - kvinnol√∂n - m√§nl√∂n) / max(1, int(inst["Kompisar"]))

    ny_rad = {
        "Datum": datum, "Typ": "Scen", "M√§n": m√§n, "DP": dp, "DPP": dpp, "DAP": dap,
        "TPA": tpa, "TPP": tpp, "TAP": tap, "Vaginal": vaginal, "Anal": anal,
        "Kompisar": kompisar, "Pappans v√§nner": pappans, "Nils v√§nner": nils_v√§nner, "Nils familj": nils_familj,
        "Tid per man (min)": tid_per_man, "DT tid (sek)": dt_tid, "DT m√§n": totalt_antal_m√§n,
        "DT total tid (sek)": dt_total_tid, "√Ñlskar med": √§lskar_med, "Sover med": sover_med,
        "Total tid (sek)": totalt_tid_m_√§lskar,
        "Int√§kt (USD)": intakt, "Kvinna l√∂n": kvinnol√∂n, "M√§n l√∂n": m√§nl√∂n,
        "Kompis l√∂n": kompisl√∂n, "Prenumeranter": ber√§kna_prenumeranter({
            "Vaginal": vaginal, "Anal": anal, "DP": dp, "DPP": dpp, "DAP": dap,
            "TPA": tpa, "TPP": tpp, "TAP": tap
        }, inst),
        "Kurs": 0
    }

    if st.button("Spara scen"):
        df = df.append(ny_rad, ignore_index=True)
        sh.worksheet("Data").update([df.columns.tolist()] + df.values.tolist())
        st.rerun()

if med_vila:
    st.subheader("Vilodagar")

    dagar = st.number_input("Antal vilodagar", min_value=1)
    plats = st.radio("Plats", ["Inspelningsplats (21 dagar)", "Hem (7 dagar)"])

    datum = (sista_datum(df) + timedelta(days=1)).strftime("%Y-%m-%d")

    if plats == "Inspelningsplats (21 dagar)":
        max_procent = 0.6
        √§lskar_med = 12
        sover_med = 1
    else:
        max_procent = 0.1
        √§lskar_med = 8
        sover_med = 0

    totaler = {
        "Kompisar": inst["Kompisar"],
        "Pappans v√§nner": inst["Pappans v√§nner"],
        "Nils v√§nner": inst["Nils v√§nner"],
        "Nils familj": inst["Nils familj"]
    }

    import random
    nils_sex = 0
    if plats == "Hem (7 dagar)":
        nils_sex = random.randint(0, 2)

    if st.button("Generera vilodata"):
        for i in range(dagar):
            rand_rad = {
                "Datum": (pd.to_datetime(datum) + timedelta(days=i)).strftime("%Y-%m-%d"),
                "Typ": "Vila",
                "M√§n": 0, "DP": 0, "DPP": 0, "DAP": 0, "TPA": 0, "TPP": 0, "TAP": 0,
                "Vaginal": 0, "Anal": 0,
                "Kompisar": random.randint(0, int(totaler["Kompisar"] * max_procent)),
                "Pappans v√§nner": random.randint(0, int(totaler["Pappans v√§nner"] * max_procent)),
                "Nils v√§nner": random.randint(0, int(totaler["Nils v√§nner"] * max_procent)),
                "Nils familj": random.randint(0, int(totaler["Nils familj"] * max_procent)),
                "Tid per man (min)": 0, "DT tid (sek)": 0, "DT m√§n": 0, "DT total tid (sek)": 0,
                "√Ñlskar med": √§lskar_med,
                "Sover med": sover_med,
                "Total tid (sek)": 0,
                "Int√§kt (USD)": 0, "Kvinna l√∂n": 0, "M√§n l√∂n": 0, "Kompis l√∂n": 0,
                "Prenumeranter": 0, "Kurs": 0,
                "Nils sex hemma": nils_sex if i == 0 else 0
            }
            df = df.append(rand_rad, ignore_index=True)

        sh.worksheet("Data").update([df.columns.tolist()] + df.values.tolist())
        st.rerun()

# üîç Statistik
st.header("üìä Statistik")

antal_m√§n = df["M√§n"].sum()
antal_√§lskar = df["√Ñlskar med"].sum()
antal_sover = df["Sover med"].sum()

v√§nner = {
    "Kompisar": df["Kompisar"].sum(),
    "Pappans v√§nner": df["Pappans v√§nner"].sum(),
    "Nils v√§nner": df["Nils v√§nner"].sum(),
    "Nils familj": df["Nils familj"].sum(),
}

st.markdown(f"""
- üë© Namn: **{inst['Namn']}**
- üéÇ Nuvarande √•lder: **{(pd.to_datetime(df['Datum'].iloc[-1]) - pd.to_datetime(inst['F√∂delsedatum'])).days // 365} √•r**
- üìÖ Senaste datum: **{df['Datum'].iloc[-1]}**
- üî¢ Totalt antal m√§n: **{antal_m√§n}**
- ‚ù§Ô∏è √Ñlskat med: **{antal_√§lskar}**
- üí§ Sovit med: **{antal_sover}**
""")

for kategori, v√§rde in v√§nner.items():
    st.markdown(f"- üë• {kategori}: **{v√§rde} g√•nger**")

# üßÆ Funktion f√∂r kursuppdatering
def uppdatera_kurs(df, inst):
    df = df.copy()
    df["Kurs"] = 0.0
    kurs = inst.get("Startkurs", 1.0)
    total_aktier = 100000

    for i, rad in df.iterrows():
        if i == 0:
            df.at[i, "Kurs"] = kurs
            continue
        pren_idag = rad["Prenumeranter"]
        pren_ig√•r = df.at[i - 1, "Prenumeranter"]
        if pren_ig√•r == 0:
            df.at[i, "Kurs"] = kurs
        else:
            kurs *= (pren_idag / pren_ig√•r)
            df.at[i, "Kurs"] = kurs
    return df

# üíæ Spara kursuppdatering
if st.button("üîÑ Uppdatera aktiekurs & prenumeranter"):
    df = uppdatera_kurs(df, inst)
    sh.worksheet("Data").update([df.columns.tolist()] + df.values.tolist())
    st.success("Kurs och prenumeranter uppdaterade.")
    st.rerun()

# üóÉÔ∏è Export eller inspektion av data
st.subheader("üìÑ R√•data")
st.dataframe(df)
