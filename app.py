import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Autentisering
def auth_gspread():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(st.secrets["GOOGLE_CREDENTIALS"], scope)
    client = gspread.authorize(creds)
    return client

# Ladda data och sÃ¤kerstÃ¤ll kolumner
def load_data():
    client = auth_gspread()
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")

    headers = [
        "Dag", "MÃ¤n", "F", "R", "Dm", "Df", "Dr", "TPP", "TAP", "TPA",
        "Ã„lskar", "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils Fam",
        "Tid s", "Tid d", "Tid t", "Vila", "Ã„lsk tid",
        "DeepT", "Grabbar", "Sekunder", "Varv",
        "Snitt", "Total tid", "Tid kille DT", "Runk",
        "KÃ¤nner", "Totalt mÃ¤n", "Summa singel", "Summa dubbel", "Summa trippel",
        "Summa tid", "Suger", "Tid kille", "Filmer", "HÃ¥rdhet",
        "IntÃ¤kter", "Malins lÃ¶n", "FÃ¶retagets lÃ¶n", "VÃ¤nners lÃ¶n", "Klockan"
    ]

    current = worksheet.row_values(1)
    if current != headers:
        worksheet.resize(rows=1)
        worksheet.update("A1", [headers])

    df = pd.DataFrame(worksheet.get_all_records())
    return worksheet, df

# LÃ¤gg till ny rad
def append_row(row_dict):
    client = auth_gspread()
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")
    worksheet.append_row([row_dict.get(col, "") for col in worksheet.row_values(1)])

# NÃ¤sta datum
def nÃ¤sta_datum(df):
    if df.empty or "Dag" not in df.columns:
        return datetime.today().date()
    try:
        senaste = pd.to_datetime(df["Dag"], errors="coerce").dropna().max()
        return (senaste + timedelta(days=1)).date()
    except:
        return datetime.today().date()

# BerÃ¤kna kolumner
def berÃ¤kna_kolumner(df):
    df["KÃ¤nner"] = df[["Jobb", "Grannar", "Tjej PojkV", "Nils Fam"]].sum(axis=1)
    df["Totalt mÃ¤n"] = df["MÃ¤n"] + df["KÃ¤nner"]
    df["Snitt"] = df["DeepT"] / df["Grabbar"].replace(0, 1)
    df["Total tid"] = df["Snitt"] * (df["Sekunder"] * df["Varv"])
    df["Tid kille DT"] = df["Total tid"] / df["Totalt mÃ¤n"].replace(0, 1)
    df["Runk"] = 0.6 * df["Total tid"] / df["Totalt mÃ¤n"].replace(0, 1)
    df["Summa singel"] = (df["Tid s"] + df["Vila"]) * df["Totalt mÃ¤n"]
    df["Summa dubbel"] = ((df["Tid d"] + df["Vila"]) + 9) * (df["Dm"] + df["Df"] + df["Dr"])
    df["Summa trippel"] = ((df["Tid t"] + df["Vila"]) + 15) * (df["TPP"] + df["TAP"] + df["TPA"])
    df["Summa tid"] = df[["Summa singel", "Summa dubbel", "Summa trippel"]].sum(axis=1)
    df["Suger"] = 0.6 * df["Summa tid"] / df["Totalt mÃ¤n"].replace(0, 1)
    df["Tid kille"] = df["Tid s"] + (df["Tid d"] * 2) + (df["Tid t"] * 3) + df["Suger"]
    df["Filmer"] = (df["MÃ¤n"] + df["F"] + df["R"] + df["Dm"]*2 + df["Df"]*2 + df["Dr"]*3 +
                    df["TPP"]*4 + df["TAP"]*6 + df["TPA"]*5) * df["HÃ¥rdhet"]
    df["IntÃ¤kter"] = df["Filmer"] * 19.99
    df["Malins lÃ¶n"] = df["IntÃ¤kter"].apply(lambda x: min(x * 0.05, 1500))
    df["FÃ¶retagets lÃ¶n"] = df["IntÃ¤kter"] * 0.4
    df["VÃ¤nners lÃ¶n"] = df["IntÃ¤kter"] - df["Malins lÃ¶n"] - df["FÃ¶retagets lÃ¶n"]
    df["Klockan"] = (pd.to_datetime("07:00", format="%H:%M") + pd.to_timedelta(
        (df["Summa tid"] + df["Total tid"]) / 60, unit="m")).dt.strftime("%H:%M")
    df["HÃ¥rdhet"] = df.apply(lambda rad: 0 if rad["MÃ¤n"] == 0 else (
        1 + 2*(rad["Dm"]>0) + 2*(rad["Df"]>0) + 4*(rad["Dr"]>0) +
        4*(rad["TPP"]>0) + 6*(rad["TAP"]>0) + 5*(rad["TPA"]>0)), axis=1)
    return df

# Huvudfunktion
def main():
    st.title("ðŸ“Š MalinData")
    worksheet, df = load_data()
    if not df.empty:
        df = berÃ¤kna_kolumner(df)
        st.dataframe(df.tail(1))

if __name__ == "__main__":
    main()
