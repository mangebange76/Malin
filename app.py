import streamlit as st
import pandas as pd
import numpy as np
import gspread
import random
from google.oauth2.service_account import Credentials

# ---- Ladda data fr√•n Google Sheets ----
def load_data():
    scope = ["https://www.googleapis.com/auth/spreadsheets"]
    creds_dict = {
        "type": st.secrets["GOOGLE_CREDENTIALS"]["type"],
        "project_id": st.secrets["GOOGLE_CREDENTIALS"]["project_id"],
        "private_key_id": st.secrets["GOOGLE_CREDENTIALS"]["private_key_id"],
        "private_key": st.secrets["GOOGLE_CREDENTIALS"]["private_key"],
        "client_email": st.secrets["GOOGLE_CREDENTIALS"]["client_email"],
        "client_id": st.secrets["GOOGLE_CREDENTIALS"]["client_id"],
        "auth_uri": st.secrets["GOOGLE_CREDENTIALS"]["auth_uri"],
        "token_uri": st.secrets["GOOGLE_CREDENTIALS"]["token_uri"],
        "auth_provider_x509_cert_url": st.secrets["GOOGLE_CREDENTIALS"]["auth_provider_x509_cert_url"],
        "client_x509_cert_url": st.secrets["GOOGLE_CREDENTIALS"]["client_x509_cert_url"]
    }

    credentials = Credentials.from_service_account_info(creds_dict, scopes=scope)
    client = gspread.authorize(credentials)
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")

    data = worksheet.get_all_records()
    df = pd.DataFrame(data)

    # S√§kerst√§ll att alla kolumner som kr√§vs finns
    alla_kolumner = [
        "Dag", "Nya m√§n", "Fitta", "Rumpa", "Dubbelmacka", "Dubbel fitta", "Dubbel r√∂v",
        "Trippel fitta", "Trippel r√∂v", "Trippel penet", "√Ñlskar", "√Ñlsk tid", "Sover med",
        "Jobb", "Grannar", "Tjej PojkV", "Nils fam", "Tid singel", "Tid dubbel", "Tid trippel",
        "Vila", "DeepT", "Sekunder", "Varv"
    ]
    for kolumn in alla_kolumner:
        if kolumn not in df.columns:
            df[kolumn] = 0

    return worksheet, df

# ---- Uppdatera rad i Google Sheets ----
def update_row(worksheet, index, row_dict):
    cell_list = worksheet.range(index+2, 1, index+2, len(row_dict))
    for i, key in enumerate(row_dict):
        cell_list[i].value = row_dict[key]
    worksheet.update_cells(cell_list)

# ---- L√§gg till ny rad i Google Sheets ----
def append_row(data):
    worksheet, _ = load_data()
    worksheet.append_row(list(data.values()))

# ---- Ber√§kningar ----
def update_calculations(df):
    df = df.copy()

    # K√§nner (kompisar) ‚Äì maxv√§rden
    jobb2 = df["Jobb"].max()
    grannar2 = df["Grannar"].max()
    tjej2 = df["Tjej PojkV"].max()
    fam2 = df["Nils fam"].max()

    df["Jobb 2"] = jobb2
    df["Grannar 2"] = grannar2
    df["Tjej PojkV 2"] = tjej2
    df["Nils fam 2"] = fam2

    df["K√§nner 2"] = jobb2 + grannar2 + tjej2 + fam2
    df["Totalt m√§n"] = df["Nya m√§n"] + df["K√§nner 2"]

    # Summa singel, dubbel, trippel
    df["Summa singel"] = (df["Tid singel"] + df["Vila"]) * df["Totalt m√§n"]
    df["Summa dubbel"] = ((df["Tid dubbel"] + df["Vila"]) + 9) * (df["Dubbelmacka"] + df["Dubbel fitta"] + df["Dubbel r√∂v"])
    df["Summa trippel"] = ((df["Tid trippel"] + df["Vila"]) + 15) * (df["Trippel fitta"] + df["Trippel r√∂v"] + df["Trippel penet"])

    df["Summa tid"] = df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"]

    # Suger = 60% av summa / totalt m√§n
    df["Suger"] = (df["Summa tid"] * 0.6) / df["Totalt m√§n"]

    # Grabbar & snitt
    df["Grabbar"] = df["Nya m√§n"] + df["K√§nner 2"]
    df["Snitt"] = df["DeepT"] / df["Grabbar"]

    # Total tid & tid per kille
    df["Total tid"] = df["Snitt"] * (df["Sekunder"] * df["Varv"])
    df["Tid kille DT"] = df["Total tid"] / df["Totalt m√§n"]
    df["Runk"] = (df["Total tid"] * 0.6) / df["Totalt m√§n"]

    df["Tid kille"] = (
        df["Tid singel"] +
        (df["Tid dubbel"] * 2) +
        (df["Tid trippel"] * 3) +
        df["Suger"] +
        df["Tid kille DT"] +
        df["Runk"]
    )

    # Tids√•tg√•ng i format "X h Y min"
    def calc_tids√•tg√•ng(row):
        total_min = float(row.get("Summa tid", 0)) + float(row.get("Total tid", 0))
        timmar = int(total_min // 60)
        minuter = int(total_min % 60)
        return f"{timmar} h {minuter} min"

    df["Tids√•tg√•ng"] = df.apply(calc_tids√•tg√•ng, axis=1)

    # √ñvriga ber√§kningar
    df["Filmer"] = df["Nya m√§n"] > 0
    df["Pris"] = 39.99
    df["Int√§kter"] = df["Filmer"] * df["Pris"]
    df["Malin l√∂n"] = np.minimum(df["Int√§kter"] * 0.02, 1000)
    df["F√∂retagets l√∂n"] = 10000

    int_sum = df["Int√§kter"].sum()
    malin_sum = df["Malin l√∂n"].sum()
    foretag_sum = df["F√∂retagets l√∂n"].sum()
    k√§nner2 = df["K√§nner 2"].iloc[0] if "K√§nner 2" in df else 0

    if k√§nner2 > 0:
        df["V√§nner l√∂n"] = (int_sum - malin_sum - foretag_sum) / k√§nner2
    else:
        df["V√§nner l√∂n"] = 0

    return df

# ---- Inmatning av ny rad ----
def inmatning(df, worksheet):
    st.subheader("‚ûï L√§gg till ny rad")
    with st.form("form_ny_rad"):
        ny_rad = {}
        ny_rad["Dag"] = int(df["Dag"].max() + 1) if not df.empty else 1

        f√§lt_ordning = [
            "Nya m√§n", "Fitta", "Rumpa", "Dubbelmacka", "Dubbel fitta", "Dubbel r√∂v",
            "Trippel fitta", "Trippel r√∂v", "Trippel penet", "√Ñlskar", "√Ñlsk tid",
            "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils fam",
            "Tid singel", "Tid dubbel", "Tid trippel", "Vila", "DeepT", "Sekunder", "Varv"
        ]

        for f√§lt in f√§lt_ordning:
            if "Tid" in f√§lt or f√§lt in ["Snitt"]:
                ny_rad[f√§lt] = st.number_input(f√§lt, value=0.0, step=0.1)
            else:
                ny_rad[f√§lt] = st.number_input(f√§lt, value=0, step=1)

        if st.form_submit_button("üíæ Spara rad"):
            ny_df = pd.DataFrame([ny_rad])
            ny_df = update_calculations(ny_df)
            append_row(ny_df.iloc[0].to_dict())
            st.success("‚úÖ Raden sparades!")
            st.experimental_rerun()

# ---- Redigera befintliga rader ----
def redigera_rader(df, worksheet):
    st.subheader("üìù Redigera befintliga rader")
    for i, row in df.iterrows():
        with st.expander(f"Dag {int(row['Dag'])}"):
            with st.form(f"form_edit_{i}"):
                uppdaterad = {}
                redigerbara = [
                    "Nya m√§n", "Fitta", "Rumpa", "Dubbelmacka", "Dubbel fitta", "Dubbel r√∂v",
                    "Trippel fitta", "Trippel r√∂v", "Trippel penet", "√Ñlskar", "√Ñlsk tid",
                    "Sover med", "Jobb", "Grannar", "Tjej PojkV", "Nils fam",
                    "Tid singel", "Tid dubbel", "Tid trippel", "Vila", "DeepT", "Sekunder", "Varv"
                ]
                for f√§lt in redigerbara:
                    if "Tid" in f√§lt:
                        uppdaterad[f√§lt] = st.number_input(f"{f√§lt}", value=float(row[f√§lt]), step=0.1, key=f"{f√§lt}_{i}")
                    else:
                        uppdaterad[f√§lt] = st.number_input(f"{f√§lt}", value=int(row[f√§lt]), step=1, key=f"{f√§lt}_{i}")

                if st.form_submit_button("Uppdatera rad"):
                    for key, val in uppdaterad.items():
                        df.at[i, key] = val
                    df = update_calculations(df)
                    update_row(worksheet, i, df.iloc[i].to_dict())
                    st.success("‚úÖ Raden uppdaterades.")
                    st.experimental_rerun()

# ---- Kommandon ----

def kopiera_storsta(df):
    if df.empty:
        return
    idx = df["Totalt m√§n"].idxmax()
    ny_rad = df.loc[idx].copy()
    ny_rad["Dag"] = int(df["Dag"].max()) + 1
    ny_df = pd.DataFrame([ny_rad])
    ny_df = update_calculations(ny_df)
    append_row(ny_df.iloc[0].to_dict())

def slumpa_rad(df):
    if df.empty:
        ny_dag = 1
    else:
        ny_dag = int(df["Dag"].max()) + 1

    ny_rad = {
        "Dag": ny_dag,
        "√Ñlskar": 8,
        "Sover med": 1,
        "Vila": 7,
        "√Ñlsk tid": 30
    }

    inmatningsf√§lt = [
        "Nya m√§n", "Fitta", "Rumpa", "Dubbelmacka", "Dubbel fitta", "Dubbel r√∂v",
        "Trippel fitta", "Trippel r√∂v", "Trippel penet", "Jobb", "Grannar", "Tjej PojkV", "Nils fam",
        "Tid singel", "Tid dubbel", "Tid trippel", "DeepT", "Sekunder", "Varv"
    ]

    for f√§lt in inmatningsf√§lt:
        if f√§lt in df.columns:
            min_val = int(df[f√§lt].min())
            max_val = int(df[f√§lt].max())
            ny_rad[f√§lt] = random.randint(min_val, max_val) if max_val > 0 else 0
        else:
            ny_rad[f√§lt] = 0

    ny_df = pd.DataFrame([ny_rad])
    ny_df = update_calculations(ny_df)
    append_row(ny_df.iloc[0].to_dict())

def vilodag_hemma(df):
    ny_rad = {
        "Dag": int(df["Dag"].max() + 1) if not df.empty else 1,
        "Vila": 7,
        "√Ñlskar": 8,
        "Sover med": 1,
        "√Ñlsk tid": 30
    }
    ny_df = pd.DataFrame([ny_rad])
    ny_df = update_calculations(ny_df)
    append_row(ny_df.iloc[0].to_dict())

def vilodag_jobb(df):
    ny_rad = {
        "Dag": int(df["Dag"].max() + 1) if not df.empty else 1,
        "Vila": 7,
        "√Ñlskar": 8,
        "Sover med": 1,
        "√Ñlsk tid": 30
    }
    for f√§lt in ["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]:
        max_val = int(df[f√§lt].max()) if f√§lt in df.columns else 0
        ny_rad[f√§lt] = int(max_val * 0.3)
    ny_df = pd.DataFrame([ny_rad])
    ny_df = update_calculations(ny_df)
    append_row(ny_df.iloc[0].to_dict())

def main():
    st.set_page_config(page_title="MalinData", layout="wide")
    st.title("üìä MalinData-app")

    worksheet, df = load_data()
    df = update_calculations(df)

    st.markdown("## ‚ûï Ny inmatning")
    inmatning(df, worksheet)

    st.markdown("---")
    st.markdown("## ‚úèÔ∏è Redigera rader")
    redigera_rader(df, worksheet)

    st.markdown("---")
    st.markdown("## ‚öôÔ∏è Snabbkommandon")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if st.button("üè† Vilodag hemma"):
            vilodag_hemma(df)
            st.experimental_rerun()
    with col2:
        if st.button("üíº Vilodag jobb"):
            vilodag_jobb(df)
            st.experimental_rerun()
    with col3:
        if st.button("üé≤ Slumpa rad"):
            slumpa_rad(df)
            st.experimental_rerun()
    with col4:
        if st.button("üìã Kopiera st√∂rsta raden"):
            kopiera_storsta(df)
            st.experimental_rerun()

if __name__ == "__main__":
    main()
