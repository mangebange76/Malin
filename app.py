import streamlit as st
import pandas as pd
import datetime
import json
import gspread
from google.oauth2.service_account import Credentials

st.set_page_config(page_title="MalinData", layout="wide")

# Autentisering
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(json.loads(st.secrets["GOOGLE_CREDENTIALS"]), scopes=scope)
client = gspread.authorize(credentials)

SHEET_NAME = "MalinData"
WORKSHEET_NAME = "Blad1"

ALL_COLUMNS = [
    "Dag", "MÃ¤n", "F", "R", "Dm", "Df", "Dr", "3f", "3r", "3p", "Tid s", "Tid d", "Tid t", "Vila",
    "Summa s", "Summa d", "Summa t", "Summa v", "Klockan", "Ã„lskar", "Ã„lsk tid", "Sover med",
    "KÃ¤nner", "Jobb", "Grannar", "Nils kom", "Pv", "Tid kille", "Filmer", "Pris", "IntÃ¤kter",
    "Malin", "FÃ¶retag", "VÃ¤nner", "HÃ¥rdhet", "Svarta", "GB"
]

def load_data():
    spreadsheet = client.open(SHEET_NAME)
    worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
    data = worksheet.get_all_records()

    if not data:
        worksheet.append_row(ALL_COLUMNS)
        return worksheet, pd.DataFrame(columns=ALL_COLUMNS)

    df = pd.DataFrame(data)

    # Om rubriker saknas eller Ã¤r fel: rensa blad och Ã¥terskapa
    if list(df.columns) != ALL_COLUMNS:
        worksheet.clear()
        worksheet.append_row(ALL_COLUMNS)
        return worksheet, pd.DataFrame(columns=ALL_COLUMNS)

    return worksheet, df

def save_data(worksheet, df):
    worksheet.clear()
    worksheet.append_row(ALL_COLUMNS)
    rows = df.fillna("").astype(str).values.tolist()
    worksheet.append_rows(rows)

def berÃ¤kna_fÃ¤lt(df):
    df["Summa s"] = pd.to_numeric(df["Tid s"], errors="coerce").fillna(0)
    df["Summa d"] = pd.to_numeric(df["Tid d"], errors="coerce").fillna(0)
    df["Summa t"] = pd.to_numeric(df["Tid t"], errors="coerce").fillna(0)
    df["Summa v"] = df["Summa s"] + df["Summa d"] + df["Summa t"]
    df["Klockan"] = "07:00"

    df["KÃ¤nner"] = df[["Jobb", "Grannar", "Pv", "Nils kom"]].apply(pd.to_numeric, errors="coerce").fillna(0).sum(axis=1)
    df["Tid kille"] = pd.to_numeric(df["Ã„lsk tid"], errors="coerce").fillna(0) + pd.to_numeric(df["Sover med"], errors="coerce").fillna(0)
    df["Filmer"] = (pd.to_numeric(df["MÃ¤n"], errors="coerce").fillna(0) > 0).astype(int)
    df["Pris"] = 19.99
    df["IntÃ¤kter"] = df["Pris"] * df["Filmer"]
    df["Malin"] = df["Ã„lskar"] + df["Sover med"]
    df["FÃ¶retag"] = df["Jobb"] + df["Grannar"]
    df["VÃ¤nner"] = df["KÃ¤nner"]  # Tidigare "KÃ¤nner 2"
    df["HÃ¥rdhet"] = df[["MÃ¤n", "GB", "Svarta"]].apply(pd.to_numeric, errors="coerce").fillna(0).sum(axis=1)
    df["GB"] = df[["F", "R"]].apply(pd.to_numeric, errors="coerce").fillna(0).sum(axis=1)

    return df

def main():
    st.title("ðŸ“Š MalinData App")

    worksheet, df = load_data()

    # Inmatning
    with st.form("data_form"):
        st.subheader("âž• Mata in ny rad")

        today = (pd.to_datetime(df["Dag"]).max() + pd.Timedelta(days=1)).date() if not df.empty else datetime.date.today()
        dag = st.date_input("Dag", value=today)

        kol_input = {}
        for kolumn in ALL_COLUMNS:
            if kolumn in ["Dag", "Summa s", "Summa d", "Summa t", "Summa v", "Klockan", "KÃ¤nner", "Tid kille", "Filmer", "Pris", "IntÃ¤kter", "Malin", "FÃ¶retag", "VÃ¤nner", "HÃ¥rdhet", "GB"]:
                continue
            kol_input[kolumn] = st.number_input(kolumn, min_value=0.0, format="%.2f")

        submitted = st.form_submit_button("LÃ¤gg till rad")
        if submitted:
            ny_rad = {k: kol_input.get(k, "") for k in ALL_COLUMNS}
            ny_rad["Dag"] = str(dag)

            new_df = pd.DataFrame([ny_rad])
            df = pd.concat([df, new_df], ignore_index=True)

            df = berÃ¤kna_fÃ¤lt(df)
            save_data(worksheet, df)
            st.success("âœ… Ny rad tillagd och sparad!")

    # Presentation
    if not df.empty:
        df = berÃ¤kna_fÃ¤lt(df)
        st.subheader("ðŸ“ˆ Senaste data")
        st.dataframe(df.tail(10), use_container_width=True)

        total_mÃ¤n = pd.to_numeric(df["MÃ¤n"], errors="coerce").fillna(0).sum()
        total_gb = pd.to_numeric(df["GB"], errors="coerce").fillna(0).sum()
        total_svarta = pd.to_numeric(df["Svarta"], errors="coerce").fillna(0).sum()

        total_all = total_mÃ¤n + total_gb + total_svarta
        vita_procent = ((total_mÃ¤n + total_gb - total_svarta) / total_all) * 100 if total_all > 0 else 0
        svarta_procent = (total_svarta / total_all) * 100 if total_all > 0 else 0

        st.metric("Vita (%)", f"{vita_procent:.2f}%")
        st.metric("Svarta (%)", f"{svarta_procent:.2f}%")

if __name__ == "__main__":
    main()
