# Del 1: Importer, autentisering, ladda data och s√§kerst√§ll kolumner

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
import random

# Autentisering till Google Sheets
def auth_gspread():
    scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scopes)
    client = gspread.authorize(creds)
    return client

# S√§kerst√§ll rubrikerna i kalkylbladet
def ensure_headers(worksheet, headers):
    current_headers = worksheet.row_values(1)
    if current_headers != headers:
        worksheet.resize(1)
        worksheet.update("A1", [headers])

# Ladda data och skapa kolumner om de saknas
def load_data():
    client = auth_gspread()
    sheet = client.open_by_url(st.secrets["SHEET_URL"])
    worksheet = sheet.worksheet("Blad1")

    headers = [
        "Dag","M√§n","Fi","R√∂","DM","DF","DR","TPP","TAP","TPA",
        "√Ñlskar","Sover med","K√§nner","Jobb","Jobb 2","Grannar","Grannar 2",
        "Tjej PojkV","Tjej PojkV 2","Nils fam","Nils fam 2","Totalt m√§n",
        "Tid Singel","Tid Dubbel","Tid Trippel","Vila",
        "Summa singel","Summa dubbel","Summa trippel","Summa vila","Summa tid",
        "Klockan","Tid kille","Suger","Filmer","Pris","Int√§kter",
        "Malin l√∂n","F√∂retag l√∂n","V√§nner l√∂n","H√•rdhet",
        "DeepT","Grabbar","Snitt","Sekunder","Varv","Total tid","Tid kille DT","Runk",
        "Svarta"
    ]

    ensure_headers(worksheet, headers)

    records = worksheet.get_all_records()
    df = pd.DataFrame(records)

    for col in headers:
        if col not in df.columns:
            df[col] = 0

    return worksheet, df

# Hj√§lpfunktion: n√§sta dag (heltal) efter senaste dag i df
def n√§sta_dag(df):
    if df.empty or "Dag" not in df.columns:
        return 1
    else:
        return int(df["Dag"].max()) + 1

# Uppdatera alla ber√§kningar i df
def update_calculations(df):
    # S√§kerst√§ll att alla kolumner finns
    kolumner = [
        "Jobb", "Grannar", "Tjej PojkV", "Nils fam", "M√§n", "√Ñlskar", "Totalt m√§n",
        "Tid Singel", "Tid Dubbel", "Tid Trippel", "Vila", "DM", "DF", "DR",
        "TPP", "TAP", "TPA", "Filmer", "Pris", "Int√§kter",
        "Malin l√∂n", "F√∂retag l√∂n", "V√§nner l√∂n", "Sover med", "Svarta",
        "DeepT", "Sekunder", "Varv"
    ]
    for k in kolumner:
        if k not in df.columns:
            df[k] = 0

    # K√§nner 2 = maxv√§rden f√∂r respektive
    jobb_2 = df["Jobb"].max()
    grannar_2 = df["Grannar"].max()
    tjej_2 = df["Tjej PojkV"].max()
    nils_2 = df["Nils fam"].max()

    df["Jobb 2"] = jobb_2
    df["Grannar 2"] = grannar_2
    df["Tjej PojkV 2"] = tjej_2
    df["Nils fam 2"] = nils_2

    # K√§nner = summa av maxv√§rden (K√§nner 2)
    df["K√§nner"] = jobb_2 + grannar_2 + tjej_2 + nils_2

    # Grabbar = M√§n + K√§nner (p√• radniv√•)
    df["Grabbar"] = df["M√§n"] + df["K√§nner"]

    # Totalt m√§n = M√§n + K√§nner 2
    df["Totalt m√§n"] = df["M√§n"] + df["K√§nner"]

    # Summa singel
    df["Summa singel"] = (df["Tid Singel"] + df["Vila"]) * df["Totalt m√§n"]

    # Summa dubbel
    df["Summa dubbel"] = ((df["Tid Dubbel"] + df["Vila"]) + 9) * (df["DM"] + df["DF"] + df["DR"])

    # Summa trippel
    df["Summa trippel"] = ((df["Tid Trippel"] + df["Vila"]) + 15) * (df["TPP"] + df["TAP"] + df["TPA"])

    # Summa vila
    df["Summa vila"] = (
        df["Totalt m√§n"] * df["Vila"]
        + (df["DM"] + df["DF"] + df["DR"]) * (df["Vila"] + 7)
        + (df["TPP"] + df["TAP"] + df["TPA"]) * (df["Vila"] + 15)
    )

    # Summa tid
    df["Summa tid"] = df["Summa singel"] + df["Summa dubbel"] + df["Summa trippel"]

    # Snitt
    df["Snitt"] = df["DeepT"] / df["Grabbar"].replace(0, 1)

    # Total tid
    df["Total tid"] = df["Snitt"] * (df["Sekunder"] * df["Varv"])

    # Tid kille DT
    df["Tid kille DT"] = df["Total tid"] / df["Totalt m√§n"].replace(0, 1)

    # Runk
    df["Runk"] = (df["Total tid"] * 0.6) / df["Totalt m√§n"].replace(0, 1)

    # Suger (60% av summa tid / totalt m√§n)
    df["Suger"] = (df["Summa tid"] * 0.6) / df["Totalt m√§n"].replace(0, 1)

    # Tid kille = tid s + 2*d + 3*t + suger + tid kille DT + runk
    df["Tid kille"] = (
        df["Tid Singel"]
        + 2 * df["Tid Dubbel"]
        + 3 * df["Tid Trippel"]
        + df["Suger"]
        + df["Tid kille DT"]
        + df["Runk"]
    )

    # Filmer
    df["Filmer"] = (
        df["M√§n"]
        + df["DM"] * 2
        + df["DF"] * 2
        + df["DR"] * 3
        + df["TPP"] * 4
        + df["TAP"] * 6
        + df["TPA"] * 5
    ) * df["H√•rdhet"] if "H√•rdhet" in df.columns else 0

    # Pris (fast)
    df["Pris"] = 39.99

    # Int√§kter
    df["Int√§kter"] = df["Filmer"] * df["Pris"]

    # Malin l√∂n ‚Äì 1% av int√§kter, max 800
    df["Malin l√∂n"] = (df["Int√§kter"] * 0.01).clip(upper=800)

    # F√∂retag l√∂n ‚Äì max 10000 USD
    df["F√∂retag l√∂n"] = df["Int√§kter"] * 0.4
    df["F√∂retag l√∂n"] = df["F√∂retag l√∂n"].clip(upper=10000)

    # V√§nner l√∂n ‚Äì (summa int√§kter - Malin l√∂n - F√∂retag l√∂n) / k√§nner 2
    tot_int = df["Int√§kter"].sum()
    tot_malin = df["Malin l√∂n"].sum()
    tot_f√∂retag = df["F√∂retag l√∂n"].sum()
    k√§nner2 = jobb_2 + grannar_2 + tjej_2 + nils_2
    df["V√§nner l√∂n"] = (tot_int - tot_malin - tot_f√∂retag) / (k√§nner2 if k√§nner2 > 0 else 1)

    # Klockan (07:00 + tid)
    def calc_klockan(row):
        start = datetime.strptime("07:00", "%H:%M")
        tot_min = (row["Summa singel"] + row["Summa dubbel"] + row["Summa trippel"] + row["Total tid"]) / 60
        return (start + timedelta(minutes=tot_min)).strftime("%H:%M")

    df["Klockan"] = df.apply(calc_klockan, axis=1)

    return df

# === KNAPP: Kopiera st√∂rsta raden ===
def kopiera_max(df, worksheet):
    if df.empty:
        return
    max_index = df["Totalt m√§n"].idxmax()
    ny_rad = df.loc[max_index].copy()
    ny_rad["Dag"] = n√§sta_dag(df)
    ny_rad_dict = ny_rad.to_dict()
    append_row(ny_rad_dict, worksheet)

# === KNAPP: Slumpa rad ===
def slumpa_rad(df, worksheet):
    if df.empty:
        return
    new_row = {}
    for col in df.columns:
        if col in ["Dag", "√Ñlskar", "Sover med", "Vila", "√Ñlsk tid"]:
            continue
        if pd.api.types.is_numeric_dtype(df[col]):
            new_row[col] = random.randint(int(df[col].min()), int(df[col].max()))
        else:
            new_row[col] = ""
    new_row["√Ñlskar"] = 8
    new_row["Sover med"] = 1
    new_row["Vila"] = 7
    new_row["√Ñlsk tid"] = 30
    new_row["Dag"] = n√§sta_dag(df)

    df = df.append(new_row, ignore_index=True)
    df = update_calculations(df)
    append_row(df.iloc[-1].to_dict(), worksheet)

# === KNAPP: Vilodag hemma ===
def vilodag_hemma(df, worksheet):
    ny_rad = {col: 0 for col in df.columns}
    ny_rad["Dag"] = n√§sta_dag(df)
    ny_rad["√Ñlskar"] = 8
    ny_rad["Sover med"] = 1
    ny_rad["Vila"] = 7
    ny_rad["√Ñlsk tid"] = 30
    append_row(ny_rad, worksheet)

# === KNAPP: Vilodag jobb (30% av maxv√§rde f√∂r vissa kolumner) ===
def vilodag_jobb(df, worksheet):
    ny_rad = {col: 0 for col in df.columns}
    ny_rad["Dag"] = n√§sta_dag(df)
    ny_rad["√Ñlskar"] = 8
    ny_rad["Sover med"] = 1
    ny_rad["Vila"] = 7
    ny_rad["√Ñlsk tid"] = 30
    for col in ["Jobb", "Grannar", "Tjej PojkV", "Nils fam"]:
        ny_rad[col] = int(df[col].max() * 0.3)
    append_row(ny_rad, worksheet)

# === PRESENTATION: Huvudvy ===
def huvudvy(df):
    st.header("üìä Huvudvy")

    # K√§nner 2 (maxv√§rden)
    jobb_2 = df["Jobb"].max()
    grannar_2 = df["Grannar"].max()
    tjej_2 = df["Tjej PojkV"].max()
    nils_2 = df["Nils fam"].max()
    k√§nner2 = jobb_2 + grannar_2 + tjej_2 + nils_2

    # Totalt antal m√§n = M√§n + K√§nner 2 (per rad)
    df["Grabbar"] = df["M√§n"] + k√§nner2
    totalt_m√§n = df["Grabbar"].sum()

    # Antal filmer (rader med M√§n > 0)
    antal_filmer = df[df["M√§n"] > 0].shape[0]

    # PrivatGB (rader med M√§n = 0 men K√§nner > 0)
    privat_gb = df[(df["M√§n"] == 0) & (df["K√§nner"] > 0)].shape[0]

    # Snitt film
    snitt_film = (df["M√§n"].sum() + k√§nner2) / antal_filmer if antal_filmer > 0 else 0

    # GangB
    gangb = df["K√§nner"].sum() / k√§nner2 if k√§nner2 > 0 else 0

    # √Ñlskat
    √§lskat = df["√Ñlskar"].sum() / k√§nner2 if k√§nner2 > 0 else 0

    # Sover med / Nils fam 2
    sover_med = df["Sover med"].sum() / nils_2 if nils_2 > 0 else 0

    # Vita/Svarta
    svarta_sum = df["Svarta"].sum()
    vita = (totalt_m√§n - svarta_sum) / totalt_m√§n * 100 if totalt_m√§n > 0 else 0
    svarta = svarta_sum / totalt_m√§n * 100 if totalt_m√§n > 0 else 0

    # Ekonomi
    filmer = df["Filmer"].sum()
    int√§kter = df["Int√§kter"].sum()
    malin_l√∂n = df["Malin l√∂n"].sum()
    f√∂retag_l√∂n = min(df["F√∂retag l√∂n"].sum(), 10000)
    v√§nner_l√∂n = (int√§kter - malin_l√∂n - f√∂retag_l√∂n) / k√§nner2 if k√§nner2 > 0 else 0

    antal_dagar = df.shape[0]

    # === Presentation ===
    st.markdown(f"""
    **Totalt antal m√§n:** {totalt_m√§n}  
    **K√§nner (kompisar):** {k√§nner2}  
    **Jobb:** {jobb_2}  
    **Grannar:** {grannar_2}  
    **Tjej PojkV:** {tjej_2}  
    **Nils fam:** {nils_2}  
    **Antal filmer:** {antal_filmer}  
    **PrivatGB:** {privat_gb}  
    **Snitt film:** {snitt_film:.2f}  
    **GangB:** {gangb:.2f}  
    **√Ñlskat:** {√§lskat:.2f}  
    **Sover med / Nils fam 2:** {sover_med:.2f}  
    **Vita (%):** {vita:.1f}%  
    **Svarta (%):** {svarta:.1f}%  
    **Filmer:** {filmer}  
    **Int√§kter:** ${int√§kter:.2f}  
    **Malin l√∂n:** ${malin_l√∂n:.2f}  
    **F√∂retagets l√∂n:** ${f√∂retag_l√∂n:.2f}  
    **V√§nner l√∂n (per kompis):** ${v√§nner_l√∂n:.2f}  
    **Antal dagar:** {antal_dagar}
    """)

# === PRESENTATION: Radvy ===
def radvy(df, worksheet):
    st.header("üìã Radvyn")
    if df.empty:
        st.warning("Ingen data att visa.")
        return

    rad = df.iloc[-1]
    tid_kille_min = rad["Tid kille"] / 60 if rad["Tid kille"] else 0
    marker = "‚ö†Ô∏è √ñka tid!" if tid_kille_min < 10 else ""

    st.write(f"**Tid kille:** {tid_kille_min:.2f} min {marker}")
    st.write(f"**Filmer:** {int(rad['Filmer'])}")
    st.write(f"**Int√§kter:** ${rad['Int√§kter']:.2f}")
    st.write(f"**Klockan:** {rad['Klockan']}")

    with st.form("form_justera_tid"):
        tid_s = st.number_input("Tid Singel", value=int(rad["Tid Singel"]), step=1)
        tid_d = st.number_input("Tid Dubbel", value=int(rad["Tid Dubbel"]), step=1)
        tid_t = st.number_input("Tid Trippel", value=int(rad["Tid Trippel"]), step=1)
        sekunder = st.number_input("Sekunder", value=int(rad.get("Sekunder", 0)), step=1)
        varv = st.number_input("Varv", value=int(rad.get("Varv", 0)), step=1)

        if st.form_submit_button("Spara √§ndringar"):
            index = df.index[-1]
            df.at[index, "Tid Singel"] = tid_s
            df.at[index, "Tid Dubbel"] = tid_d
            df.at[index, "Tid Trippel"] = tid_t
            df.at[index, "Sekunder"] = sekunder
            df.at[index, "Varv"] = varv

            df_updated = update_calculations(df)
            row_dict = df_updated.iloc[index].to_dict()
            update_row(worksheet, index, row_dict)
            st.success("‚è±Ô∏è Tider uppdaterade! Ladda om f√∂r att se f√∂r√§ndringar.")

# === MAIN-FUNKTION ===
def main():
    st.title("Malin Data App")

    worksheet, df = load_data()
    df = update_calculations(df)

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if st.button("‚ûï Vilodag jobb"):
            vilodag_jobb(df, worksheet)
    with col2:
        if st.button("‚ûï Vilodag hemma"):
            vilodag_hemma(df, worksheet)
    with col3:
        if st.button("üìã Kopiera st√∂rsta raden"):
            kopiera_max(df, worksheet)
    with col4:
        if st.button("üé≤ Slumpa rad"):
            slumpa_rad(df, worksheet)

    inmatning(df, worksheet)
    huvudvy(df)
    radvy(df, worksheet)

if __name__ == "__main__":
    main()
