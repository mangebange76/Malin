import streamlit as st
import pandas as pd
import gspread
from datetime import datetime, timedelta
import random
from google.oauth2.service_account import Credentials

# Autentisering till Google Sheets
SHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=SCOPE)
gc = gspread.authorize(creds)

# Kolumner som alltid ska finnas i databasen
REQUIRED_COLUMNS = [
    "Datum", "Typ", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
    "Enkel vaginal", "Enkel anal", "Kompisar", "Pappans v√§nner",
    "Nils v√§nner", "Nils familj", "√ñvriga m√§n", "√Ñlskar med", "Sover med", "Nils sex",
    "DT tid per man (sek)", "DT total tid (sek)", "Total tid (sek)", "Total tid (h)",
    "Prenumeranter", "Int√§kt ($)", "Kvinnans l√∂n ($)", "M√§ns l√∂n ($)", "Kompisars l√∂n ($)",
    "Minuter per kille", "Scenens l√§ngd (h)"
]

def init_sheet():
    sh = gc.open_by_url(SHEET_URL)
    try:
        worksheet = sh.worksheet("Data")
    except:
        worksheet = sh.add_worksheet(title="Data", rows="1000", cols="50")

    data = worksheet.get_all_values()
    if not data:
        worksheet.update("A1", [REQUIRED_COLUMNS])
    else:
        current_cols = data[0]
        if current_cols != REQUIRED_COLUMNS:
            worksheet.clear()
            worksheet.update("A1", [REQUIRED_COLUMNS])

def ensure_columns_exist(df):
    for col in REQUIRED_COLUMNS:
        if col not in df.columns:
            df[col] = None
    df = df[REQUIRED_COLUMNS]
    return df

def load_data():
    sh = gc.open_by_url(SHEET_URL)
    worksheet = sh.worksheet("Data")
    data = worksheet.get_all_records()
    df = pd.DataFrame(data)
    df = ensure_columns_exist(df)
    return df

def save_data(df):
    df = df.fillna("")
    df = df.astype(str)
    sh = gc.open_by_url(SHEET_URL)
    worksheet = sh.worksheet("Data")
    worksheet.clear()
    worksheet.update([df.columns.values.tolist()] + df.values.tolist())

def l√§s_inst√§llningar():
    sh = gc.open_by_url(SHEET_URL)
    try:
        worksheet = sh.worksheet("Inst√§llningar")
    except:
        worksheet = sh.add_worksheet(title="Inst√§llningar", rows="100", cols="2")
        worksheet.update("A1:B1", [["Namn", "V√§rde"]])
        default_settings = [
            ["Startdatum", "2014-03-26"],
            ["Kvinnans namn", "Malin"],
            ["F√∂delsedatum", "1984-03-26"],
            ["Kompisar", "40"],
            ["Pappans v√§nner", "30"],
            ["Nils v√§nner", "25"],
            ["Nils familj", "15"]
        ]
        worksheet.update("A2:B8", default_settings)

    inst_df = pd.DataFrame(worksheet.get_all_records())
    inst = {}
    for _, row in inst_df.iterrows():
        inst[row["Namn"]] = row["V√§rde"]
    return inst

def spara_inst√§llningar(inst):
    sh = gc.open_by_url(SHEET_URL)
    worksheet = sh.worksheet("Inst√§llningar")
    rows = [[k, v] for k, v in inst.items()]
    worksheet.clear()
    worksheet.update("A1:B1", [["Namn", "V√§rde"]])
    worksheet.update("A2", rows)

def scenformul√§r(df, inst):
    st.subheader("L√§gg till scen eller vila")

    with st.form("scenform"):
        typ = st.selectbox("Typ", ["Scen", "Vila inspelningsplats", "Vilovecka hemma"])
        vilodagar = st.number_input("Antal vilodagar (om vila)", min_value=0, value=0, step=1)
        scenl√§ngd = st.number_input("Scenens l√§ngd (i timmar)", min_value=0.0, value=0.0, step=0.5)
        √∂vriga = st.number_input("√ñvriga m√§n", min_value=0, value=0, step=1)

        enkel_v = st.number_input("Enkel vaginal", min_value=0, value=0, step=1)
        enkel_a = st.number_input("Enkel anal", min_value=0, value=0, step=1)
        dp = st.number_input("DP", min_value=0, value=0, step=1)
        dpp = st.number_input("DPP", min_value=0, value=0, step=1)
        dap = st.number_input("DAP", min_value=0, value=0, step=1)
        tpp = st.number_input("TPP", min_value=0, value=0, step=1)
        tap = st.number_input("TAP", min_value=0, value=0, step=1)
        tpa = st.number_input("TPA", min_value=0, value=0, step=1)

        kompisar = st.number_input("Kompisar", min_value=0, value=0, step=1, max_value=int(inst.get("Kompisar", 0)))
        pappans_v = st.number_input("Pappans v√§nner", min_value=0, value=0, step=1, max_value=int(inst.get("Pappans v√§nner", 0)))
        nils_v = st.number_input("Nils v√§nner", min_value=0, value=0, step=1, max_value=int(inst.get("Nils v√§nner", 0)))
        nils_f = st.number_input("Nils familj", min_value=0, value=0, step=1, max_value=int(inst.get("Nils familj", 0)))

        dt_tid = st.number_input("Deep throat-tid per man (sekunder)", min_value=0, value=60, step=5)
        √§lskar = st.number_input("Antal √§lskar med", min_value=0, value=0, step=1)
        sover = st.number_input("Antal sover med", min_value=0, value=0, step=1)

        # Visa direkt ber√§knad totaltid, tid per man + dt-tid
        antal_m√§n = sum([
            √∂vriga, kompisar, pappans_v, nils_v, nils_f,
            enkel_v + enkel_a,
            2 * (dp + dpp + dap),
            3 * (tpp + tap + tpa)
        ])
        total_tid_h = scenl√§ngd + (antal_m√§n * dt_tid / 3600)
        tid_per_kille_min = (total_tid_h * 60) / antal_m√§n if antal_m√§n > 0 else 0

        st.markdown(f"**Total tid:** {total_tid_h:.2f} timmar")
        st.markdown(f"**Tid per kille inkl. deep throat:** {tid_per_kille_min:.2f} minuter")

        if total_tid_h > 18:
            st.error("Varning: Total tid √∂verstiger 18 timmar!")

        submitted = st.form_submit_button("L√§gg till")

        if submitted:
            datum = generera_nytt_datum(df, typ, vilodagar)
            ny_rad = {
                "Datum": datum,
                "Typ": typ,
                "Antal vilodagar": vilodagar,
                "Scenens l√§ngd (h)": scenl√§ngd,
                "√ñvriga m√§n": √∂vriga,
                "Enkel vaginal": enkel_v,
                "Enkel anal": enkel_a,
                "DP": dp,
                "DPP": dpp,
                "DAP": dap,
                "TPP": tpp,
                "TAP": tap,
                "TPA": tpa,
                "Kompisar": kompisar,
                "Pappans v√§nner": pappans_v,
                "Nils v√§nner": nils_v,
                "Nils familj": nils_f,
                "DT tid per man": dt_tid,
                "Antal √§lskar med": √§lskar,
                "Antal sover med": sover,
            }
            df = df.append(ny_rad, ignore_index=True)
            save_data(df)
            st.success("Rad tillagd!")
            st.experimental_rerun()

def visa_databas(df):
    st.subheader("Databas ‚Äì alla rader")
    st.dataframe(df)

    if not df.empty:
        df_copy = df.copy()
        df_copy["Totaltid (h)"] = df_copy.apply(lambda row: (
            float(row["Scenens l√§ngd (h)"]) + (
                (
                    int(row["√ñvriga m√§n"]) +
                    int(row["Kompisar"]) +
                    int(row["Pappans v√§nner"]) +
                    int(row["Nils v√§nner"]) +
                    int(row["Nils familj"]) +
                    int(row["Enkel vaginal"]) +
                    int(row["Enkel anal"]) +
                    2 * (int(row["DP"]) + int(row["DPP"]) + int(row["DAP"])) +
                    3 * (int(row["TPP"]) + int(row["TAP"]) + int(row["TPA"]))
                ) * float(row["DT tid per man"]) / 3600
            )
        ), axis=1)

        df_copy["Antal m√§n"] = df_copy.apply(lambda row: (
            int(row["√ñvriga m√§n"]) +
            int(row["Kompisar"]) +
            int(row["Pappans v√§nner"]) +
            int(row["Nils v√§nner"]) +
            int(row["Nils familj"]) +
            int(row["Enkel vaginal"]) +
            int(row["Enkel anal"]) +
            2 * (int(row["DP"]) + int(row["DPP"]) + int(row["DAP"])) +
            3 * (int(row["TPP"]) + int(row["TAP"]) + int(row["TPA"]))
        ), axis=1)

        df_copy["Tid per man (minuter inkl. DT)"] = df_copy.apply(lambda row: (
            (row["Totaltid (h)"] * 60 / row["Antal m√§n"]) if row["Antal m√§n"] > 0 else 0
        ), axis=1)

        df_copy["Varning"] = df_copy["Totaltid (h)"].apply(lambda x: "√ñver 18h" if x > 18 else "")

        st.dataframe(df_copy[[
            "Datum", "Typ", "Scenens l√§ngd (h)", "DT tid per man",
            "Totaltid (h)", "Tid per man (minuter inkl. DT)", "Varning"
        ]])

def main():
    st.set_page_config(page_title="Malin App", layout="wide")

    st.title("üé¨ Malin ‚Äì Ber√§kningar och statistik")

    # Autentisering och h√§mtning av kalkylarket
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials = Credentials.from_service_account_info(
        st.secrets["GOOGLE_CREDENTIALS"],
        scopes=scope
    )
    gc = gspread.authorize(credentials)
    sh = gc.open_by_url("https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk")

    # Initiera ark
    df = init_sheet(sh)
    inst = init_inst√§llningar(sh)

    # Visa redigerbar sidopanel
    visa_inst√§llningar(inst)

    # Visa formul√§r f√∂r att l√§gga till scen eller vila
    scenformul√§r(df, inst)

    # Visa databas + summering
    visa_databas(df)


if __name__ == "__main__":
    main()
