import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
from berakningar import process_l√§gg_till_rader, ber√§kna_tid_per_kille

# Konfigurera och autentisera
scope = ["https://spreadsheets.google.com/feeds", 
         "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(
    st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
gc = gspread.authorize(credentials)
SHEET_URL = st.secrets.get("SHEET_URL", "")

# Konstanter
COLUMNS = [
    "Datum", "Typ", "Antal vilodagar", "Nya m√§n",
    "Enkel vaginal", "Enkel anal", "DP", "DPP", "DAP",
    "TPP", "TPA", "TAP",
    "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj",
    "DT tid per man (sek)", "√Ñlskar med", "Sover med", "Nils sex",
    "Prenumeranter", "Int√§kt ($)", "Kvinnans l√∂n ($)", "M√§ns l√∂n ($)", "Kompisars l√∂n ($)",
    "DT total tid (sek)", "Total tid (sek)", "Total tid (h)", "Minuter per kille"
]

def init_sheet(sh):
    try:
        sheet = sh.worksheet("Data")
    except gspread.WorksheetNotFound:
        sheet = sh.add_worksheet(title="Data", rows="2000", cols=str(len(COLUMNS)))
        sheet.update("A1", [COLUMNS])
    df = pd.DataFrame(sh.worksheet("Data").get_all_records())
    df = df.reindex(columns=COLUMNS, fill_value=0)
    return df

def s√§kerst√§ll_kolumner(df):
    for col in COLUMNS:
        if col not in df.columns:
            df[col] = 0
    return df[COLUMNS]

def l√§s_inst√§llningar(sh):
    try:
        sheet = sh.worksheet("Inst√§llningar")
    except gspread.WorksheetNotFound:
        sheet = sh.add_worksheet(title="Inst√§llningar", rows="100", cols="3")
        sheet.update("A1:C1", [["Namn", "V√§rde", "Senast √§ndrad"]])
        default = [
            ["Startdatum", datetime.today().strftime("%Y-%m-%d")],
            ["Kvinnans namn", "Malin"],
            ["F√∂delsedatum", "1984-03-26"],
            ["Kompisar", 50],
            ["Pappans v√§nner", 25],
            ["Nils v√§nner", 15],
            ["Nils familj", 10],
        ]
        sheet.update("A2:C8", [[k, v, datetime.today().strftime("%Y-%m-%d")] for k,v in default])
    df = pd.DataFrame(sheet.get_all_records())
    inst = {}
    for _, row in df.iterrows():
        inst[row["Namn"]] = float(row["V√§rde"]) if isinstance(row["V√§rde"], (int,float,str)) and str(row["V√§rde"]).replace('.', '',1).isdigit() else row["V√§rde"]
    return inst

def spara_inst√§llningar(sh, inst):
    sheet = sh.worksheet("Inst√§llningar")
    idag = datetime.today().strftime("%Y-%m-%d")
    rows = [[k, inst[k], idag] for k in inst]
    sheet.update("A2:C" + str(len(rows)+1), rows)

def spara_data(sh, df):
    df = df[COLUMNS]
    import numpy as np
    def st√§da(x):
        if pd.isna(x) or x in [None, np.nan, float("inf"), float("-inf")]:
            return ""
        return x
    df = df.applymap(st√§da)
    sheet = sh.worksheet("Data")
    sheet.clear()
    sheet.update("A1", [COLUMNS])
    if df.empty: return
    vals = df.values.tolist()
    max_chunk = 1000
    for i in range(0, len(vals), max_chunk):
        r = i + 2
        chunk = vals[i:i+max_chunk]
        try:
            sheet.update(f"A{r}", chunk)
        except Exception as e:
            st.error(f"‚ùå Fel vid skrivning till A{r}")
            st.write(chunk)
            raise

def inst√§llningspanel(sh, inst):
    st.sidebar.header("Inst√§llningar")
    with st.sidebar.form("inst√§llningar"):
        f = {}
        f["Startdatum"] = st.text_input("Startdatum (YYYY‚ÄëMM‚ÄëDD)", inst.get("Startdatum", ""))
        f["Kvinnans namn"] = st.text_input("Kvinnans namn", inst.get("Kvinnans namn", ""))
        f["F√∂delsedatum"] = st.text_input("F√∂delsedatum (YYYY‚ÄëMM‚ÄëDD)", inst.get("F√∂delsedatum", ""))
        for grp in ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]:
            f[grp] = st.number_input(grp, 0, 10000, int(inst.get(grp, 0)))
        if st.form_submit_button("Spara inst√§llningar"):
            spara_inst√§llningar(sh, f)
            st.success("Inst√§llningar sparade")
    if st.sidebar.button("Rensa databas"):
        sh.worksheet("Data").resize(rows=1)
        sh.worksheet("Data").update("A1", [COLUMNS])
        st.sidebar.success("Databasen rensad")

def scenformul√§r(df, inst, sh):
    st.subheader("L√§gg till scen / vila")
    with st.form("scenform", clear_on_submit=False):
        f = {}
        f["Typ"] = st.selectbox("Typ", ["Scen", "Vila inspelningsplats", "Vilovecka hemma"])
        f["Antal vilodagar"] = st.number_input("Antal vilodagar", 0, 30, step=1)
        f["Nya m√§n"] = st.number_input("Nya m√§n", 0, 500, step=1)
        for key in ["Enkel vaginal", "Enkel anal", "DP", "DPP", "DAP", "TPP", "TPA", "TAP"]:
            f[key] = st.number_input(key, 0, 500, step=1)
        for grp in ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]:
            f[grp] = st.number_input(grp, 0, int(inst.get(grp, 0)), step=1)
        f["DT tid per man (sek)"] = st.number_input("DT tid per man (sek)", 0, 9999, step=1)
        f["√Ñlskar med"] = st.number_input("√Ñlskar med", 0, 100, step=1)
        f["Sover med"] = st.number_input("Sover med", 0, 100, step=1)
        st.write("‚úî Jag bekr√§ftar att uppgifterna √§r korrekta")
        confirmed = st.checkbox("Bekr√§fta inf√∂r sparande")
        tid_min, total_h = ber√§kna_tid_per_kille(f)
        st.markdown(f"**Total tid:** {total_h:.2f} h  ‚Ä¢  **Minuter per kille:** {tid_min:.2f} min")
        if total_h > 18:
            st.warning("‚ö†Ô∏è Total tid √∂verstiger 18 timmar! Redigera innan sparande.")
        ok = st.form_submit_button("L√§gg till i databas")
        if ok:
            if not confirmed:
                st.error("Du m√•ste bekr√§fta data innan sparning.")
            elif total_h > 18:
                st.error("Total tid √∂ver 18¬†timmar. Justera v√§rden f√∂rst.")
            else:
                df = process_l√§gg_till_rader(df, inst, f)
                df = s√§kerst√§ll_kolumner(df)
                spara_data(sh, df)
                st.success("‚úÖ Data sparad")
    return df

def visa_data(df):
    st.subheader("Databas")
    st.dataframe(df)
    if not df.empty:
        rng = df.iloc[-1]
        st.info(f"Senaste: {rng['Datum']} ‚Äì {rng['Typ']}")

def main():
    st.set_page_config(page_title="Malin-produktionsapp", layout="wide")
    st.title("üé¨ Malin-produktionsapp")
    if not SHEET_URL:
        st.error("SHEET_URL saknas i secrets")
        return
    sh = gc.open_by_url(SHEET_URL)
    inst = l√§s_inst√§llningar(sh)
    inst√§llningspanel(sh, inst)
    df = init_sheet(sh)
    df = s√§kerst√§ll_kolumner(df)
    df = konvertera_typer(df) if 'konvertera_typer' in globals() else df
    df = scenformul√§r(df, inst, sh)
    visa_data(df)

if __name__ == "__main__":
    main()
