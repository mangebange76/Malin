import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from random import sample, randint

# Autentisering
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
gc = gspread.authorize(credentials)

# Spreadsheet
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1--mqpIEEta9An4kFvHZBJoFlRz1EtozxCy2PnD4PNJ0/edit?usp=drivesdk"
sh = gc.open_by_url(SPREADSHEET_URL)

# Kolumner
DATA_COLUMNS = [
    "Datum", "Typ", "DP", "DPP", "DAP", "TPA", "TPP", "TAP",
    "Enkel vaginal", "Enkel anal",
    "Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj", "√ñvriga m√§n",
    "√Ñlskar med", "Sover med", "Nils sex",
    "DT tid per man (sek)", "DT total tid (sek)", "Total tid (sek)", "Total tid (h)",
    "Prenumeranter", "Int√§kt ($)", "Kvinnans l√∂n ($)", "M√§ns l√∂n ($)", "Kompisars l√∂n ($)",
    "Minuter per kille", "Scenens l√§ngd (h)"
]

INST_COLUMNS = ["Inst√§llning", "V√§rde", "Senast √§ndrad"]

def init_sheet(name, cols):
    try:
        worksheet = sh.worksheet(name)
    except:
        worksheet = sh.add_worksheet(title=name, rows="1000", cols="30")
        worksheet.update("A1", [cols])
    else:
        existing_cols = worksheet.row_values(1)
        if existing_cols != cols:
            worksheet.resize(rows=1)
            worksheet.update("A1", [cols])

def init_inst√§llningar():
    try:
        worksheet = sh.worksheet("Inst√§llningar")
    except:
        worksheet = sh.add_worksheet(title="Inst√§llningar", rows="100", cols="3")
        worksheet.update("A1", [INST_COLUMNS])
        standard = [
            ["Kvinnans namn", "Malin", datetime.now().strftime("%Y-%m-%d")],
            ["F√∂delsedatum", "1984-03-26", datetime.now().strftime("%Y-%m-%d")],
            ["Startdatum", "2014-03-26", datetime.now().strftime("%Y-%m-%d")],
            ["Kompisar", "100", datetime.now().strftime("%Y-%m-%d")],
            ["Pappans v√§nner", "40", datetime.now().strftime("%Y-%m-%d")],
            ["Nils v√§nner", "30", datetime.now().strftime("%Y-%m-%d")],
            ["Nils familj", "20", datetime.now().strftime("%Y-%m-%d")]
        ]
        worksheet.update(f"A2:C{len(standard)+1}", standard)

def l√§s_inst√§llningar():
    worksheet = sh.worksheet("Inst√§llningar")
    data = worksheet.get_all_records()
    inst = {}
    for rad in data:
        val = str(rad["V√§rde"])
        try:
            inst[rad["Inst√§llning"]] = float(val.replace(",", "."))
        except:
            inst[rad["Inst√§llning"]] = val
    return inst

def spara_inst√§llning(nyckel, v√§rde):
    worksheet = sh.worksheet("Inst√§llningar")
    df = pd.DataFrame(worksheet.get_all_records())
    idag = datetime.now().strftime("%Y-%m-%d")
    if nyckel in df["Inst√§llning"].values:
        idx = df[df["Inst√§llning"] == nyckel].index[0]
        worksheet.update_cell(idx + 2, 2, str(v√§rde))
        worksheet.update_cell(idx + 2, 3, idag)
    else:
        worksheet.append_row([nyckel, str(v√§rde), idag])

def s√§kerst√§ll_kolumner(df):
    for kolumn in DATA_COLUMNS:
        if kolumn not in df.columns:
            df[kolumn] = ""
    return df[DATA_COLUMNS]

def spara_data(df):
    df = df.fillna("").astype(str)
    worksheet = sh.worksheet("Data")
    worksheet.clear()
    worksheet.update("A1", [df.columns.tolist()] + df.values.tolist())

def ladda_data():
    try:
        worksheet = sh.worksheet("Data")
        data = worksheet.get_all_records()
        if not data:
            return pd.DataFrame(columns=DATA_COLUMNS)
        df = pd.DataFrame(data)
        return s√§kerst√§ll_kolumner(df)
    except:
        return pd.DataFrame(columns=DATA_COLUMNS)

def f√∂rdela_heltal_slumpm√§ssigt(total, dagar=7):
    delar = [0] * dagar
    for _ in range(int(total)):
        idx = randint(0, dagar - 1)
        delar[idx] += 1
    return delar

def scenformul√§r(df, inst):
    st.subheader("L√§gg till scen eller vila")

    with st.form("l√§gg_till", clear_on_submit=True):
        typ = st.selectbox("Typ", ["Scen", "Vila inspelningsplats", "Vilovecka hemma"])
        dagar = st.number_input("Antal vilodagar (g√§ller bara vid vila)", min_value=1, step=1)
        scen_tid = st.number_input("Scenens l√§ngd (h)", min_value=0.0, step=0.25)
        ov = st.number_input("√ñvriga m√§n", min_value=0, step=1)
        enkel_vag = st.number_input("Enkel vaginal", min_value=0, step=1)
        enkel_anal = st.number_input("Enkel anal", min_value=0, step=1)
        dp = st.number_input("DP", min_value=0, step=1)
        dpp = st.number_input("DPP", min_value=0, step=1)
        dap = st.number_input("DAP", min_value=0, step=1)
        tpp = st.number_input("TPP", min_value=0, step=1)
        tap = st.number_input("TAP", min_value=0, step=1)
        tpa = st.number_input("TPA", min_value=0, step=1)
        komp = st.number_input("Kompisar", min_value=0, step=1, max_value=int(inst.get("Kompisar", 999)))
        pappans = st.number_input("Pappans v√§nner", min_value=0, step=1, max_value=int(inst.get("Pappans v√§nner", 999)))
        nils_v = st.number_input("Nils v√§nner", min_value=0, step=1, max_value=int(inst.get("Nils v√§nner", 999)))
        nils_f = st.number_input("Nils familj", min_value=0, step=1, max_value=int(inst.get("Nils familj", 999)))
        dt_tid_per_man = st.number_input("DT tid per man (sek)", min_value=0, step=1)
        √§lskar = st.number_input("Antal √§lskar med", min_value=0, step=1)
        sover = st.number_input("Antal sover med", min_value=0, step=1)
        submit = st.form_submit_button("L√§gg till")

    if submit:
        senaste_datum = pd.to_datetime(df["Datum"].max()) if not df.empty else pd.to_datetime(inst.get("Startdatum"))
        nils_sextillf√§llen = [0] * 7

        if typ == "Vilovecka hemma":
            tillf√§llen = sorted(sample(range(6), k=min(2, 6)))
            for i in tillf√§llen:
                nils_sextillf√§llen[i] = 1

            komp_list = f√∂rdela_heltal_slumpm√§ssigt(1.5 * inst.get("Kompisar", 0))
            pappans_list = f√∂rdela_heltal_slumpm√§ssigt(1.5 * inst.get("Pappans v√§nner", 0))
            nils_v_list = f√∂rdela_heltal_slumpm√§ssigt(1.5 * inst.get("Nils v√§nner", 0))
            nils_f_list = f√∂rdela_heltal_slumpm√§ssigt(1.5 * inst.get("Nils familj", 0))

        antal = 7 if typ == "Vilovecka hemma" else int(dagar)
        nya_rader = []

        for i in range(antal):
            datum = senaste_datum + timedelta(days=1)
            senaste_datum = datum

            if typ == "Vilovecka hemma":
                sover_med = 1 if i == 6 else 0
                √§lskar_med = 8 if i < 6 else 0
                nils_sex = nils_sextillf√§llen[i]
                komp_i = komp_list[i]
                pappans_i = pappans_list[i]
                nils_v_i = nils_v_list[i]
                nils_f_i = nils_f_list[i]
            elif typ == "Vila inspelningsplats":
                √§lskar_med = 12
                sover_med = 1
                nils_sex = 0
                komp_i = randint(int(0.25 * inst.get("Kompisar", 0)), int(0.5 * inst.get("Kompisar", 0)))
                pappans_i = randint(int(0.25 * inst.get("Pappans v√§nner", 0)), int(0.5 * inst.get("Pappans v√§nner", 0)))
                nils_v_i = randint(int(0.25 * inst.get("Nils v√§nner", 0)), int(0.5 * inst.get("Nils v√§nner", 0)))
                nils_f_i = randint(int(0.25 * inst.get("Nils familj", 0)), int(0.5 * inst.get("Nils familj", 0)))
            else:
                √§lskar_med = √§lskar
                sover_med = sover
                nils_sex = 0
                komp_i = komp
                pappans_i = pappans
                nils_v_i = nils_v
                nils_f_i = nils_f

            rad = {
                "Datum": datum.strftime("%Y-%m-%d"),
                "Typ": typ,
                "DP": dp, "DPP": dpp, "DAP": dap,
                "TPA": tpa, "TPP": tpp, "TAP": tap,
                "Enkel vaginal": enkel_vag, "Enkel anal": enkel_anal,
                "Kompisar": komp_i, "Pappans v√§nner": pappans_i,
                "Nils v√§nner": nils_v_i, "Nils familj": nils_f_i,
                "√ñvriga m√§n": ov,
                "√Ñlskar med": √§lskar_med,
                "Sover med": sover_med,
                "Nils sex": nils_sex,
                "DT tid per man (sek)": dt_tid_per_man,
                "Scenens l√§ngd (h)": scen_tid
            }
            nya_rader.append(rad)

        df = pd.concat([df, pd.DataFrame(nya_rader)], ignore_index=True)
        spara_data(df)
        st.rerun()

def main():
    init_sheet("Data", DATA_COLUMNS)
    init_inst√§llningar()
    inst = l√§s_inst√§llningar()
    df = ladda_data()

    st.title("üé¨ Malin Filmproduktion")

    with st.sidebar:
        st.header("Inst√§llningar")
        with st.form("spara_inst√§llningar"):
            namn = st.text_input("Kvinnans namn", value=str(inst.get("Kvinnans namn", "")))
            f√∂dd = st.date_input("F√∂delsedatum", value=pd.to_datetime(inst.get("F√∂delsedatum", "1984-03-26")))
            startdatum = st.date_input("Startdatum (f√∂rsta scen)", value=pd.to_datetime(inst.get("Startdatum", "2014-03-26")))

            inst_inputs = {}
            for f√§lt in ["Kompisar", "Pappans v√§nner", "Nils v√§nner", "Nils familj"]:
                inst_inputs[f√§lt] = st.number_input(f√§lt, value=float(inst.get(f√§lt, 0)), min_value=0.0, step=1.0)

            spara = st.form_submit_button("Spara inst√§llningar")

        if spara:
            spara_inst√§llning("Kvinnans namn", namn)
            spara_inst√§llning("F√∂delsedatum", f√∂dd.strftime("%Y-%m-%d"))
            spara_inst√§llning("Startdatum", startdatum.strftime("%Y-%m-%d"))
            for nyckel, v√§rde in inst_inputs.items():
                spara_inst√§llning(nyckel, v√§rde)
            st.success("Inst√§llningar sparade!")

    scenformul√§r(df, inst)

if __name__ == "__main__":
    main()
